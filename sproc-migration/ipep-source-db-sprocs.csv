dbo,USP_Get_UHCNDC_MedList," Create procedure USP_Get_UHCNDC_MedList AS  BEGIN 	-- We need unique NDC from Trn_UHCMedNDC_List so we are taking distinct NDC. 	SELECT distinct NDC.NDC,NDC.Med_ID,NDC.Strength_ID  	FROM TRN_UHCMedNDC_List UHC INNER JOIN Mst_MedNDC NDC ON UHC.NDC= NDC.NDC END --EXEC USP_Get_UHCNDC_MedList"
dbo,USP_Trn_Patient_Pharmcy," Create procedure USP_Trn_Patient_Pharmcy (@PatientId INT) AS BEGIN 	SELECT  		TPP.ID, 		Patient_ID, 		MP.Id AS Pharmacy_ID,  		PharmacyNABP, 		PharmacyName, 		PharmacyAddress, 		PharmacyCity, 		PharmacyState, 		PharmacyZip, 		PharmacyPhone, 		PharmacyNPI 	From Trn_Patient_Pharmcy TPP  	INNER JOIN Mst_Pharmacy MP ON MP.Id = TPP.Pharmacy_ID 	WHERE TPP.Patient_ID = @PatientId AND ISNULL(TPP.isDeleted, 0) = 0 END  -- EXEC USP_Trn_Patient_Pharmcy 3"
dbo,USP_GetAccountWiseActivityList," Create procedure [dbo].[USP_GetAccountWiseActivityList] ( 	@AccountId INT ) AS BEGIN 	DECLARE @AccountTypeId INT = (SELECT AccountType FROM Mst_Account WHERE Account_ID = @AccountId) 	SELECT  		MA.Activity_ID,  		MA.Activity_Name,  		MA.Activity_Description,  		MA.Activity_Status, 		MAA.ActivityTypeValue, 		MA.ActivityType,  		MA.SequenceNumber,  		MA.ActivityNumber 	FROM Mst_Account M  	INNER JOIN Mst_AccountActivity MAA ON M.AccountType = MAA.AccountTypeId AND M.Account_ID = @AccountId AND MAA.AccountTypeId = @AccountTypeId 	INNER JOIN Mst_Activity MA ON MAA.ActivityType=MA.ActivityType AND MA.Activity_Status = 1 	ORDER BY SequenceNumber, ActivityNumber END  -- Exec USP_GetAccountWiseActivityList 5"
dbo,USP_Trn_Patient_Prescriber," Create procedure USP_Trn_Patient_Prescriber (@PatientId INT) AS BEGIN 	SELECT  		TPP.Id, 		TPP.Patient_Id, 		TPP.IsActive, 		TPP.IsDeleted, 		MP.Id AS PrescriberId, 		MP.PrescriberNPI, 		MP.PrescriberFirstName, 		MP.PrescriberLastName, 		MP.PrescriberFirstName + ' ' +MP.PrescriberLastName AS PrescriberFullName, 		MP.PrescriberAddress, 		MP.PrescriberCity, 		MP.PrescriberState, 		MP.PrescriberZip, 		MP.PrescriberPhone, 		MP.PrescriberFax 	From Trn_Patient_Prescriber TPP  	INNER JOIN Mst_Prescriber MP ON MP.Id = TPP.PrescriberId 	WHERE TPP.Patient_ID = @PatientId AND ISNULL(TPP.isDeleted, 0) = 0 END  -- EXEC USP_Trn_Patient_Prescriber 3"
dbo,USP_GetAllBillingCodeFees," Create procedure USP_GetAllBillingCodeFees  AS BEGIN 	SET NOCOUNT ON 	BEGIN 		SELECT  		Id, 		BillingCode, 		Fees		 		FROM MstBillingCodeFees  	END END"
dbo,USP_Update_All_Patient_NextRefillDueDate," Create procedure USP_Update_All_Patient_NextRefillDueDate AS  BEGIN 	DECLARE @RowCount INT = 0; 	With NextRefillDueDate AS (  		Select Patient_ID,Min(Refill_Next_Date) Refill_Next_Date  		From Trn_Patient_Med_Dosage WHERE Refill_Next_Date > GETDATE() AND ISNULL(Patient_Dosage_Prescribed_Status, 1) = 1 --Getting next minimum date from active medicine only. 		GROUP BY Patient_ID  	)  	Update Mst_Patient SET ReFillDueDate = NRD.Refill_Next_Date  	FROM Mst_Patient P INNER JOIN NextRefillDueDate NRD ON P.Patient_ID = NRD.Patient_ID 	SELECT @RowCount = @@ROWCOUNT 	SELECT @RowCount END -- exec USP_Update_All_Patient_NextRefillDueDate"
dbo,USP_GetAllDischargeLog," CREATE PROCEDURE USP_GetAllDischargeLog ( 	@userId int, 	@AccountId INT, 	@search nvarchar(50) = '',  	@EnrollmentStatus int = 0, -- zero will indicate not enrolled, 99 will indicate all enrollment status 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	--DECLARE @currentYear int = YEAR(GETDATE()); 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	DECLARE @EnrollMstActivityID int; 	SET @EnrollMstActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'DischargeInfo');  	WITH Result AS ( 		SELECT  			patient.Patient_ID, 			patient.Account_ID, 			patient.Patient_First_Name, 			patient.Patient_Last_Name, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS PatientFullName, 			patient.Patient_DOB, 			patient.Patient_MRN, 			IPL.InPatientLogId, 			IPL.AdmissionDate, 			IPL.EstimatedDischargeDate, 			IPL.DischargeDate, 			IPL.UnitNumber, 			IPL.RoomNumber, 			IPL.EnrollmentStatus, 			enm.Discription AS DisplayEnrollmentStatus, 			IPL.PostDischargeFolloUpNeeded, 			IPL.IsDischargeSummary, 			IPL.IsDischargeDate, 			IPL.IsHospitalEHRDocumentation, 			IPL.IsHomeVisitScheduled, 			IPL.IsReferral, 			IPL.NotesBy, 			IPL.Notes, 			IPL.NotesDate, 			TPA.Patient_Activity_ID, 			TPA.Activity_Assigned_To, 			usr.User_First_Name + ' ' + usr.User_Last_Name AS ActivityAssignedToName, 			TPA.CallBackDate, 			TPA.LastAttemptDate, 			TPA.Activity_Start_Status, 			enmm.Discription AS DispalyActivityStatus, 			TPA.AttemptNumber, 			patientContact.Patient_Contact_Phone, 			patient.HomeVisitType, 			MAT.Activity_Type_Name 		FROM Trn_InPatientLog IPL with (nolock) 		INNER JOIN dbo.Mst_Patient patient with (nolock) ON patient.Patient_ID = IPL.Patient_ID AND patient.Account_ID = @AccountId		 		INNER JOIN Mst_Enum enm ON enm.EnumValue = IPL.EnrollmentStatus AND enm.EnumType = 'EnrollmentStatus' 		LEFT JOIN  			dbo.Trn_Patient_Contact patientContact with (nolock) ON patient.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  		LEFT JOIN Trn_Patient_Activity TPA ON TPA.Patient_ID = IPL.Patient_ID AND TPA.InPatientLogId = IPL.InPatientLogId AND TPA.Activity_ID = @EnrollMstActivityID 		LEFT JOIN Mst_Enum enmm ON enmm.EnumValue = TPA.Activity_Start_Status AND enmm.EnumType = 'ActivityStatus' 		LEFT JOIN Mst_User usr with (nolock) ON usr.User_ID = TPA.Activity_Assigned_To 		LEFT JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = patient.HomeVisitType 		WHERE ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 				OR Patient_MRN LIKE '%' + @search + '%' 				OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 			AND (@EnrollmentStatus = 99 OR IPL.EnrollmentStatus = @EnrollmentStatus) 			AND patient.Patient_Status = 1 			AND (IPL.PostDischargeFolloUpNeeded = 1 AND IPL.IsDischargeSummary = 1 AND IPL.IsDischargeDate = 1) -- patient has discharged and Post folloup checked 			AND (IPL.IsHomeVisitScheduled = 0 OR (EnrollmentStatus > 0 AND IPL.IsHospitalEHRDocumentation = 0) OR EnrollmentStatus = 0) -- Home visit not scheduled or Enrollment set but EHR not checked OR Not enrolled 			--AND (@isAdmin = 1 OR TPA.Activity_Assigned_To IS NULL OR TPA.Activity_Assigned_To = @userId) -- if has admin or not assigned or assigned only 			AND (EnrollmentStatus <=1 -- not enrolled and accepted can be select 					OR (EnrollmentStatus = 2 AND IPL.IsHospitalEHRDocumentation = 0 AND TPA.Activity_Assigned_To IS NOT NULL) -- or Enrollment refused from discharge log with Assigned to is not null and EHR not checked 					OR (EnrollmentStatus = 3 AND IPL.IsHospitalEHRDocumentation = 0 AND TPA.Activity_Assigned_To IS NOT NULL) 					OR (EnrollmentStatus = 6 AND IPL.IsHospitalEHRDocumentation = 0 AND TPA.Activity_Assigned_To IS NOT NULL) 					OR (EnrollmentStatus = 8 AND IPL.IsHospitalEHRDocumentation = 0 AND TPA.Activity_Assigned_To IS NOT NULL) 				) 			AND DATEDIFF(DAY, IPL.DischargeDate, GETDATE()) <= 15 --drop from Discharge log on day 15 past discharge date 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					case when @orderBy = 'DisplayEnrollmentStatus' and @orderDir = 'asc' then DisplayEnrollmentStatus end, 					case when @orderBy = 'DisplayEnrollmentStatus' and @orderDir = 'desc' then DisplayEnrollmentStatus end desc, 					case when @orderBy = 'AttemptNumber' and @orderDir = 'asc' then AttemptNumber end, 					case when @orderBy = 'AttemptNumber' and @orderDir = 'desc' then AttemptNumber end desc, 					case when @orderBy = 'AdmissionDate' and @orderDir = 'asc' then AdmissionDate end, 					case when @orderBy = 'AdmissionDate' and @orderDir = 'desc' then AdmissionDate end desc, 					case when @orderBy = 'EstimatedDischargeDate' and @orderDir = 'asc' then EstimatedDischargeDate end, 					case when @orderBy = 'EstimatedDischargeDate' and @orderDir = 'desc' then EstimatedDischargeDate end desc, 					case when @orderBy = 'ActivityAssignedToName' and @orderDir = 'asc' then ActivityAssignedToName end, 					case when @orderBy = 'ActivityAssignedToName' and @orderDir = 'desc' then ActivityAssignedToName end desc, 					case when @orderBy = 'DispalyActivityStatus' and @orderDir = 'asc' then DispalyActivityStatus end, 					case when @orderBy = 'DispalyActivityStatus' and @orderDir = 'desc' then DispalyActivityStatus end desc, 					case when @orderBy = 'CallBackDate' and @orderDir = 'asc' then CallBackDate end, 					case when @orderBy = 'CallBackDate' and @orderDir = 'desc' then CallBackDate end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC USP_GetAllDischargeLog 3,21,'',99,'PatientFullName','desc',0,10"
dbo,USP_Update_MAC_MAD_MAH_Score," Create procedure USP_Update_MAC_MAD_MAH_Score AS BEGIN 	 	--Updating all existing patient below score from imported file record. 	Update Mst_Patient SET  		MACScore=Round((Convert(float, MP.MAC_PDC_2021)*100),2),  		MADScore=Round((Convert(float, MP.MAD_PDC_2021)*100),2), 		MAHScore=Round((Convert(float, MP.MAH_PDC_2021)*100),2) 	FROM Mst_Patient P INNER JOIN Salutem_Temp.DBO.Member_Import MP  	ON P.Patient_MRN = MP.Member_MBI 	SELECT @@ROWCOUNT RowUpdateCount  	INSERT INTO TrnPatientPDCHistoryLog (PatientId,MACScore,MADScore,MAHScore,CreatedOn) 	SELECT P.Patient_ID,P.MACScore,P.MADScore,P.MAHScore,GETDATE() FROM Mst_Patient P 	INNER JOIN Salutem_Temp.DBO.Member_Import MP  	ON P.Patient_MRN = MP.Member_MBI END  --EXEC USP_Update_MAC_MAD_MAH_Score"
dbo,USP_GetAllDRG," CREATE procedure USP_GetAllDRG ( 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'DRGNumber',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	With DRGResult AS	( 	SELECT 		DR.ID, 		DR.DRGNumber, 		DR.DRGTitle, 		DR.MDC, 		DR.TYPE, 		EN.Discription AS TypeName, 		DR.Weights, 		DR.GeometricMeanLOS, 		DR.ArithmeticMeanLOS, 		DR.UpdatedOn 	FROM Mst_DRG DR 	LEFT JOIN Mst_Enum EN ON DR.TYPE = EN.EnumValue AND EN.EnumType = 'DRGType' 	WHERE DR.Status = 1 	AND ( @search = '' OR (DRGNumber LIKE '%' + @search + '%' OR DRGTitle LIKE '%' + @search + '%')) 	), 	OrderByResult AS (SELECT *, ROW_NUMBER() over (order BY  							case when @orderBy = 'DRGNumber' and @orderDir = 'asc' then DRGNumber end, 							case when @orderBy = 'DRGTitle' and @orderDir = 'desc' then DRGTitle end desc 		) AS RowNumber FROM DRGResult  	)  	SELECT *, (Select Count(ID) FROM DRGResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  END  --exec USP_GetAllDRG 'test','DRGNumber','asc',"
dbo,USP_Update_Patient_NextRefillDueDate," Create procedure USP_Update_Patient_NextRefillDueDate (@Patient_ID INT) AS  BEGIN 	DECLARE @RowCount INT = 0; 	--Updating Patient's Refill Next Date in Mst_Patient table. 	--It should be next minimum date from active medicine and whose Next Refill date in future. 	Update Mst_Patient SET ReFillDueDate = (Select Min(Refill_Next_Date) Refill_Next_Date  		From Trn_Patient_Med_Dosage WHERE Patient_ID = @Patient_ID AND Refill_Next_Date > GETDATE()  			AND ISNULL(Patient_Dosage_Prescribed_Status, 1) = 1 --Getting next minimum date from active medicine only. 	 ) FROM Mst_Patient WHERE Patient_ID= @Patient_ID  	 	SELECT @RowCount = @@ROWCOUNT 	SELECT @RowCount END -- Exec USP_Update_Patient_NextRefillDueDate 28 "
dbo,USP_GetAllEvents," Create procedure USP_GetAllEvents ( 	@Patient_ID int, 	@AppointmentId int, 	@StartDate DateTime, 	@EndDate DateTime ) AS BEGIN 	Select  		TPA.ID, 		PatientAppointmentTypeID, 		MAT.AppointmentType, 		Patient_ID, 		Prescriber_ID, 		MP.PrescriberFirstName, 		MP.PrescriberLastName, 		AppointmentDate, 		AppointmentTime, 		Notes, 		DidPatientVisit, 		ServiceType, 		StartDate, 		EndDate, 		StartTime, 		EndTime, 		AppointmentTypeID  	From Trn_Patient_Appointment TPA  	INNER JOIN Mst_PatientAppointmentType MAT ON TPA.PatientAppointmentTypeID = MAT.ID 	INNER JOIN Mst_Prescriber MP ON TPA.Prescriber_ID = MP.Id 	WHERE (@AppointmentId = 0 OR TPA.ID = @AppointmentId)  		AND (@Patient_ID = 0 OR TPA.Patient_ID = @Patient_ID)  		AND TPA.StartDate >= @StartDate 		AND TPA.EndDate >= @EndDate 		AND TPA.IsDeleted = 0  END"
dbo,USP_UpdateAssignToFromNoContactEnrollmentQueue," CREATE procedure USP_UpdateAssignToFromNoContactEnrollmentQueue ( 	@PatientID int, 	@EnrollmentId int, 	@AttemptNumber int, 	@AssignTo int ) AS BEGIN 	DECLARE @PatientActivityID int; 	DECLARE @ActivityStartStatus int; 	;WITH MyCte AS  	( 		SELECT Patient_Activity_ID,Activity_Start_Status, 		RowNum = row_number() OVER ( order by Patient_Activity_ID ) 		FROM Trn_Patient_Activity  		WHERE Patient_ID = @PatientID AND Activity_ID = 1 AND Patient_Enroll_ID = @EnrollmentId 	) 	SELECT @PatientActivityID = Patient_Activity_ID,@ActivityStartStatus=Activity_Start_Status 	FROM    MyCte 	WHERE   RowNum = @AttemptNumber 	 	IF(@PatientActivityID IS NOT NULL) 	BEGIN 		IF (@ActivityStartStatus = 3 AND @AttemptNumber >= 3) 		BEGIN 			-- create next attempt and assign to given user 			--INSERT INTO Trn_Patient_Activity(Patient_ID,Activity_ID,Activity_Type_ID,Activity_Start_Date,Activity_Start_Time,Activity_Assigned_To, 			--Activity_Start_Status,Activity_CretaedAt,Activity_CreatedBy,Patient_Enroll_ID) 			--VALUES(@PatientID,1,1,GETDATE(),'00:00:00.0000000',@AssignTo,1,GETDATE(),21,@EnrollmentId)  			-- Create Attempt record 			-- IF @AssignTo = 0 then insert null, due to having forign key relation on AssignTo field. 			DECLARE @nextAttempt int = @AttemptNumber + 1; 			IF(@AssignTo = 0) 			BEGIN 				INSERT INTO Trn_Enrollment_Attempt(EnrollmentId,AttemptNumber,AttemptStatus,AssignedUserId,AttemptDate) 				VALUES(@EnrollmentId,@nextAttempt,0,NULL,GETDATE())  				SELECT 'OutMessage' = 'Activity unassigned successfully.'; 			END 			ELSE 			BEGIN 				INSERT INTO Trn_Enrollment_Attempt(EnrollmentId,AttemptNumber,AttemptStatus,AssignedUserId,AttemptDate) 				VALUES(@EnrollmentId,@nextAttempt,0,@AssignTo,GETDATE())  				SELECT 'OutMessage' = 'Activity assigned successfully.'; 			END 		END 		ELSE IF (@ActivityStartStatus IN (1,2) AND @AttemptNumber >= 4 AND @AssignTo > 0) 		BEGIN; 			-- Update Trn_Patient_Activity 			UPDATE Trn_Patient_Activity SET Activity_Assigned_To = @AssignTo, Activity_Start_Status = 1 WHERE Patient_Activity_ID = @PatientActivityID  			-- Update Trn_Enrollment_Attempt 			UPDATE Trn_Enrollment_Attempt SET AssignedUserId = @AssignTo, AttemptStatus = 0 WHERE EnrollmentId = @EnrollmentId AND AttemptNumber = @AttemptNumber 			 			SELECT 'OutMessage' = 'Activity assigned successfully.'; 		END 		ELSE IF (@ActivityStartStatus IN (1,2) AND @AttemptNumber >= 4 AND @AssignTo = 0) 		BEGIN 			-- Update Trn_Patient_Activity 			UPDATE Trn_Patient_Activity SET Activity_Assigned_To = NULL, Activity_Start_Status = 1 WHERE Patient_Activity_ID = @PatientActivityID  			---- Update Trn_Enrollment_Attempt 			UPDATE Trn_Enrollment_Attempt SET AssignedUserId = NULL, AttemptStatus = 0 WHERE EnrollmentId = @EnrollmentId AND AttemptNumber = @AttemptNumber 			 			SELECT 'OutMessage' = 'Activity unassigned successfully.'; 		END 	END	 	ELSE IF(@PatientActivityID IS NULL) 	BEGIN 		IF(@AttemptNumber >= 3 AND @PatientID IS NOT NULL AND @EnrollmentId IS NOT NULL AND @AssignTo > 0) 		BEGIN 			UPDATE Trn_Enrollment_Attempt SET AssignedUserId = @AssignTo, AttemptStatus = 0 WHERE EnrollmentId = @EnrollmentId AND AttemptNumber = @AttemptNumber 			SELECT 'OutMessage' = 'Activity assigned successfully.'; 		END 		ELSE IF(@AttemptNumber >= 3 AND @PatientID IS NOT NULL AND @EnrollmentId IS NOT NULL AND @AssignTo =0) 		BEGIN 			UPDATE Trn_Enrollment_Attempt SET AssignedUserId = NULL, AttemptStatus = 0 WHERE EnrollmentId = @EnrollmentId AND AttemptNumber = @AttemptNumber 			SELECT 'OutMessage' = 'Activity unassigned successfully.'; 		END 	END 	ELSE 	BEGIN 		SELECT 'OutMessage' = 'Activity not found.'; 	END END --@PatientID int, --	@EnrollmentId int, --	@AttemptNumber int, --	@AssignTo int --EXEC USP_UpdateAssignToFromNoContactEnrollmentQueue 23960,15834,9,0"
dbo,USP_GetAllHomeVisitLog," CREATE PROCEDURE USP_GetAllHomeVisitLog ( 	@userId int, 	@AccountId INT, 	@ActivityNumber INT, 	@search nvarchar(50) = '', 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	--DECLARE @currentYear int = YEAR(GETDATE()); 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	WITH Result AS ( 		Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		P.Patient_First_Name, 		P.Patient_Last_Name, 		P.Patient_First_Name + ' '+ P.Patient_Last_Name  AS PatientFullName, 		P.Patient_DOB, 		P.Patient_MRN, 		patientContact.Patient_Contact_Phone, 		IPL.InPatientLogId, 		IPL.DischargeDate, 		TPA.IsHospitalEHRDocumentation, 		IPL.NotesBy, 		IPL.Notes, 		IPL.NotesDate, 		IPL.IsReferral, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time, TPA.Activity_Start_Date ) AS Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		TPA.Activity_Actual_End_Time, 		TPA.Activity_Assigned_To, 		(CASE WHEN MU.User_ID IS NOT NULL THEN MU.User_First_Name + ' ' + MU.User_Last_Name ELSE '' END) AS Activity_Assigned_To_Name, 		TPA.Activity_Note, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		enum.Discription AS DisplayActivityStartStatus, 		TPA.Activity_Delay_Note, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID, 		PAA.AttemptNumber AS AttemptNumber, 		--PAA.AttemptStatus, 		TPA.LastAttemptDate, 		TPA.LastCallOutcomeName, 		ActivityOutcomeName 	From Trn_InPatientLog IPL with (nolock) 	INNER JOIN Trn_Patient_Activity TPA with (nolock) ON TPA.Patient_ID = IPL.Patient_ID AND TPA.InPatientLogId = IPL.InPatientLogId AND IPL.IsHomeVisitScheduled = 1  		AND IPL.IsHospitalEHRDocumentation = 1 AND TPA.Activity_Assigned_To IS NOT NULL  	INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID AND MA.ActivityType = 'HomeVisit' --AND MA.ActivityNumber = @ActivityNumber 	INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.Patient_Status = 1 AND P.Account_ID = @AccountId 	INNER JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN Mst_Enum enum ON Coalesce(TPA.Activity_Start_Status, 1) = enum.EnumValue AND enum.EnumType ='ActivityStatus' --AND Coalesce(TPA.Activity_Start_Status, 1) NOT IN (5,6,11) 	LEFT JOIN View_PatientActivityAttempt PAA ON PAA.Patient_Activity_ID = TPA.Patient_Activity_ID 	LEFT JOIN  			dbo.Trn_Patient_Contact patientContact with (nolock) ON P.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  	LEFT JOIN Trn_Activity_Attempt TAA with (nolock) ON TPA.Patient_Activity_ID = TAA.Patient_Activity_ID AND TAA.AttemptNumber = PAA.AttemptNumber 	LEFT JOIN Mst_User MU with (nolock) ON MU.User_ID = TPA.Activity_Assigned_To 		WHERE ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 				OR Patient_MRN LIKE '%' + @search + '%' 				OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 			AND (TPA.IsHospitalEHRDocumentation = 0 OR Coalesce(TPA.Activity_Start_Status, 1) IN (1,2)) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					case when @orderBy = 'AttemptNumber' and @orderDir = 'asc' then AttemptNumber end, 					case when @orderBy = 'AttemptNumber' and @orderDir = 'desc' then AttemptNumber end desc, 					case when @orderBy = 'ActivityAssignedToName' and @orderDir = 'asc' then Activity_Assigned_To_Name end, 					case when @orderBy = 'ActivityAssignedToName' and @orderDir = 'desc' then Activity_Assigned_To_Name end desc, 					case when @orderBy = 'DischargeDate' and @orderDir = 'asc' then DischargeDate end, 					case when @orderBy = 'DischargeDate' and @orderDir = 'desc' then DischargeDate end desc, 					case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 					case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc, 					case when @orderBy = 'Activity_Start_Status' and @orderDir = 'asc' then DisplayActivityStartStatus end, 					case when @orderBy = 'Activity_Start_Status' and @orderDir = 'desc' then DisplayActivityStartStatus end desc, 					case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'asc' then Activity_Assigned_To_Name end, 					case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'desc' then Activity_Assigned_To_Name end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC USP_GetAllHomeVisitLog 3,21,1,'','PatientFullName','desc',0,10"
dbo,USP_UpdateCurrentYearEnrollmentIdsToPatient," CREATE PROCEDURE USP_UpdateCurrentYearEnrollmentIdsToPatient AS BEGIN 	SET NOCOUNT ON; 	UPDATE Mst_Patient SET PatientEnrollmentId = ISNULL(PE.Patient_Enroll_ID, 0) 	FROM Mst_Patient P LEFT JOIN Trn_Patient_Enrollment PE ON P.Patient_ID = PE.Patient_ID  		AND ( 				PE.Patient_Enrollment_Status = 0  				OR UploadedYear = YEAR(GETDATE())  				OR  YEAR(PE.EnrollmentDate)=YEAR(GETDATE()) 			) 	WHERE P.Account_ID IN (SELECT Account_ID FROM Mst_Account WHERE AccountType = 1) 	SELECT @@ROWCOUNT RowUpdateCount END  -- EXEC USP_UpdateCurrentYearEnrollmentIdsToPatient"
dbo,USP_GetAllInPatientsLog," CREATE PROCEDURE USP_GetAllInPatientsLog ( 	@userId int, 	@AccountId INT, 	@search nvarchar(50) = '',  	@EnrollmentStatus int = 0, -- zero will indicate not enrolled, 99 will indicate all enrollment status 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	--DECLARE @currentYear int = YEAR(GETDATE()); 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	DECLARE @EnrollMstActivityID int; 	SET @EnrollMstActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'EnrollPatient');  	WITH Result AS ( 		SELECT  			patient.Patient_ID, 			patient.Account_ID, 			patient.Patient_First_Name, 			patient.Patient_Last_Name, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS PatientFullName, 			patient.Patient_DOB, 			patient.Patient_MRN, 			IPL.InPatientLogId, 			IPL.AdmissionDate, 			IPL.EstimatedDischargeDate, 			IPL.UnitNumber, 			IPL.RoomNumber, 			IPL.EnrollmentStatus, 			enm.Discription AS DisplayEnrollmentStatus, 			IPL.PostDischargeFolloUpNeeded, 			IPL.IsDischargeSummary, 			IPL.IsDischargeDate, 			IPL.IsHospitalEHRDocumentation, 			IPL.IsHomeVisitScheduled, 			IPL.IsReferral, 			IPL.NotesBy, 			IPL.Notes, 			IPL.NotesDate, 			TPA.Patient_Activity_ID, 			TPA.Activity_Assigned_To, 			usr.User_First_Name + ' ' + usr.User_Last_Name AS ActivityAssignedToName, 			TPA.CallBackDate, 			TPA.Activity_Start_Status, 			enmm.Discription AS DispalyActivityStatus, 			TPA.AttemptNumber, 			patientContact.Patient_Contact_Phone, 			patient.HomeVisitType, 			MAT.Activity_Type_Name 		FROM Trn_InPatientLog IPL with (nolock) 		INNER JOIN dbo.Mst_Patient patient with (nolock) ON patient.Patient_ID = IPL.Patient_ID AND patient.Account_ID = @AccountId	AND Coalesce(IPL.DischargeLocation, 0) <=1 		INNER JOIN Mst_Enum enm ON enm.EnumValue = IPL.EnrollmentStatus AND enm.EnumType = 'EnrollmentStatus' 		LEFT JOIN dbo.Trn_Patient_Contact patientContact with (nolock) ON patient.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  		LEFT JOIN Trn_Patient_Activity TPA ON TPA.Patient_ID = IPL.Patient_ID AND TPA.InPatientLogId = IPL.InPatientLogId AND TPA.Activity_ID = @EnrollMstActivityID 		LEFT JOIN Mst_Enum enmm ON enmm.EnumValue = TPA.Activity_Start_Status AND enmm.EnumType = 'ActivityStatus' 		LEFT JOIN Mst_User usr with (nolock) ON usr.User_ID = TPA.Activity_Assigned_To 		LEFT JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = patient.HomeVisitType 		WHERE ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 				OR Patient_MRN LIKE '%' + @search + '%' 				OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 			AND (@EnrollmentStatus = 99 OR IPL.EnrollmentStatus = @EnrollmentStatus) 			AND patient.Patient_Status = 1 			AND ((IPL.IsDischargeDate = 0 AND IsDischargeSummary = 0) -- Patient not discharge 					OR (IPL.IsDischargeDate = 1 AND IsDischargeSummary = 1 AND IPL.PostDischargeFolloUpNeeded = 0  						AND ( IPL.IsHospitalEHRDocumentation = 0 OR IPL.IsHomeVisitScheduled = 0)) -- Patient discharge but Post discharge follup not checked or EHR or Home visit not scheduled 					OR (EnrollmentStatus = 2 AND IPL.IsHospitalEHRDocumentation = 0) 					OR (EnrollmentStatus = 3 AND IPL.IsHospitalEHRDocumentation = 0) -- or ineligible but EHR not checked 					OR (EnrollmentStatus = 8 AND IPL.IsHospitalEHRDocumentation = 0) -- Retracted but EHR not checked 				) 			AND (EnrollmentStatus <=1 -- not enrolled and accepted can be select  					OR (EnrollmentStatus = 2 AND IPL.IsHospitalEHRDocumentation = 0) -- or Enrollment refused but EHR not checked 					OR (EnrollmentStatus = 6 AND ((IPL.IsDischargeDate = 0 AND IsDischargeSummary = 0 OR IPL.PostDischargeFolloUpNeeded = 0))) -- or Enrollment status is No Contact and patient not discharged or Post Discharged folloup needed not checked 					OR (EnrollmentStatus = 2 AND IPL.IsHospitalEHRDocumentation = 0 AND TPA.Activity_Assigned_To IS NOT NULL) -- or Enrollment refused from discharge log with Assigned to is not null and EHR not checked 					OR (EnrollmentStatus = 3 AND IPL.IsHospitalEHRDocumentation = 0 AND TPA.Activity_Assigned_To IS NOT NULL) -- or ineligible but EHR not checked 					OR (EnrollmentStatus = 8 AND IPL.IsHospitalEHRDocumentation = 0 AND TPA.Activity_Assigned_To IS NOT NULL) -- Retracted but EHR not checked 				) 			--AND (@isAdmin = 1 OR TPA.Activity_Assigned_To IS NULL OR TPA.Activity_Assigned_To = @userId) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					case when @orderBy = 'DisplayEnrollmentStatus' and @orderDir = 'asc' then DisplayEnrollmentStatus end, 					case when @orderBy = 'DisplayEnrollmentStatus' and @orderDir = 'desc' then DisplayEnrollmentStatus end desc, 					case when @orderBy = 'AttemptNumber' and @orderDir = 'asc' then AttemptNumber end, 					case when @orderBy = 'AttemptNumber' and @orderDir = 'desc' then AttemptNumber end desc, 					case when @orderBy = 'AdmissionDate' and @orderDir = 'asc' then AdmissionDate end, 					case when @orderBy = 'AdmissionDate' and @orderDir = 'desc' then AdmissionDate end desc, 					case when @orderBy = 'EstimatedDischargeDate' and @orderDir = 'asc' then EstimatedDischargeDate end, 					case when @orderBy = 'EstimatedDischargeDate' and @orderDir = 'desc' then EstimatedDischargeDate end desc, 					case when @orderBy = 'ActivityAssignedToName' and @orderDir = 'asc' then ActivityAssignedToName end, 					case when @orderBy = 'ActivityAssignedToName' and @orderDir = 'desc' then ActivityAssignedToName end desc, 					case when @orderBy = 'DispalyActivityStatus' and @orderDir = 'asc' then DispalyActivityStatus end, 					case when @orderBy = 'DispalyActivityStatus' and @orderDir = 'desc' then DispalyActivityStatus end desc, 					case when @orderBy = 'CallBackDate' and @orderDir = 'asc' then CallBackDate end, 					case when @orderBy = 'CallBackDate' and @orderDir = 'desc' then CallBackDate end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC USP_GetAllInPatientsLog 3,21,'',99,'PatientFullName','desc',0,10"
dbo,USP_UpdatePatientRegistry," CREATE procedure USP_UpdatePatientRegistry ( 	@UserID INT = 3, 	@PatientActivityID INT, 	@WeekNumber INT =10 ) AS BEGIN 	SET NOCOUNT ON;  	DECLARE @PatientID INT = 0 ; 	DECLARE @FlaggedComment varchar(500) = NULL; 	DECLARE @Flagged BIT = NULL; 	DECLARE @GNFlaggedComment varchar(500) = NULL; 	DECLARE @GNFlagged BIT = NULL;  	SELECT * INTO #TempTable FROM ( 			SELECT P.Patient_ID, Patient_First_Name, Patient_Last_Name, Patient_DOB 				,Ph.PhysicianName AS ReferringProviderName 				,Pr.PracticeName 				,DXT.Dx 				,DateOfService 				,Coalesce(Activity_Actual_End_Time, Activity_Actual_Start_Time) AS ActivityDate 				,Patient_Activity_ID PatientActivityID 				--,PHQScore.Score AS LatestPHQScore 				--,GADScore.Score AS LatestGADScore 				,(SELECT TOP 1 Score FROM funcGetPatientPHQorGADScore(P.Patient_ID, PA.Patient_Activity_ID, 1, 1)) LatestPHQScore 				,(SELECT TOP 1 Score FROM funcGetPatientPHQorGADScore(P.Patient_ID, PA.Patient_Activity_ID, 1, 2)) LatestGADScore 				,PA.HasFlagForReview 				,PA.ReviewNote 				,ALog.CliniciansName 			FROM Mst_Patient P 			INNER JOIN Trn_Patient_Activity PA ON P.Patient_ID = PA.Patient_ID AND PA.Patient_Activity_ID = @PatientActivityID 			LEFT JOIN Mst_Physician Ph ON Ph.ID = P.ReferringProviderId  			LEFT JOIN Mst_Practice Pr on Pr.ID = P.PatientPracticeId 			LEFT JOIN TrnPatientAssessmentLog ALog ON ALog.PatientActivityID = PA.Patient_Activity_ID  			CROSS APPLY funcGetDXCodeByPatientId(P.Patient_ID) DXT 			--CROSS APPLY funcGetPatientPHQorGADScore(P.Patient_ID, PA.Patient_Activity_ID, 1, 1) PHQScore 			--CROSS APPLY funcGetPatientPHQorGADScore(P.Patient_ID, PA.Patient_Activity_ID, 1, 2) GADScore 	) A; 	 	SELECT @PatientID = Patient_ID FROM #TempTable; 	IF @PatientID > 0  	BEGIN 		IF EXISTS (SELECT * FROM TrnPatientRegistry WHERE PatientID = @PatientID) 		BEGIN 			DECLARE @LastActivityDate DateTime = (SELECT Coalesce(LastActivityDate, GETDATE()) FROM TrnPatientRegistry WHERE PatientID = @PatientID) 			DECLARE @NoOfWeek INT = (SELECT DATEDIFF(wk,CAST(@LastActivityDate AS DATETIME),GETDATE()))	 			IF @NoOfWeek >= @WeekNumber 			BEGIN 				SET @FlaggedComment = 'Flagged this Patient because of Patient is Participating after '+ CONVERT(varchar(4), @NoOfWeek)+ ' number of weeks.'; 				SET @Flagged = 1; 			END 			ELSE 			BEGIN 				SET @FlaggedComment = NULL; 				SET @Flagged = NULL; 			END  			UPDATE TrnPatientRegistry  				SET ClinicianName = T.CliniciansName,  				ReferringProviderName=T.ReferringProviderName,  				PracticeName = T.PracticeName, 				Diagnosis = T.Dx, 				PHQ9LastServiceDate=T.ActivityDate, 				PHQ9LastScore = T.LatestPHQScore, 				GAD7LastServiceDate = T.ActivityDate, 				GAD7LastScore = T.LatestGADScore, 				PatientActivityID = T.PatientActivityID, 				IsFlagged= Coalesce(@Flagged, T.HasFlagForReview), 				FlagComment = Coalesce(@FlaggedComment, T.ReviewNote), 				UpdatedBy = @UserID, 				UpdatedOn = GETDATE(), 				IsReviewed = 0, 				ReviewedNote = null, 				LastActivityDate= GETDATE() 			FROM TrnPatientRegistry R INNER JOIN #TempTable T ON R.PatientID = T.Patient_ID  			--PRINT 'Record Found: '+  Convert(varchar(50), @Cursor_PatientID) 		END 		ELSE BEGIN  			INSERT INTO TrnPatientRegistry (PatientID, ClinicianName,ReferringProviderName,PracticeName,Diagnosis,ServiceStartDate,PHQ9FirstServiceDate,PHQ9FirstScore,GAD7FirstServiceDate,GAD7FirstScore,PatientActivityID,IsFlagged,FlagComment,UpdatedBy, UpdatedOn,LastActivityDate) 			SELECT T.Patient_ID, T.CliniciansName,ReferringProviderName,PracticeName,T.Dx,T.DateOfService,T.ActivityDate, T.LatestPHQScore,T.ActivityDate,T.LatestGADScore,T.PatientActivityID,T.HasFlagForReview,T.ReviewNote,@UserID,GETUTCDATE(),GETDATE() 			FROM #TempTable T  			--PRINT 'Record not found: '+ Convert(varchar(50), @Cursor_PatientID) 		END 	END 	ELSE  	BEGIN  		--This is for Group note activity. Since group note activity dont have score above #TempTable (result of Table A will fail) mapping will fail. 		--So here we have create or update Patient registry without score. 		SELECT * INTO #TempActivityTable FROM (  			SELECT P.Patient_ID, Patient_First_Name, Patient_Last_Name, Patient_DOB 				,Ph.PhysicianName AS ReferringProviderName 				,Pr.PracticeName 				,DXT.Dx 				,DateOfService 				,Coalesce(Activity_Actual_End_Time, Activity_Actual_Start_Time) AS ActivityDate 				,Patient_Activity_ID PatientActivityID 				,PA.HasFlagForReview 				,PA.ReviewNote 				,ALog.CliniciansName 			FROM Mst_Patient P 			INNER JOIN Trn_Patient_Activity PA ON P.Patient_ID = PA.Patient_ID AND PA.Patient_Activity_ID = @PatientActivityID 			LEFT JOIN Mst_Physician Ph ON Ph.ID = P.ReferringProviderId  			LEFT JOIN Mst_Practice Pr on Pr.ID = P.PatientPracticeId 			LEFT JOIN TrnPatientAssessmentLog ALog ON ALog.PatientActivityID = PA.Patient_Activity_ID  			CROSS APPLY funcGetDXCodeByPatientId(P.Patient_ID) DXT 		) B 		 		SELECT @PatientID = Patient_ID FROM #TempActivityTable; 		IF @PatientID > 0  		BEGIN 			IF EXISTS (SELECT * FROM TrnPatientRegistry WHERE PatientID = @PatientID) 			BEGIN 				DECLARE @GNLastActivityDate DateTime = (SELECT Coalesce(LastActivityDate, GETDATE()) FROM TrnPatientRegistry WHERE PatientID = @PatientID) 				DECLARE @GNNoOfWeek INT = (SELECT DATEDIFF(wk,CAST(@GNLastActivityDate AS DATETIME),GETDATE())) 				IF @GNNoOfWeek >= @WeekNumber 				BEGIN 					SET @GNFlaggedComment = 'Flagged this Patient because of Patient is Participating after '+ CONVERT(varchar(4), @GNNoOfWeek)+ ' number of weeks.'; 					SET @GNFlagged = 1; 				END 				ELSE 				BEGIN 					SET @GNFlaggedComment = NULL; 					SET @GNFlagged = NULL; 				END 				UPDATE TrnPatientRegistry  					SET ClinicianName = T.CliniciansName,  					ReferringProviderName=T.ReferringProviderName,  					PracticeName = T.PracticeName, 					Diagnosis = T.Dx, 					PatientActivityID = T.PatientActivityID, 					IsFlagged= Coalesce(@GNFlagged, T.HasFlagForReview), 					FlagComment = Coalesce(@GNFlaggedComment, T.ReviewNote), 					UpdatedBy = @UserID, 					UpdatedOn = GETDATE(), 					IsReviewed = 0, 					ReviewedNote = null, 					LastActivityDate= GETDATE() 				FROM TrnPatientRegistry R INNER JOIN #TempActivityTable T ON R.PatientID = T.Patient_ID  			END 			ELSE BEGIN  				INSERT INTO TrnPatientRegistry (PatientID, ClinicianName,ReferringProviderName,PracticeName,Diagnosis,ServiceStartDate,PatientActivityID,IsFlagged,FlagComment,UpdatedBy, UpdatedOn,LastActivityDate) 				SELECT T.Patient_ID, T.CliniciansName,ReferringProviderName,PracticeName,T.Dx,T.DateOfService,T.PatientActivityID,T.HasFlagForReview,T.ReviewNote,@UserID,GETUTCDATE(),GETDATE() 				FROM #TempActivityTable T  			END 		END 		DROP TABLE #TempActivityTable  	END 	DROP TABLE #TempTable; END  -- EXEC USP_UpdatePatientRegistry 13, 3229,10"
dbo,USP_GetAllInsurance," create procedure USP_GetAllInsurance  AS BEGIN 	SELECT  		MI.ID, 		MI.Insurance, 		MI.IsDeleted, 		MI.CreatedOn, 		MI.CreatedBy, 		MI.UpdatedOn, 		MI.UpdatedBy, 		MI.InsuranceType, 		ME.EnumName As InsuranceTypeName, 		MI.StateID, 		ST.StateName 	FROM Mst_Insurance MI 	LEFT JOIN Mst_Enum ME ON MI.InsuranceType = ME.EnumValue AND ME.EnumType='InsuranceType' 	LEFT JOIN Mst_State ST ON MI.StateID = ST.ID END  --EXEC USP_GetAllInsurance"
dbo,USP_UpdatePatientRegistrySessionSummary," CREATE procedure USP_UpdatePatientRegistrySessionSummary ( 	@PatientID INT, 	@PatientActivityId INT, 	@MonthOfService DATE, 	@PracticeId INT, 	@PracticeBillingType INT, 	@MindHealthyFee DECIMAL ) AS BEGIN 	SET NOCOUNT ON;   	DECLARE	@LastMonthYearSeen DATETIME; 	DECLARE @MinutesOfThisMonth INT; 	DECLARE @RecentAttendanceName VARCHAR(250); 	DECLARE @BillableCPTCodes VARCHAR(250); 	DECLARE @CPTCode VARCHAR(50); 	DECLARE @AddOnCPTCode VARCHAR(50); 	DECLARE @SecondAddOnCPTCode VARCHAR(50);  	DECLARE @ActivityType VARCHAR(250); 	SELECT @ActivityType = MA.ActivityType FROM Trn_Patient_Activity PA INNER JOIN Mst_Activity MA ON PA.Activity_ID=MA.Activity_ID AND Patient_Activity_ID = @PatientActivityId;  	--Getting spent Minutes of current month billable session 	SELECT  @MinutesOfThisMonth = ISNULL(SUM(SpentDuration),0)  	FROM TrnPatientBillingDetail BD 	INNER JOIN TrnBillingProfile TBP ON TBP.PatientID = BD.PatientID AND TBP.PatientID = @PatientID 	AND TBP.MonthOfService = BD.MonthOfService 	AND BD.IsDeleted = 0 	AND BD.MonthOfService = @MonthOfService; 		 	SET @LastMonthYearSeen =  (SELECT top 1 MonthOfService FROM TrnBillingProfile WHERE PatientID = @PatientID AND MonthOfService < @MonthOfService ORDER BY MonthOfService DESC); 	 	SELECT @RecentAttendanceName = MAE.Discription FROM Mst_Patient P  	INNER JOIN MstAssessmentEnum MAE ON P.Attendance = MAE.EnumValue AND MAE.EnumType = 'Attendance';  	--SELECT @CPTCode = BillingCPTCode, @BillableCPTCodes = CONCAT_WS(', ',BillingCPTCode,AddOnCPTCode,SecondAddOnCode) FROM TrnBillingProfile WHERE PatientID = @PatientID AND MonthOfService = @MonthOfService; 	SELECT @CPTCode = BillingCPTCode, 		@AddOnCPTCode = AddOnCPTCode, 		@SecondAddOnCPTCode = SecondAddOnCode, 		@BillableCPTCodes = COALESCE(BillingCPTCode + ', ', '') + 			COALESCE(AddOnCPTCode + ', ', '') + 			COALESCE(SecondAddOnCode, '') 	FROM TrnBillingProfile 	WHERE PatientID = @PatientID AND MonthOfService = @MonthOfService;  	UPDATE TrnPatientRegistry  		SET PracticeId = @PracticeId,  		PracticeBillingType=@PracticeBillingType,  		MindHealthyFee = @MindHealthyFee, 		MinutesOfThisMonth = @MinutesOfThisMonth, 		LastMonthYearSeen = @LastMonthYearSeen, 		RecentAttendanceName = @RecentAttendanceName, 		BillableCPTCodes = @BillableCPTCodes, 		TotalSessionCount = ISNULL(TotalSessionCount, 0) + 1, 		MinutesToNextCode = (Select dbo.funcGetMinutestoNextCode(@CPTCode, @AddOnCPTCode, @SecondAddOnCPTCode, @MinutesOfThisMonth, @PatientID)) 	FROM TrnPatientRegistry R WHERE R.PatientID=@PatientID;  	IF @ActivityType = 'InitialAssessment' 	BEGIN  		UPDATE TrnPatientRegistry SET IALastDate = GETUTCDATE() FROM TrnPatientRegistry R WHERE R.PatientID=@PatientID; 	END 	ELSE IF @ActivityType = 'ProgressNote' 	BEGIN  		UPDATE TrnPatientRegistry SET PNLastDate = GETUTCDATE() FROM TrnPatientRegistry R WHERE R.PatientID=@PatientID; 	END 	ELSE IF @ActivityType = 'GroupNote' 	BEGIN  		UPDATE TrnPatientRegistry SET GNLastDate = GETUTCDATE() FROM TrnPatientRegistry R WHERE R.PatientID=@PatientID; 	END 	ELSE IF @ActivityType = 'ClinicalCareScreening' 	BEGIN  		UPDATE TrnPatientRegistry SET CCSLastDate = GETUTCDATE() FROM TrnPatientRegistry R WHERE R.PatientID=@PatientID; 	END  	SELECT ID,PatientID,TotalSessionCount,CCSLastDate,IALastDate,PNLastDate,GNLastDate,MindHealthyFee,MinutesOfThisMonth,BillableCPTCodes FROM TrnPatientRegistry WHERE PatientID = @PatientID; END -- EXEC USP_UpdatePatientRegistrySessionSummary 66604,5583,'2023-08-31', 1,1,12.00"
dbo,USP_GetAllMedicineList," --EXEC USP_GetAllMedicineList '','NDC', 'asc',0,10 Create procedure [dbo].[USP_GetAllMedicineList] (	 	@search nvarchar(50) = '',	 	@orderBy nvarchar(50) = 'Med_Name',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	WITH Result AS ( 		SELECT NDC.NDC,NDC.ProductName,NDC.PRODUCTNDC,NDC.Med_ID,NDC.Strength_ID,M.Med_Name,S.Med_Strength,NDC.DOSAGEFORMNAME,NDC.ROUTENAME,NDC.SUBSTANCENAME FROM Mst_MedNDC NDC 		INNER JOIN Mst_Medicine M ON NDC.Med_ID=M.Med_ID 		INNER JOIN Mst_Med_Strength S ON NDC.Strength_ID=S.ID 		WHERE @search = '' OR (M.Med_Name LIKE '%' + @search + '%' 		OR NDC.PRODUCTNDC LIKE '%' + @search + '%' 		OR NDC.NDC LIKE '%' + @search + '%') 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Med_Name' and @orderDir = 'asc' then Med_Name end, 								case when @orderBy = 'Med_Name' and @orderDir = 'desc' then Med_Name end desc 			) AS RowNumber FROM Result  	)  	SELECT *, (Select Count(Med_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) END"
dbo,USP_GetAllPatients_Hospital," Create procedure [dbo].[USP_GetAllPatients_Hospital] ( 	@userId int, 	@AccountId INT, 	@search nvarchar(50) = '',  	@EnrollmentStatus int = 0, -- zero will indicate not enrolled, 99 will indicate all enrollment status 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	WITH Result AS ( 		SELECT  			patient.Patient_ID, 			patient.Account_ID, 			patient.Patient_First_Name, 			patient.Patient_Last_Name, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS PatientFullName, 			patient.Patient_DOB, 			patientContact.Patient_Contact_Phone, 			Coalesce(patient.Patient_Status, 0) Patient_Status, 			Coalesce(TPI.EnrollmentStatus,0) AS Patient_Enrollment_Status, 			patient.Patient_MRN, 			Patient_Gender 		FROM dbo.Mst_Patient patient with (nolock) 		 		LEFT JOIN  			dbo.Trn_Patient_Contact patientContact with (nolock) ON patient.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  		LEFT JOIN 			dbo.Trn_InPatientLog TPI with (nolock) ON TPI.Patient_ID = patient.Patient_ID AND TPI.InPatientLogId = patient.InPatientLogId 		WHERE patient.Account_ID = @AccountId  AND ( (Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 			OR Patient_MRN LIKE '%' + @search + '%' 			OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%')  			AND (@EnrollmentStatus = 99 OR ISNULL(TPI.EnrollmentStatus, 0) = @EnrollmentStatus) 			AND (@isAdmin = 1 OR patient.Patient_Status = 1) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end desc, 					 								case when @orderBy = 'Patient_DOB' and @orderDir = 'asc' then Patient_DOB end, 								case when @orderBy = 'Patient_DOB' and @orderDir = 'desc' then Patient_DOB end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc,  								case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'asc' then Patient_Enrollment_Status end, 								case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'desc' then Patient_Enrollment_Status end desc,  								case when @orderBy = 'Patient_Contact_Phone' and @orderDir = 'asc' then Patient_Contact_Phone end, 								case when @orderBy = 'Patient_Contact_Phone' and @orderDir = 'desc' then Patient_Contact_Phone end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE --OrderByResult.RowNumber BETWEEN ((@pageIndex * @pageSize) + 1) AND ((@pageIndex + 1) * @pageSize) 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END"
dbo,USP_GetAllPatientOutreachList," --EXEC USP_GetAllPatientOutreachList 31,0,0,null,null,null,'' CREATE procedure USP_GetAllPatientOutreachList  ( 	@AccountId INT, 	@PracticeID INT=0, 	@PatientStatus INT=0, 	@LastCallOutcomeName varchar(500)=null, 	@FromDate Datetime=null, 	@ToDate Datetime=null, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'DisplayReferralDate',  	@orderDir varchar(4) = 'desc',  	@StartFrom int = 0,   	@pageSize int = 99999 ) AS BEGIN 	DECLARE @toDateUpEndOfTheDay DATETIME; 	IF @ToDate IS NOT NULL 	BEGIN 		SELECT @toDateUpEndOfTheDay = DATEADD(DAY, 1, @ToDate); 	END 	DECLARE @CallCount int; 	 WITH Result AS ( 	SELECT   		P.Patient_ID, 		P.Patient_First_Name + ' ' + P.Patient_Last_Name AS PatientFullName, 	    P.Patient_MRN, 		P.Patient_DOB, 		P.Patient_Gender, 		P.ReferralDate, 		P.ReferringProviderId,		 		P.TypeOfReferral, 		fp.LastCallDate, 		fp.LastCallOutcomeName, 		fp.LastOutreachby, 		P.AttemptCount as AttemptCount, 		P.Mobile, 		P.PatientStatusId, 		MPS.StatusName AS DispalyPatientStatus, 		ME.Discription AS DisplayTypeOfReferral, 		Ph.PhysicianName AS ReferringProviderName, 		MP.PracticeName 	FROM Mst_Patient P 	 	INNER JOIN MstPatientStatuses MPS ON MPS.StatusID = P.PatientStatusId 	INNER JOIN Mst_Physician Ph ON P.ReferringProviderId = Ph.ID 	INNER JOIN Mst_Enum ME ON ME.EnumValue = P.TypeOfReferral AND ME.EnumType='TypeOfReferral' 	OUTER apply dbo.funcGetPatientCommunicationDetails(P.Patient_ID,'Call') fp 	LEFT JOIN Mst_Practice MP ON P.PatientPracticeId = MP.ID 	WHERE P.Account_ID = @AccountId   	AND  MPS.StatusName IN ('Attempting to Enroll','New Referral','Intake Pending','Reschedule intake','Check Contact Information') 	AND(@fromDate IS NULL OR P.ReferralDate >= @fromDate) 	AND (@ToDate IS NULL OR P.ReferralDate < @toDateUpEndOfTheDay) 	AND  ((P.Patient_First_Name + ' ' + P.Patient_Last_Name) LIKE '%' + @search + '%' 			OR (P.Patient_Last_Name + ' ' + P.Patient_First_Name) LIKE '%' + @search + '%' 			OR P.Patient_MRN LIKE '%' + @search + '%' 			OR P.Mobile LIKE '%' + @search + '%') 	AND (@PracticeID = 0 OR P.PatientPracticeId = @PracticeID) 	AND (@PatientStatus = 0 OR P.PatientStatusId = @PatientStatus) 	AND (@LastCallOutcomeName IS NULL OR fp.LastCallOutcomeName LIKE '%'+ @LastCallOutcomeName +'%') 			),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'DisplayReferralDate' and @orderDir = 'asc' then ReferralDate end, 								case when @orderBy = 'DisplayReferralDate' and @orderDir = 'desc' then ReferralDate end desc, 								case when @orderBy = 'PracticeName' and @orderDir = 'asc' then PracticeName end, 								case when @orderBy = 'PracticeName' and @orderDir = 'desc' then PracticeName end desc 			 	 			) AS RowNumber FROM Result  	) 	 	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE  OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 	 	 END  --exec [dbo].[USP_GetAllPatientOutreachList] @AccountId=22,@search=N'',@orderBy=N'DisplayReferralDate',@orderDir='desc',@StartFrom=0,@pageSize=10"
dbo,USP_GetAllPatientRescheduleList," CREATE procedure USP_GetAllPatientRescheduleList  ( 	@AccountId INT, 	@search nvarchar(50) = '', 	@BCMID INT=0, 	@PatientStatus INT=0, 	@LastCallOutcomeName varchar(500)=null, 	@FromDate Datetime=null, 	@ToDate Datetime=null, 	@orderBy nvarchar(50) = 'DisplayEncounterDate',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,   	@pageSize int = 99999 ) AS BEGIN 	DECLARE @toDateUpEndOfTheDay DATETIME; 	IF @ToDate IS NOT NULL 	BEGIN 		SELECT @toDateUpEndOfTheDay = DATEADD(DAY, 1, @ToDate); 	END  	DECLARE @CallCount int; 	WITH PatientLastActivityDates AS ( 		SELECT  			P.Patient_ID, 			P.Patient_First_Name, 			P.Patient_Last_Name, 		    P.Patient_MRN, 			P.Patient_DOB, 			P.Patient_Gender, 			P.PatientStatusId, 			P.Mobile, 			Max(PA.Activity_Actual_End_Time) AS LastActivityDate, 			P.RescheduleAttemptCount, 			MP.PracticeName 		FROM Trn_Patient_Activity PA  		INNER JOIN Mst_Activity MA ON MA.Activity_ID = PA.Activity_ID AND MA.ActivityType IN ('InitialAssessment','ProgressNote','GroupNote') 		INNER JOIN Mst_Patient P ON P.Patient_ID = PA.Patient_ID AND P.Account_ID = @AccountId  		LEFT JOIN Mst_Practice MP ON P.PatientPracticeId = MP.ID 		WHERE PA.Activity_Start_Status = 3 		GROUP BY 	P.Patient_ID, 			P.Patient_First_Name, 			P.Patient_Last_Name, 		    P.Patient_MRN, 			P.Patient_DOB, 			P.Patient_Gender, 			P.PatientStatusId, 			P.Mobile, 			P.RescheduleAttemptCount, 			MP.PracticeName 	), 	Result AS ( 		SELECT  			 			PLA.Patient_ID, 			PLA.Patient_First_Name + ' ' + PLA.Patient_Last_Name AS PatientFullName, 		    PLA.Patient_MRN, 			PLA.Patient_DOB, 			PLA.Patient_Gender, 			PLA.PatientStatusId, 			MU.User_First_Name + ' ' + MU.User_Last_Name AS LastEncounterBCMName, 			FA.EncounterDate, 			fp.LastCallDate, 			fp.LastOutreachby as Activity_Assigned_To, 			fp.LastCallOutcomeName, 			PLA.Mobile, 			MPS.StatusName, 			PLA.RescheduleAttemptCount, 			PLA.PracticeName 		From PatientLastActivityDates PLA  		CROSS APPLY dbo.funcEncounterInformationDetails(PLA.Patient_ID, PLA.LastActivityDate) FA 		OUTER apply dbo.funcGetPatientCommunicationDetails(PLA.Patient_ID,'Call') fp 		INNER JOIN Mst_User MU ON MU.User_ID = FA.Activity_Assigned_To 		INNER JOIN MstPatientStatuses MPS ON MPS.StatusID = PLA.PatientStatusId	 		WHERE  		--MPS.EnumStatusName NOT IN ('Ineligible','Declined') 		MPS.EnumStatusName IN ('Enrolled','EnrolledNotResponding') 		AND FA.Attendance IN (2,5) -- NoCallNoShow, Cancelled 		AND(@fromDate IS NULL OR FA.EncounterDate >= @fromDate) 		AND (@ToDate IS NULL OR FA.EncounterDate < @toDateUpEndOfTheDay) 		AND ((PLA.Patient_First_Name + ' ' + PLA.Patient_Last_Name) LIKE '%' + @search + '%' 				OR (PLA.Patient_Last_Name + ' ' + PLA.Patient_First_Name) LIKE '%' + @search + '%' 				OR PLA.Patient_MRN LIKE '%' + @search + '%' 				OR PLA.Mobile LIKE '%' + @search + '%')  		AND (@BCMID = 0 OR FA.Activity_Assigned_To = @BCMID) 		AND (@PatientStatus = 0 OR PLA.PatientStatusId = @PatientStatus) 		AND (@LastCallOutcomeName IS NULL OR fp.LastCallOutcomeName LIKE '%'+ @LastCallOutcomeName +'%') 	), 	OrderByResult AS (SELECT *, 				ROW_NUMBER() over ( 				order BY case when @orderBy = 'DisplayEncounterDate' and @orderDir = 'asc' then EncounterDate end, 									case when @orderBy = 'DisplayEncounterDate' and @orderDir = 'desc' then EncounterDate end desc 				 		 				) AS RowNumber FROM Result  	) 	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE  OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 	 	 END  /* exec [dbo].[USP_GetAllPatientRescheduleList] @AccountId=22,@search=N'',@orderBy=N'EncounterDate',@orderDir='desc',@StartFrom=0,@pageSize=10 */  "
dbo,USP_GetAllPharmacyConsultQueue," CREATE PROCEDURE USP_GetAllPharmacyConsultQueue ( 	@userId int, 	@AccountId INT, 	@search nvarchar(50) = '', 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	--DECLARE @currentYear int = YEAR(GETDATE()); 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	WITH Result AS ( 		Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		P.Patient_First_Name, 		P.Patient_Last_Name, 		P.Patient_First_Name + ' '+ P.Patient_Last_Name  AS PatientFullName, 		P.Patient_DOB, 		P.Patient_MRN, 		patientContact.Patient_Contact_Phone, 		IPL.InPatientLogId, 		IPL.DischargeDate, 		IPL.NotesBy, 		IPL.Notes, 		IPL.NotesDate, 		IPL.IsReferral, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time, TPA.Activity_Start_Date ) AS Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		enum.Discription AS DisplayActivityStartStatus, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID, 		TPA.AttemptNumber AS AttemptNumber 	From Trn_InPatientLog IPL with (nolock) 	INNER JOIN Trn_Patient_Activity TPA ON TPA.Patient_ID = IPL.Patient_ID AND TPA.InPatientLogId = IPL.InPatientLogId AND IPL.IsHomeVisitScheduled = 1 AND TPA.Activity_Assigned_To IS NULL 	INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID AND MA.ActivityType = 'PharmacistConsultation' 	INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.Patient_Status = 1 AND P.Account_ID = @AccountId 	INNER JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN Mst_Enum enum ON Coalesce(TPA.Activity_Start_Status, 1) = enum.EnumValue AND enum.EnumType ='ActivityStatus' --AND Coalesce(TPA.Activity_Start_Status, 1) NOT IN (5,6,11) 	LEFT JOIN  			dbo.Trn_Patient_Contact patientContact with (nolock) ON P.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1 		WHERE ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 				OR Patient_MRN LIKE '%' + @search + '%' 				OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 			AND (Coalesce(TPA.Activity_Start_Status, 1) IN (1,2)) 			--AND (TPA.IsHospitalEHRDocumentation = 0 OR Coalesce(TPA.Activity_Start_Status, 1) IN (1,2)) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					case when @orderBy = 'DischargeDate' and @orderDir = 'asc' then DischargeDate end, 					case when @orderBy = 'DischargeDate' and @orderDir = 'desc' then DischargeDate end desc, 					case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 					case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC USP_GetAllPharmacyConsultQueue 3,21,'','PatientFullName','desc',0,10"
dbo,USP_GetAllReadmissionCheckLog," CREATE PROCEDURE USP_GetAllReadmissionCheckLog ( 	@userId int, 	@AccountId INT, 	@search nvarchar(50) = '', 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	--DECLARE @currentYear int = YEAR(GETDATE()); 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	WITH Result AS ( 		Select  		IPL.Patient_ID, 		P.Patient_First_Name, 		P.Patient_Last_Name, 		P.Patient_First_Name + ' '+ P.Patient_Last_Name  AS PatientFullName, 		P.Patient_DOB, 		P.Patient_MRN, 		patientContact.Patient_Contact_Phone, 		IPL.InPatientLogId, 		IPL.DischargeDate, 		IPL.EpisodeId, 		VFHV.Discription AS FistHomeVisitStatus, 		VSHV.Discription AS SecondHomeVisitStatus, 		VPC.Discription AS PharmacyConsultStatus, 		IPL.ProgramCompletion, 		VTHV.Discription AS ThirdHomeVisitStatus 	From Trn_InPatientLog IPL with (nolock) 	INNER JOIN Mst_Patient P ON P.Patient_ID = IPL.Patient_ID AND P.Patient_Status = 1 AND P.Account_ID = @AccountId 	LEFT JOIN View_HWF_PatientFirstHomeVisitStatus VFHV ON VFHV.Patient_ID = IPL.Patient_ID AND VFHV.InPatientLogId = IPL.InPatientLogId 	LEFT JOIN View_HWF_PatientSecondHomeVisitStatus VSHV ON VSHV.Patient_ID = IPL.Patient_ID AND VSHV.InPatientLogId = IPL.InPatientLogId 	LEFT JOIN View_HWF_PharmacyConsultActivityStatus VPC ON VPC.Patient_ID = IPL.Patient_ID AND VPC.InPatientLogId = IPL.InPatientLogId 	LEFT JOIN dbo.Trn_Patient_Contact patientContact with (nolock) ON P.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  	LEFT JOIN View_HWF_PatientThirdHomeVisitStatus VTHV ON VSHV.Patient_ID = IPL.Patient_ID AND VTHV.InPatientLogId = IPL.InPatientLogId 	 	WHERE ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 				OR Patient_MRN LIKE '%' + @search + '%' 				OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 			AND IPL.DischargeDate IS NOT NULL 			AND IPL.EnrollmentStatus = 1 -- Accepted 			AND DATEDIFF(day, IPL.DischargeDate, GETDATE()) >= 30 			AND (IPL.ProgramCompletion IS NULL OR (IPL.ProgramCompletion IS NULL AND IPL.ReadmissionDate IS NOT NULL)) 			 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					case when @orderBy = 'DischargeDate' and @orderDir = 'asc' then DischargeDate end, 					case when @orderBy = 'DischargeDate' and @orderDir = 'desc' then DischargeDate end desc, 					case when @orderBy = 'FistHomeVisitStatus' and @orderDir = 'asc' then FistHomeVisitStatus end, 					case when @orderBy = 'FistHomeVisitStatus' and @orderDir = 'desc' then FistHomeVisitStatus end desc, 					case when @orderBy = 'SecondHomeVisitStatus' and @orderDir = 'asc' then SecondHomeVisitStatus end, 					case when @orderBy = 'SecondHomeVisitStatus' and @orderDir = 'desc' then SecondHomeVisitStatus end desc 				) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC USP_GetAllReadmissionCheckLog 3,21,'','PatientFullName','desc',0,10"
dbo,USP_GetAllReferralLog," Create procedure [dbo].[USP_GetAllReferralLog] ( 	@userId int, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'Referral_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	WITH Result AS ( 		SELECT RPL.Referral_ID, 				RPL.Patient_ID, 				enum.Discription AS IncomingType, 				RPL.ReferralDate,  				RPL.ReferralTime, 				PRAC.PracticeName, 				RPL.AssignTo, 				usr.User_First_Name + ' ' + usr.User_Last_Name AS AssignUserName, 				RPL.ReferralStatus, 				enums.Discription AS ReferralStatusName, 				RPL.FileName, 				RPL.LongFileName 		FROM ReferralPatientLog RPL 		INNER JOIN Mst_Enum enum ON RPL.ReferralType = enum.EnumValue AND EnumType = 'ReferralIncomingType' 		LEFT JOIN Mst_Practice PRAC ON RPL.PatientPractice = PRAC.ID 		LEFT JOIN Mst_User usr ON RPL.AssignTo = usr.User_ID 		LEFT JOIN Mst_Enum enums ON RPL.ReferralStatus = enums.EnumValue AND enums.EnumType = 'ReferralStatus' 		WHERE RPL.IsPatientRegistered = 0 			AND ( (RPL.PatientFirstName + ' ' + RPL.PatientLastName)  LIKE '%' + @search + '%' 			OR RPL.FaxNumber LIKE '%' + @search + '%' 			OR RPL.PrimaryContactNumber LIKE '%' + @search + '%' 			OR RPL.PrimaryContactEmail LIKE '%' + @search + '%' 			OR @search = '')  			AND (@isAdmin = 1 OR RPL.AssignTo = @userId OR RPL.AssignTo IS NULL)   	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'IncomingType' and @orderDir = 'asc' then IncomingType end, 								case when @orderBy = 'IncomingType' and @orderDir = 'desc' then IncomingType end desc, 								case when @orderBy = 'PracticeName' and @orderDir = 'asc' then PracticeName end, 								case when @orderBy = 'PracticeName' and @orderDir = 'desc' then PracticeName end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) END"
dbo,USP_GetAllSecondHomeVisitLogQueue," CREATE PROCEDURE USP_GetAllSecondHomeVisitLogQueue ( 	@userId int, 	@AccountId INT, 	@ActivityNumber INT, 	@search nvarchar(50) = '', 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	--DECLARE @currentYear int = YEAR(GETDATE()); 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	WITH Result AS ( 		Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		P.Patient_First_Name, 		P.Patient_Last_Name, 		P.Patient_First_Name + ' '+ P.Patient_Last_Name  AS PatientFullName, 		P.Patient_DOB, 		P.Patient_MRN, 		patientContact.Patient_Contact_Phone, 		IPL.InPatientLogId, 		IPL.DischargeDate, 		IPL.NotesBy, 		IPL.Notes, 		IPL.NotesDate, 		IPL.IsReferral, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time, TPA.Activity_Start_Date ) AS Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		enum.Discription AS DisplayActivityStartStatus, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID 	From Trn_InPatientLog IPL with (nolock) 	INNER JOIN Trn_Patient_Activity TPA ON TPA.Patient_ID = IPL.Patient_ID AND TPA.InPatientLogId = IPL.InPatientLogId AND IPL.IsHomeVisitScheduled = 1 AND IPL.IsHospitalEHRDocumentation = 1 AND TPA.Activity_Assigned_To IS NULL AND TPA.Activity_Start_Date <= GETDATE() 	INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID AND MA.ActivityType = 'HomeVisit' AND MA.ActivityNumber = @ActivityNumber 	INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.Patient_Status = 1 AND P.Account_ID = @AccountId 	INNER JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN Mst_Enum enum ON Coalesce(TPA.Activity_Start_Status, 1) = enum.EnumValue AND enum.EnumType ='ActivityStatus' --AND Coalesce(TPA.Activity_Start_Status, 1) NOT IN (5,6,11) 	LEFT JOIN  			dbo.Trn_Patient_Contact patientContact with (nolock) ON P.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1 		WHERE ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 				OR Patient_MRN LIKE '%' + @search + '%' 				OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 			AND (TPA.IsHospitalEHRDocumentation = 0 OR Coalesce(TPA.Activity_Start_Status, 1) IN (1,2)) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					case when @orderBy = 'DischargeDate' and @orderDir = 'asc' then DischargeDate end, 					case when @orderBy = 'DischargeDate' and @orderDir = 'desc' then DischargeDate end desc, 					case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 					case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc 					 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC USP_GetAllSecondHomeVisitLogQueue 3,19,2,'','PatientFullName','desc',0,10"
dbo,USP_GetAllTimeZone," Create Procedure [dbo].[USP_GetAllTimeZone]  AS BEGIN 	SELECT  		Id, 		Country, 		CountryCode, 		UTC +' '+ Timezone AS TimeZoneWithUTC, 		[Description] 	FROM Mst_TimeZone M END "
dbo,USP_GetAssessmentEnumByType," Create procedure [dbo].[USP_GetAssessmentEnumByType] ( 	@Type varchar(250) ) AS BEGIN 	SELECT ID, EnumType, SequenceNumber, Discription, EnumValue,HasReason,HasOtherText,OtherTextLable FROM MstAssessmentEnum  	WHERE EnumType = @Type 	ORDER BY SequenceNumber END  -- exec USP_GetAssessmentEnumByType 'ConsentToProgramReason'"
dbo,USP_GetAssessmentPatientMasterDetails," create procedure [dbo].[USP_GetAssessmentPatientMasterDetails] ( 	@Patient_ID int  ) AS BEGIN 	SELECT P.Patient_ID 		,P.Account_ID 		,P.Patient_First_Name 		,P.Patient_Middle_Name 		,P.Patient_Last_Name 		,P.Patient_DOB 		,P.Mobile 		,P.Email 		,MP.PracticeName 		,MPHY.PhysicianName AS ReferringPhysicianName 		,P.PreferredName 		,P.CurrentLocation 		,P.CurrentLocationAddress 		,P.AssessmentID 		,p.PatientStatusDate 		,p.PatientStatusId 		,p.PatientStatusOtherText 		,p.PatientStatusReasonId 		,p.PatientStatusReasonOptionId 		,p.PatientStatusReasonOptionOtherText 		,p.MHInsuranceId 		,p.MHInsuranceName 		,p.PrimaryGuardianName 		,p.Patient_Gender 		,p.GenderIdentity 		,p.PreferredPronouns 	FROM Mst_Patient P 	LEFT JOIN Mst_Practice MP ON MP.ID = P.PatientPracticeId 	LEFT JOIN Mst_Physician MPHY ON MPHY.ID = P.ReferringProviderId 	WHERE P.[Patient_ID] = @Patient_ID END  -- EXEC USP_GetAssessmentPatientMasterDetails 19275"
dbo,USP_GetAssessmentQuestionAnswerFor," Create PROCEDURE [dbo].[USP_GetAssessmentQuestionAnswerFor] 	@PatientID INT, 	@QuestionFor INT, 	@AssessmentID INT = 0, 	@QuestionSubType INT = 0, 	@AccountType INT = 0, 	@PatientActivityID int = 0 AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT QM.QuestionID,QuestionType,QuestionText,QuestionFor,QuestonSubType,QM.QuestionLinkID,QM.ClassInfo,QM.QuestionDescription, 		QO.ID OptionID,QO.OptionsFor,QO.OptionText,QO.OptionValue,QO.HasChildQuestion,QO.ChildQuestionLinkID,QO.AdditionalInfo,QO.AccountTypeId, 		QO.HasQuestionLink, QO.LinkQuestionIds,QO.HasTypeQuantityFrequency,		 		PQA.ID, 		COALESCE(PQA.PatientID, @PatientID) PatientID, 		PQA.AnswerText, 		(CASE WHEN QM.QuestionType = 6 OR QM.QuestionType = 7 OR QM.QuestionType = 8 OR QM.QuestionType = 9 -- When Question type is ShortAnswer or LongAnswer or NumberText or DateText then it should be display text as it is saved in answer table. 			THEN PQA.AnswerText  			ELSE (SELECT OptionText FROM Mst_QuestionOptions MQO WHERE MQO.OptionValue = PQA.AnswerText AND MQO.QuestionLinkID = QM.QuestionLinkID)  			END) DisplayAnswerText, 		PQA.AssessmentID, 		PQA.TypeText, 		PQA.QuantityText, 		PQA.FrequencyText, 		PQA.OtherComment, 		PQA.IsDeleted, 		QM.SequenceNumber 	FROM Mst_Questions QM  	INNER JOIN Mst_QuestionOptions QO ON QM.QuestionLinkID=QO.QuestionLinkID  	LEFT JOIN Trn_PatientQuestionAnswers PQA ON QM.QuestionID = PQA.QuestionID AND PQA.PatientID = @PatientID AND PQA.AssessmentID = @AssessmentID and PQA.IsDeleted=0 	WHERE QuestionFor = @QuestionFor AND (@AccountType = 0 OR QM.AccountTypeId = @AccountType) 	END 	ELSE 	BEGIN 		SELECT QM.QuestionID,QuestionType,QuestionText,QuestionFor,QuestonSubType,QM.QuestionLinkID,QM.ClassInfo,QM.QuestionDescription, 		QO.ID OptionID,QO.OptionsFor,QO.OptionText,QO.OptionValue,QO.HasChildQuestion,QO.ChildQuestionLinkID,QO.AdditionalInfo,QO.AccountTypeId, 		QO.HasQuestionLink, QO.LinkQuestionIds,QO.HasTypeQuantityFrequency,		 		PQA.ID, 		COALESCE(PQA.PatientID, @PatientID) PatientID, 		PQA.AnswerText, 		(CASE WHEN QM.QuestionType = 6 OR QM.QuestionType = 7 OR QM.QuestionType = 8 OR QM.QuestionType = 9 -- When Question type is ShortAnswer or LongAnswer or NumberText or DateText then it should be display text as it is saved in answer table. 			THEN PQA.AnswerText  			ELSE (SELECT OptionText FROM Mst_QuestionOptions MQO WHERE MQO.OptionValue = PQA.AnswerText AND MQO.QuestionLinkID = QM.QuestionLinkID)  			END) DisplayAnswerText, 		PQA.AssessmentID, 		PQA.TypeText, 		PQA.QuantityText, 		PQA.FrequencyText, 		PQA.OtherComment, 		PQA.IsDeleted, 		QM.SequenceNumber 	FROM Mst_Questions QM  	INNER JOIN Mst_QuestionOptions QO ON QM.QuestionLinkID=QO.QuestionLinkID  	LEFT JOIN Trn_PatientQuestionAnswersLog PQA ON QM.QuestionID = PQA.QuestionID AND PQA.PatientID = @PatientID AND PQA.AssessmentID = @AssessmentID and PQA.IsDeleted=0 AND PQA.PatientActivityID = @PatientActivityID 	WHERE QuestionFor = @QuestionFor AND (@AccountType = 0 OR QM.AccountTypeId = @AccountType) 	END END  -- EXEC USP_GetAssessmentQuestionAnswerFor 19200, 4"
dbo,func_GetActivityTypeByActivityId," CREATE FUNCTION func_GetActivityTypeByActivityId ( 	@ActivityId int )  returns Varchar(250) AS BEGIN 	 	DECLARE @ActivityType Varchar(250); 		 	SELECT @ActivityType = MA.ActivityType FROM Mst_Activity MA 		WHERE MA.Activity_ID = @ActivityId  	 	return @ActivityType; END  --Select dbo.func_GetActivityTypeByActivityId(10)"
dbo,USP_GetAssociatedActivitiesForMonth," Create procedure USP_GetAssociatedActivitiesForMonth  ( 	@PatientID int = 0, 	@MonthOfService date, 	@ActivityType varchar(250) ) AS BEGIN 	SET NOCOUNT ON 	BEGIN 		 		SELECT  			Patient_Activity_ID PatientActivityID, 			CAST(DateOfService AS DATE) AS DateOfService, 			CASE WHEN A.ActivityType IN ('Call','EnrollmentStatusNote','SignatureAttestation') THEN Coalesce(TPA.Activity_Actual_End_Time,TPA.Activity_Actual_Start_Time,TPA.Activity_Start_Date) ELSE TPAL.EncounterDate END AS EncounterDate, 			CASE WHEN A.ActivityType = 'Call' THEN 'PatientCommunication' ELSE A.ActivityType END AS ActivityType, 			U.User_First_Name+' '+U.User_Last_Name AS ActivityAssignedToName, 			TPAL.Attendance 			FROM Trn_Patient_Activity TPA 			INNER JOIN Mst_Activity A ON TPA.Activity_ID = A.Activity_ID 			INNER JOIN Mst_User U ON TPA.Activity_Assigned_To = U.User_ID 			LEFT JOIN TrnPatientAssessmentLog TPAL ON TPA.Patient_Activity_ID = TPAL.PatientActivityID 		WHERE Patient_ID = @PatientID 		AND Month(TPA.DateOfService) = Month(CAST(@MonthOfService AS DATE))  		AND Activity_Start_Status = 3 AND IsSubmited =1 		AND TPA.Activity_Status = 1 --AND TPA.SpentTimeInMinutes > 0 		order by PatientActivityID desc 	END END --EXEC USP_GetAssociatedActivitiesForMonth 22310, '03/15/2023','ClinicalCareScreening'     "
dbo,func_GetMasterActivityIdByTypeAndNumber," CREATE FUNCTION func_GetMasterActivityIdByTypeAndNumber ( 	@ActivityType VARCHAR(50), 	@ActivityNumber INT )  returns INT AS BEGIN 	 	DECLARE @Activity_ID int; 	 	SELECT @Activity_ID = Activity_ID  	FROM Mst_Activity MA WHERE MA.ActivityType = @ActivityType 		AND MA.ActivityNumber = @ActivityNumber  	IF @Activity_ID IS NULL 	BEGIN 		SET @Activity_ID = 0 	END 	return @Activity_ID; END  --SELECT DBO.func_GetMasterActivityIdByTypeAndNumber('HomeVisit',3)"
dbo,USP_GetAssociatedAllActivitiesForUser," Create procedure USP_GetAssociatedAllActivitiesForUser  ( 	@PatientID int = 0, 	@userId int, 	@SelectedAssociatedActivityID varchar(max)='' ) AS BEGIN 	SET NOCOUNT ON 	BEGIN		 		SELECT  		 			Patient_Activity_ID PatientActivityID, 			CAST(DateOfService AS DATE) AS DateOfService, 			CASE WHEN A.ActivityType IN ('Call','EnrollmentStatusNote') THEN Coalesce(TPA.Activity_Actual_End_Time,TPA.Activity_Actual_Start_Time,TPA.Activity_Start_Date) ELSE TPAL.EncounterDate END AS EncounterDate, 			CASE WHEN A.ActivityType = 'Call' THEN 'PatientCommunication' ELSE A.ActivityType END AS ActivityType, 			U.User_First_Name+' '+U.User_Last_Name AS ActivityAssignedToName 			FROM Trn_Patient_Activity TPA 			INNER JOIN Mst_Activity A ON TPA.Activity_ID = A.Activity_ID 			INNER JOIN Mst_User U ON TPA.Activity_Assigned_To = U.User_ID 			LEFT JOIN TrnPatientAssessmentLog TPAL ON TPA.Patient_Activity_ID = TPAL.PatientActivityID 		WHERE Patient_ID = @PatientID 		AND ((TPA.Activity_Assigned_To = @userId And @SelectedAssociatedActivityID = '' )OR @SelectedAssociatedActivityID!='') 		AND Activity_Start_Status = 3 		AND TPA.Activity_Status = 1 AND A.ActivityType not in ('SignatureAttestation') 		AND A.ActivityType IN ('ClinicalCareScreening','InitialAssessment','ProgressNote','GroupNote','PsychConsult') 		AND (@SelectedAssociatedActivityID = ''  					OR (TPA.Patient_Activity_ID in (SELECT * FROM dbo.func_Split(@SelectedAssociatedActivityID, ',')))) 		order by CAST(EncounterDate AS DATE) desc 		  	END END --EXEC USP_GetAssociatedAllActivitiesForUser 22310, '03/15/2023','ClinicalCareScreening'     "
dbo,func_GetPatientEnrollID," CREATE FUNCTION func_GetPatientEnrollID ( 	@PatientId int )  returns INT AS BEGIN 	 	Declare @currentYer int =(SElect Year(GetDate())); 	DECLARE @PatientEnrollID int; 		 	SELECT @PatientEnrollID = PE.Patient_Enroll_Id FROM Mst_Patient P 	LEFT JOIN  		Trn_Patient_Enrollment PE ON P.Patient_ID = PE.Patient_ID  		AND (PE.UploadedYear = @currentYer OR YEAR(PE.EnrollmentDate) = @currentYer) 	WHERE Coalesce(PE.Patient_Enrollment_Status, 0) IN (1,9,10,11,12) AND P.Patient_ID = @PatientId  	IF @PatientEnrollID IS NULL 	BEGIN 	SET @PatientEnrollID = 0 	END 	return @PatientEnrollID; END"
dbo,USP_GetAttendanceReport," Create procedure USP_GetAttendanceReport  ( 	@AccountID INT, 	@ToMonth DATETIME ) AS BEGIN DECLARE @FromDate DATETIME = DATEADD(month, DATEDIFF(month, 0, @ToMonth), 0); DECLARE @ToDate DATETIME = DATEADD(d, -1, DATEADD(m, DATEDIFF(m, 0, @ToMonth) + 1, 0)); 	SET NOCOUNT ON 	SELECT 		P.PatientPracticeId 		,PR.PracticeName 		,AL.Attendance 		,AE.Discription AttendanceName 		,AL.AttendanceOption 		,CASE WHEN AL.Attendance = 3 THEN (SELECT Discription FROM MstAssessmentEnum WHERE EnumType = 'RescheduledByPatient' AND EnumValue = AL.AttendanceOption) 		WHEN AL.Attendance = 4 THEN (SELECT Discription FROM MstAssessmentEnum WHERE EnumType = 'RescheduledByMindHealthy' AND EnumValue = AL.AttendanceOption) 		WHEN AL.Attendance = 5 THEN (SELECT Discription FROM MstAssessmentEnum WHERE EnumType = 'Cancelled' AND EnumValue = AL.AttendanceOption) 		WHEN AL.Attendance = 6 THEN (SELECT Discription FROM MstAssessmentEnum WHERE EnumType = 'IncompleteAssessment' AND EnumValue = AL.AttendanceOption) 		ELSE '' END AS AttendanceOptionName 		,AL.AttendanceOptionReason 		,CASE WHEN AL.Attendance = 5 AND AL.AttendanceOption != ''AND AL.AttendanceOption = 1 THEN (SELECT Discription FROM MstAssessmentEnum WHERE EnumType = 'CancelledByMindHealthy' AND EnumValue = AL.AttendanceOptionReason) 		WHEN AL.Attendance = 5 AND AL.AttendanceOption != ''AND AL.AttendanceOption = 2 THEN (SELECT Discription FROM MstAssessmentEnum WHERE EnumType = 'CancelledByPatient' AND EnumValue = AL.AttendanceOptionReason) 		ELSE '' END AS AttendanceOptionReasonName 		,Coalesce(TPA.Activity_Actual_End_Time,TPA.Activity_Actual_Start_Time,TPA.Activity_Start_Date) ActivityDate 		FROM TrnPatientAssessmentLog AL 		INNER JOIN Trn_Patient_Activity TPA ON AL.PatientActivityID = TPA.Patient_Activity_ID 		INNER JOIN Mst_Patient P ON AL.PatientID = P.Patient_ID 		INNER JOIN Mst_Practice PR ON P.PatientPracticeId = PR.ID 		INNER JOIN MstAssessmentEnum AE ON AL.Attendance = AE.EnumValue AND AE.EnumType = 'Attendance' 	WHERE P.Account_ID = @AccountID 	AND Coalesce(TPA.Activity_Actual_End_Time,TPA.Activity_Actual_Start_Time,TPA.Activity_Start_Date) >= @FromDate 	AND Coalesce(TPA.Activity_Actual_End_Time,TPA.Activity_Actual_Start_Time,TPA.Activity_Start_Date) <= @ToDate 	GROUP BY P.PatientPracticeId,PR.PracticeName,AL.Attendance,AL.AttendanceOption,AL.AttendanceOptionReason,AE.Discription 	,TPA.Activity_Actual_End_Time,TPA.Activity_Actual_Start_Time,TPA.Activity_Start_Date END  --EXEC USP_GetAttendanceReport 31,'03-18-2023'"
dbo,func_IsEnrollmentAndHomeVisitCompleted," CREATE FUNCTION func_IsEnrollmentAndHomeVisitCompleted ( 	@PatientId int )  returns INT AS BEGIN 	 	Declare @EnrollmentID INT = (SELECT DBO.func_GetPatientEnrollID(@PatientId)); 	Declare @HomeVisitActivityId INT = (SELECT DBO.func_IsHomeVisitComplete(@PatientId, 1, @EnrollmentID, 0)); 	Declare @IsComplete BIT = 0;  	IF @EnrollmentID > 0 AND @HomeVisitActivityId > 0 	BEGIN 		RETURN @EnrollmentID; 	END 	return 0; END  --Select DBO.func_IsEnrollmentAndHomeVisitCompleted(173)"
dbo,USP_GetBRReport," CREATE procedure USP_GetBRReport ( 	@AccountID INT, 	@fromDate DATETIME, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc', 	@Search NVARCHAR(MAX) = '', 	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	SET NOCOUNT ON 	DECLARE @GenericNoteActivityID int =(SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'GenericNote'); 	DECLARE @GenericNoteType int = (SELECT ID FROM Mst_Enum WHERE EnumType = 'GenericNoteType' AND EnumName = 'DocumentUpload'); 	DECLARE @GenericNoteTypePsyConsultReview int = (SELECT ID FROM Mst_Enum WHERE EnumType = 'GenericNoteType' AND EnumName = 'PsychiatricConsultantReview'); 	DECLARE @OpenCaseActivityID int =(SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'OpenCase') 	DECLARE @PsychConsultActivityID int =(SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'PsychConsult') 	--DECLARE @AccountID int= 22;  	CREATE TABLE #BillingActivityIDs( 		ActivityID int, 		ActivityType varchar(250) 	) 	-- Getting billing activity ID's 	INSERT INTO #BillingActivityIDs SELECT Activity_ID,ActivityType FROM Mst_Activity WHERE ActivityType IN ('InitialAssessment','ProgressNote','GroupNote','ClinicalCareScreening')  	CREATE TABLE #BillingActivityies( 		Patient_ID int, 		Patient_Activity_ID int, 		Activity_Assigned_To int, 		ActivityType varchar(250) 	); -- 	INSERT INTO #BillingActivityies  	SELECT TPA.Patient_ID,TPA.Patient_Activity_ID,TPA.Activity_Assigned_To, BA.ActivityType 	FROM Trn_Patient_Activity TPA  	INNER JOIN #BillingActivityIDs BA ON TPA.Activity_ID = BA.ActivityID 	WHERE MONTH(TPA.DateOfService) = MONTH(@fromDate) AND YEAR(TPA.DateOfService) = YEAR(@fromDate) 	AND TPA.IsSubmited = 1 AND TPA.IsBillable = 1 AND TPA.Activity_Status = 1  	CREATE TABLE #BRReportActivityList( 	PatientActivityID int, 	PatientID int, 	AssociatedPatientActivityID int, 	NoteType int, 	ActivityCount int );  	--Getting billing activities thoes are having generic note activity associated more than once 	-- OR generic note activity not associated 	-- (Make sure generic note type should be document uploaded) 	INSERT INTO #BRReportActivityList  	SELECT BA.Patient_Activity_ID,BA.Patient_ID, PAL.AssociatedPatientActivityID, PAL.NoteType, 		COUNT(BA.Patient_Activity_ID) ActivityCount 	FROM #BillingActivityies BA 	LEFT JOIN TrnPatientAssessmentLog PAL ON BA.Patient_Activity_ID = PAL.AssociatedPatientActivityID 	LEFT JOIN Trn_Patient_Activity TPA ON PAL.PatientActivityID = TPA.Patient_Activity_ID  WHERE (PAL.NoteType = @GenericNoteType OR PAL.NoteType IS NULL) AND (TPA.Activity_Status =1 OR TPA.Activity_Status IS NULL) GROUP BY BA.Patient_Activity_ID,BA.Patient_ID, PAL.AssociatedPatientActivityID, PAL.NoteType HAVING COUNT(BA.Patient_Activity_ID) > 1 OR PAL.AssociatedPatientActivityID  IS NULL  	INSERT INTO #BRReportActivityList 	SELECT BA.Patient_Activity_ID,BA.Patient_ID, PAL.AssociatedPatientActivityID, PAL.NoteType, 		COUNT(BA.Patient_Activity_ID) ActivityCount 	FROM #BillingActivityies BA 	LEFT JOIN TrnPatientAssessmentLog PAL ON BA.Patient_Activity_ID = PAL.AssociatedPatientActivityID  	AND PAL.NoteType = @GenericNoteTypePsyConsultReview 	LEFT JOIN Trn_Patient_Activity TPA ON PAL.PatientActivityID = TPA.Patient_Activity_ID  WHERE BA.ActivityType = 'InitialAssessment' AND (TPA.Activity_Status =1 OR TPA.Activity_Status IS NULL) GROUP BY BA.Patient_Activity_ID,BA.Patient_ID, PAL.AssociatedPatientActivityID, PAL.NoteType HAVING COUNT(BA.Patient_Activity_ID) > 1 OR PAL.AssociatedPatientActivityID  IS NULL   -----------------------START OF OPEN AND PSYCH COUNT QUERY BLOCK--------------------------------------------------------------------------------------------------------------------- 	CREATE TABLE #OpenCasePatient( PatientID int )  	INSERT INTO #OpenCasePatient SELECT DISTINCT P.Patient_ID FROM Mst_Patient P  INNER JOIN Trn_Patient_Activity TPA ON P.Patient_ID = TPA.Patient_ID AND p.Account_ID = @AccountID AND Patient_Status =1 WHERE Activity_ID IN (@OpenCaseActivityID,@PsychConsultActivityID)  AND MONTH(TPA.DateOfService) = MONTH(@fromDate) AND YEAR(TPA.DateOfService) = YEAR(@fromDate) AND IsSubmited =1 AND Activity_Status = 1 GROUP BY P.Patient_ID;  	CREATE Table #tblOpenCaseCount 	( 		PatientID int, 		OpenCaseCount int 	)  	CREATE Table #tblPsychConsultCount ( 	PatientID int, 	PsychConsultCount int )   	INSERT INTO #tblOpenCaseCount SELECT P.PatientID,Count(Patient_Activity_ID) OpenCaseCount FROM #OpenCasePatient P  INNER JOIN Trn_Patient_Activity TPA ON P.PatientID = TPA.Patient_ID  WHERE Activity_ID IN (@OpenCaseActivityID)  GROUP BY P.PatientID  	INSERT INTO #tblPsychConsultCount SELECT P.PatientID,Count(Patient_Activity_ID) PsychConsultCount FROM #OpenCasePatient P  INNER JOIN Trn_Patient_Activity TPA ON P.PatientID = TPA.Patient_ID  WHERE Activity_ID IN (@PsychConsultActivityID)  GROUP BY P.PatientID  	INSERT INTO #BRReportActivityList(PatientID)  	SELECT o.PatientID FROM #OpenCasePatient O 	LEFT JOIN #tblOpenCaseCount A ON O.PatientID =A.PatientID 	LEFT JOIN #tblPsychConsultCount B ON O.PatientID =B.PatientID 	WHERE Coalesce(A.OpenCaseCount,0) != Coalesce(B.PsychConsultCount,0)   	DROP TABLE #OpenCasePatient 	DROP TABLE #tblOpenCaseCount 	DROP TABLE #tblPsychConsultCount ---------------------------END OF OPEN AND PSYCH COUNT QUERY BLOCK-----------------------------------------------------------------------------------------------------  	CREATE TABLE #PatientDetails( 		PatientID int, 		PatientMRN nvarchar(250), 		PatientFullName nvarchar(500), 		PatientDOB date, 		PatientPracticeName nvarchar(500), 		PatientStatusName nvarchar(500), 		PatientActivityID int, 		ActivityName nvarchar(500), 		AssignToName nvarchar(500), 		DateOfService date 	);  	INSERT INTO #PatientDetails 	SELECT P.Patient_ID,P.Patient_MRN,P.Patient_First_Name + ' '+P.Patient_Last_Name PatientFullName 		,P.Patient_DOB, PR.PracticeName,PS.StatusName, AL.PatientActivityID 		,A.Activity_Name,U.User_First_Name +' ' + U.User_Last_Name AssignToName,TPA.DateOfService 	FROM #BRReportActivityList AL 	INNER JOIN Mst_Patient P ON AL.PatientID = P.Patient_ID 	LEFT JOIN Mst_Practice PR ON P.PatientPracticeId = PR.ID 	LEFT JOIN MstPatientStatuses PS ON P.PatientStatusId = PS.ID 	LEFT JOIN Trn_Patient_Activity TPA ON AL.PatientActivityID = TPA.Patient_Activity_ID 	LEFT JOIN Mst_Activity A ON TPA.Activity_ID = A.Activity_ID 	LEFT JOIN Mst_User U ON TPA.Activity_Assigned_To = U.User_ID  	SELECT PatientID,PatientMRN,PatientFullName,PatientDOB,PatientPracticeName,PatientStatusName 			,PatientActivityID,ActivityName,AssignToName,DateOfService 	FROM #PatientDetails  	DROP TABLE #BillingActivityIDs 	DROP TABLE #BillingActivityies 	DROP TABLE #BRReportActivityList 	DROP TABLE #PatientDetails END  --EXEC USP_GetBRReport 22,'01/01/2023'"
dbo,func_IsHomeVisitActvityExist," CREATE FUNCTION func_IsHomeVisitActvityExist ( 	@PatientId int )  returns INT AS BEGIN 	 	DECLARE @PatientActivityId int; 	 	SELECT @PatientActivityId = PA.Patient_Activity_ID  	FROM Trn_Patient_Activity PA  	INNER JOIN Mst_Activity MA ON PA.Activity_ID = MA.Activity_ID AND MA.ActivityType = 'HomeVisit' 		AND PA.Patient_ID = @PatientId  	IF @PatientActivityId IS NULL 	BEGIN 		SET @PatientActivityId = 0 	END 	return @PatientActivityId; END --SELECT DBO.func_IsHomeVisitActvityExist(8761)"
dbo,USP_GetDashboardReportDaily," Create procedure USP_GetDashboardReportDaily  ( 	@AccountID int, 	@MonthOfService date, 	@SubReportType int,-- 1=>DailyReferral, 2=> DailyPatientStatus 	@PracticeID int ) AS BEGIN 	SET NOCOUNT ON 	BEGIN 	--SELECT day,DayName,date,DirectCare,COCM,MAT,SelfPay,AttemptingToEnroll,Enrolled,EnrolledNotResponding,Declined, 	--Graduated,Ineligible,UnableToReach,NewReferral,IntakePending,RescheduleIntake,CheckContactInformation,Total FROM AddDateOfMonth 	IF (@SubReportType = 1) 	BEGIN 			CREATE TABLE #AddDateOfMonth 			( 				day int, 				date date, 				DayName varchar(250), 				CreatedOn date, 				DirectCare int, 				COCM int, 				MAT int, 				Self int, 				AttemptingToEnroll int, 				Enrolled int, 				EnrolledNotResponding int, 				Declined int, 				Graduated int, 				Ineligible int, 				UnableToReach int, 				NewReferral int, 				IntakePending int, 				RescheduleIntake int, 				CheckContactInformation int 			) 	 			DECLARE @date DATE = (SELECT DATEADD(month, DATEDIFF(month, 0, @MonthOfService), 0)) 	 			;WITH N(N)AS  			(SELECT 1 FROM(VALUES(1),(1),(1),(1),(1),(1))M(N)), 			dayDate(N)AS(SELECT ROW_NUMBER()OVER(ORDER BY N.N)FROM N,N a) 			 			INSERT INTO #AddDateOfMonth(day,date,DayName) 			SELECT top(day(EOMONTH(@date))) 			  N day 			  ,dateadd(d,N-1, @date) date, 			  FORMAT(dateadd(d,N-1, @date),'dddd') DayName 			FROM dayDate 	 			--SELECT * FROM #AddDateOfMonth AM 	 			;With Result AS 			( 				SELECT * FROM 				( 					SELECT E.Discription,P.TypeOfReferral,CONVERT(Date,P.ReferralDate) CreatedOn 					FROM Mst_Patient P	 					LEFT JOIN Mst_Enum E ON P.TypeOfReferral = E.EnumValue AND E.EnumType = 'TypeOfReferral' AND P.Account_ID = @AccountID 					WHERE MONTH(P.ReferralDate) = MONTH(@MonthOfService) AND Year(P.ReferralDate) = Year(@MonthOfService) 					AND (@PracticeID = 0 OR P.PatientPracticeId = @PracticeID) 					GROUP BY E.Discription,P.TypeOfReferral, P.ReferralDate,P.Patient_First_Name, P.Patient_Last_Name 				) t 				PIVOT( 					COUNT(TypeOfReferral) 					FOR Discription IN ( 					[Direct Care], 					[CoCM], 					[MAT], 					[Self-Pay] 					) 				) AS pivot_table 			) 			UPDATE ADM SET CreatedOn = R.CreatedOn, DirectCare=Coalesce(R.[Direct Care],0),COCM=Coalesce(R.CoCM,0) 			,MAT=Coalesce(R.MAT,0),Self=Coalesce(R.[Self-Pay],0) 			FROM #AddDateOfMonth ADM 			INNER JOIN Result R ON ADM.date = R.CreatedOn  				SELECT  					day, 					DayName, 					date, 					Coalesce(DirectCare,0) DirectCare, 					Coalesce(COCM,0) COCM, 					Coalesce(MAT,0) MAT, 					Coalesce(Self,0) SelfPay, 					AttemptingToEnroll, 					Enrolled, 					EnrolledNotResponding, 					Declined, 					Graduated, 					Ineligible, 					UnableToReach, 					NewReferral, 					IntakePending, 					RescheduleIntake, 					CheckContactInformation, 					isnull(DirectCare,0) + isnull(COCM,0) + isnull(MAT,0)+ isnull(Self,0) as Total 				FROM #AddDateOfMonth 			 			DROP TABLE #AddDateOfMonth 	END 	ELSE 	BEGIN 		CREATE TABLE #AddDateOfMonthS 			( 				day int, 				date date, 				DayName varchar(250), 				CreatedOn date, 				DirectCare int, 				COCM int, 				MAT int, 				SelfPay int, 				AttemptingToEnroll int, 				Enrolled int, 				EnrolledNotResponding int, 				Declined int, 				Graduated int, 				Ineligible int, 				UnableToReach int, 				NewReferral int, 				IntakePending int, 				RescheduleIntake int, 				CheckContactInformation int 			)  			DECLARE @dates DATE = (SELECT DATEADD(month, DATEDIFF(month, 0, @MonthOfService), 0)) 	 			;WITH N(N)AS  			(SELECT 1 FROM(VALUES(1),(1),(1),(1),(1),(1))M(N)), 			dayDate(N)AS(SELECT ROW_NUMBER()OVER(ORDER BY N.N)FROM N,N a) 			 			INSERT INTO #AddDateOfMonthS(day,date,DayName) 			SELECT top(day(EOMONTH(@dates))) 			  N day 			  ,dateadd(d,N-1, @dates) date, 			  FORMAT(dateadd(d,N-1, @dates),'dddd') DayName 			FROM dayDate  			;With Results AS 			( 				SELECT * FROM 				( 					SELECT E.EnumStatusName StatusName,PS.PatientStatusId,CONVERT(Date,PS.PatientStatusDate) CreatedOn 					FROM TrnPatientStatusLog PS 					INNER JOIN Mst_Patient P ON PS.PatientID = P.Patient_ID AND P.Account_ID = @AccountID 					LEFT JOIN MstPatientStatuses E ON PS.PatientStatusId = E.StatusID 					WHERE MONTH(PS.PatientStatusDate) = MONTH(@MonthOfService) AND Year(PS.PatientStatusDate) = Year(@MonthOfService) 					AND (@PracticeID = 0 OR P.PatientPracticeId = @PracticeID) 					GROUP BY E.EnumStatusName,PS.PatientStatusId, PS.PatientStatusDate,P.Patient_First_Name, P.Patient_Last_Name 				) t 				PIVOT( 					COUNT(PatientStatusId) 					FOR StatusName IN ( 					[AttemptingToEnroll], 					[Enrolled], 					[EnrolledNotResponding], 					[Declined], 					[Graduated], 					[Ineligible], 					[UnableToReach], 					[NewReferral], 					[IntakePending], 					[RescheduleIntake], 					[CheckContactInformation] 					) 				) AS pivot_table 			) 			UPDATE ADM SET CreatedOn = R.CreatedOn, AttemptingToEnroll=Coalesce(R.[AttemptingToEnroll],0), 			Enrolled=Coalesce(R.[Enrolled],0),EnrolledNotResponding=Coalesce(R.[EnrolledNotResponding],0), 			Declined=Coalesce(R.[Declined],0),Graduated=Coalesce(R.[Graduated],0),			 			Ineligible=Coalesce(R.[Ineligible],0),UnableToReach=Coalesce(R.[UnableToReach],0), 			NewReferral=Coalesce(R.[NewReferral],0),IntakePending=Coalesce(R.[IntakePending],0), 			RescheduleIntake=Coalesce(R.[RescheduleIntake],0),CheckContactInformation=Coalesce(R.[CheckContactInformation],0) 			FROM #AddDateOfMonthS ADM 			INNER JOIN Results R ON ADM.date = R.CreatedOn  			SELECT  					day, 					DayName, 					date, 					DirectCare, 					COCM, 					MAT, 					SelfPay, 					Coalesce(AttemptingToEnroll,0) AttemptingToEnroll, 					Coalesce(Enrolled,0) Enrolled, 					Coalesce(EnrolledNotResponding,0) EnrolledNotResponding, 					Coalesce(Declined,0) Declined, 					Coalesce(Graduated,0) Graduated, 					Coalesce(Ineligible,0) Ineligible, 					Coalesce(UnableToReach,0) UnableToReach, 					Coalesce(NewReferral,0) NewReferral, 					Coalesce(IntakePending,0) IntakePending, 					Coalesce(RescheduleIntake,0) RescheduleIntake, 					Coalesce(CheckContactInformation,0) CheckContactInformation, 					isnull(AttemptingToEnroll,0) + isnull(Enrolled,0) + isnull(EnrolledNotResponding,0)+ isnull(Declined,0) + 					isnull(Graduated,0) + isnull(Ineligible,0) + isnull(UnableToReach,0)+ isnull(NewReferral,0) + 					isnull(IntakePending,0) + isnull(RescheduleIntake,0) + isnull(CheckContactInformation,0) 					as Total 				FROM #AddDateOfMonthS 			 			DROP TABLE #AddDateOfMonthS 	END 	END END --EXEC USP_GetDashboardReportDaily 31,'2023-02-27',2,0 --CREATE TABLE AddDateOfMonth --			( --				day int, --				date date, --				DayName varchar(250), --				CreatedOn date, --				DirectCare int, --				COCM int, --				MAT int, --				SelfPay int, --				AttemptingToEnroll int, --				Enrolled int, --				EnrolledNotResponding int, --				Declined int, --				Graduated int, --				Ineligible int, --				UnableToReach int, --				NewReferral int, --				IntakePending int, --				RescheduleIntake int, --				CheckContactInformation int, --				Total int --			) --DROP TABLE AddDateOfMonth"
dbo,func_IsHomeVisitComplete," CREATE FUNCTION func_IsHomeVisitComplete ( 	@PatientId int, 	@ActivityNumber INT = 1, 	@Enroll_ID INT = 0, 	@InPatientLogId INT = 0 )  returns INT AS BEGIN 	 	DECLARE @PatientActivityId int; 	 	SELECT @PatientActivityId = PA.Patient_Activity_ID  	FROM Trn_Patient_Activity PA  	INNER JOIN Mst_Activity MA ON PA.Activity_ID = MA.Activity_ID AND MA.ActivityType = 'HomeVisit' 		AND Activity_Start_Status = 3 -- this needs to be map with ActivityStatus enum of Complete  		AND PA.Patient_ID = @PatientId  		AND MA.ActivityNumber = @ActivityNumber -- It means first home visit has or not 		AND (@Enroll_ID = 0 OR PA.Patient_Enroll_ID = @Enroll_ID) 		AND (@InPatientLogId = 0 OR PA.InPatientLogId = @InPatientLogId)  	IF @PatientActivityId IS NULL 	BEGIN 		SET @PatientActivityId = 0 	END 	return @PatientActivityId; END --SELECT DBO.func_IsHomeVisitComplete(3,1)"
dbo,USP_GetDashboardReportMonthly," --EXEC USP_GetDashboardReportMonthly 31,'02/01/2023','02/01/2023',0 Create procedure USP_GetDashboardReportMonthly  ( 	@AccountID int, 	@FromMonth DATETIME, 	@ToMonth DATETIME, 	@ReferralType int ) AS BEGIN 	SET NOCOUNT ON 	;With Result AS 	( 		SELECT * FROM 		( 			SELECT PSL.PatientStatusId 			,MPS.EnumStatusName StatusName 			--,PSL.PatientStatusDate 			,P.PatientPracticeId 			,PR.PracticeName 			,DATENAME(Month,PSL.PatientStatusDate) MONTH, YEAR(PSL.PatientStatusDate) YEAR 			FROM TrnPatientStatusLog PSL 			INNER JOIN MstPatientStatuses MPS ON PSL.PatientStatusId = MPS.StatusID 			INNER JOIN Mst_Patient P ON PSL.PatientID = P.Patient_ID AND P.Account_ID = @AccountID 			LEFT JOIN Mst_Practice PR ON P.PatientPracticeId = PR.ID 			WHERE FORMAT(PSL.PatientStatusDate,'yyyy-MM' ) >= FORMAT(@FromMonth,'yyyy-MM' ) AND FORMAT(PSL.PatientStatusDate,'yyyy-MM' ) <= FORMAT(@ToMonth,'yyyy-MM' ) 			AND (@ReferralType = 0 OR P.TypeOfReferral = @ReferralType) 			AND PR.PracticeStatus = 1 			GROUP BY P.PatientPracticeId,PSL.PatientStatusId, 			MPS.EnumStatusName, 			PSL.PatientStatusDate, 			P.PatientPracticeId 			,PR.PracticeName 			,P.Patient_First_Name, P.Patient_Last_Name 		) t 		PIVOT( 				COUNT(PatientStatusId) 				FOR StatusName IN ( 						[AttemptingToEnroll], 						[Enrolled], 						[EnrolledNotResponding], 						[Declined], 						[Graduated], 						[Ineligible], 						[UnableToReach], 						[NewReferral], 						[IntakePending], 						[RescheduleIntake], 						[CheckContactInformation] 			) 		) AS pivot_table 	) 	SELECT PatientPracticeId,PracticeName,MONTH,YEAR,MONTH+'-'+CONVERT(VARCHAR(10),YEAR) MonthYear,AttemptingToEnroll,Enrolled, 	EnrolledNotResponding,Declined,Graduated,Ineligible,UnableToReach,NewReferral,IntakePending, 	RescheduleIntake,CheckContactInformation, 	Total = isnull(AttemptingToEnroll,0) + isnull(Enrolled,0) + isnull(EnrolledNotResponding,0)+ isnull(Declined,0) + 	isnull(Graduated,0) + isnull(Ineligible,0) + isnull(UnableToReach,0)+ isnull(NewReferral,0) + 	isnull(IntakePending,0) + isnull(RescheduleIntake,0) + isnull(CheckContactInformation,0) 	FROM Result 	ORDER BY YEAR, MONTH DESC  	--SELECT PatientPracticeId,PracticeName,MONTH,YEAR,MonthYear,AttemptingToEnroll,Enrolled, 	--EnrolledNotResponding,Declined,Graduated,Ineligible,UnableToReach,NewReferral,IntakePending, 	--RescheduleIntake,CheckContactInformation,Total FROM MonthyDashboardList END  --CREATE TABLE MonthyDashboardList --	( --		PatientPracticeId int, --		PracticeName varchar(MAX), --		MONTH varchar(250), --		YEAR int, --		MonthYear varchar(MAX), --		AttemptingToEnroll int, --		Enrolled int, --		EnrolledNotResponding int, --		Declined int, --		Graduated int, --		Ineligible int, --		UnableToReach int, --		NewReferral int, --		IntakePending int, --		RescheduleIntake int, --		CheckContactInformation int, --		Total int --	) -- DROP TABLE MonthyDashboardList"
dbo,func_IsHomeVisitOfTypeInPersonExist," CREATE FUNCTION func_IsHomeVisitOfTypeInPersonExist ( 	@PatientId int )  returns INT AS BEGIN 	 	DECLARE @PatientActivityId int; 	 	SELECT @PatientActivityId = PA.Patient_Activity_ID  	FROM Trn_Patient_Activity PA  	INNER JOIN Mst_Activity MA ON PA.Activity_ID = MA.Activity_ID AND MA.ActivityType = 'HomeVisit' 		AND Activity_Type_ID = 1 		AND PA.Patient_ID = @PatientId  	IF @PatientActivityId IS NULL 	BEGIN 		SET @PatientActivityId = 0 	END 	return @PatientActivityId; END --SELECT DBO.func_IsHomeVisitOfTypeInPersonExist(8761)"
dbo,USP_GetDataPullReport," Create procedure USP_GetDataPullReport( 	@StartFrom int = 0,  	@PageSize int = 999999999 )AS BEGIN 	WITH MasterPatient AS ( 		SELECT PP.Patient_ID, 			Patient_MRN,  			Patient_First_Name+' '+ Patient_Last_Name AS PatientName, 			I.AdmissionDate, 			I.DischargeDate, 			I.IsReferral, 			I.FinNumber 		FROM Mst_Patient PP  		INNER JOIN Salutem_Temp.dbo.MemberMRN MM ON PP.Patient_MRN=MM.MRN  		INNER JOIN Trn_InPatientLog I ON PP.Patient_ID=I.Patient_ID AND I.FinNumber=MM.FIN 	), PatientContact AS (  		SELECT  			P.Patient_ID, 			P.Patient_MRN, 			P.PatientName, 			Patient_Contact_Add1, 			Patient_Contact_Add2, 			Patient_Contact_State, 			Patient_Contact_email, 			P.AdmissionDate, 			P.DischargeDate, 			P.IsReferral, 			P.FinNumber 		FROM MasterPatient P  		LEFT JOIN Trn_Patient_Contact C ON C.Patient_ID=P.Patient_ID  		AND C.IsPrimary=0 	) 	, PatientPrimaryContact AS (  		SELECT  			P.Patient_ID, 			C.ZipCode 		FROM MasterPatient P  		LEFT JOIN Trn_Patient_Contact C ON C.Patient_ID=P.Patient_ID  		AND C.IsPrimary=1 	),  	PatientContactResult AS (  					SELECT  						distinct Patient_MRN, 						PatientName AS [Patient_Name], 						FinNumber AS FIN, 						Coalesce(Patient_Contact_Add1,'')+ ' '+ Coalesce(Patient_Contact_Add2,'') AS [Contact_Address_2], 						Patient_Contact_State, 						Patient_Contact_email, 						ZipCode, 						AdmissionDate, 						DischargeDate, 						IsReferral 					FROM PatientContact PC INNER JOIN PatientPrimaryContact PPC ON PC.Patient_ID=PPC.Patient_ID ), 	orderByResult as (select *, 			ROW_NUMBER() over ( 			order BY  Patient_Name) AS RowNumber FROM PatientContactResult  			) 	 SELECT *, (Select Count([Patient_Name]) FROM PatientContactResult) TotalRows      FROM orderByResult  	WHERE RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  END  --EXEC USP_GetDataPullReport 0,999999"
dbo,func_IsPatientEnrolled," CREATE FUNCTION func_IsPatientEnrolled ( 	@PatientId int, 	@EnrollYear int )  returns INT AS BEGIN 	 	Declare @currentYer int = (case when @EnrollYear <= 0 then (SElect Year(GetDate())) else @EnrollYear  end); 	DECLARE @IsPatientEnrolled BIT; 		 	SELECT @IsPatientEnrolled = (Case WHEN Coalesce(PE.Patient_Enrollment_Status, 0) IN (1,9,10,11,12) THEN 1 ELSE 0 END)  From Mst_Patient P  	LEFT JOIN  		Trn_Patient_Enrollment PE ON P.Patient_ID = PE.Patient_ID  			AND (PE.UploadedYear = @currentYer OR YEAR(PE.EnrollmentDate) = @currentYer) 	WHERE  P.Patient_ID = @PatientId  	IF @IsPatientEnrolled IS NULL 	BEGIN 	SET @IsPatientEnrolled = 0 	END 	return @IsPatientEnrolled; END"
dbo,USP_GetDeletedActivitiesReport," Create procedure [dbo].USP_GetDeletedActivitiesReport ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	select @toDate = dateadd(dd,1,@toDate); 	WITH Result AS ( 	Select   	    P.PatientFullName, 	   Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time, TPA.Activity_Start_Date ) AS Activity_Start_Date,	 	   TPA.Activity_Start_Time, 		MA.Activity_Name, 		MU.User_First_Name + ' ' + MU.User_Last_Name AS Activity_Assigned_To_Name, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status,         ActivityOutcomeName, 		DMU.User_First_Name + ' ' + DMU.User_Last_Name AS Activity_Deleted_By, 		TPA.Activity_UpdatedAt, 		MA.Activity_ID,  		TPA.Patient_ID   	From dbo.Trn_Patient_Activity TPA with (nolock)  	INNER JOIN dbo.Mst_Activity MA with (nolock)  ON MA.Activity_ID = TPA.Activity_ID 	INNER JOIN dbo.View_Mst_Patient P with (nolock)  ON P.Patient_ID = TPA.Patient_ID AND P.Account_ID = @AccountId 	LEFT JOIN dbo.Mst_User MU with (nolock) ON MU.User_ID = TPA.Activity_Assigned_To     LEFT JOIN dbo.Mst_User DMU with (nolock) ON DMU.User_ID = TPA.Activity_UpdatedBy 	WHERE P.Patient_Status = 1 AND TPA.Activity_Status = 0 	  	AND TPA.Activity_UpdatedAt >= @fromDate AND TPA.Activity_UpdatedAt <= @toDate 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY  			case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc,	 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc,	 								case when @orderBy = 'Activity_Name' and @orderDir = 'asc' then Activity_Name end, 								case when @orderBy = 'Activity_Name' and @orderDir = 'desc' then Activity_Name end desc, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'asc' then Activity_Assigned_To_Name end, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'desc' then Activity_Assigned_To_Name end desc, 								case when @orderBy = 'Activity_Start_Status_Name' and @orderDir = 'asc' then Activity_Start_Status end, 								case when @orderBy = 'Activity_Start_Status_Name' and @orderDir = 'desc' then Activity_Start_Status end desc, 							 								case when @orderBy = 'ActivityOutcomeName' and @orderDir = 'asc' then ActivityOutcomeName end, 								case when @orderBy = 'ActivityOutcomeName' and @orderDir = 'desc' then ActivityOutcomeName end desc, 							    case when @orderBy = 'Activity_UpdatedAt' and @orderDir = 'asc' then Activity_UpdatedAt end, 								case when @orderBy = 'Activity_UpdatedAt' and @orderDir = 'desc' then Activity_UpdatedAt end desc, 								case when @orderBy = 'Activity_Deleted_By' and @orderDir = 'desc' then Activity_Deleted_By end desc, 								case when @orderBy = 'Activity_Deleted_By' and @orderDir = 'desc' then Activity_Deleted_By end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Activity_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize); END  -- EXEC USP_GetDeletedActivitiesReport 22,'01Oct2022','19Oct2022' -- EXEC sp_recompile N'dbo.USP_GetDeletedActivitiesReport';   "
dbo,func_IsPatientExistInMaster," CREATE FUNCTION func_IsPatientExistInMaster ( 	@MRN VARCHAR(50), 	@FirstName VARCHAR(250), 	@LastName VARCHAR(250), 	@DOB DATETIME, 	@Gender VARCHAR(50), 	@ContactPhone VARCHAR(50) )  returns INT AS BEGIN 	 	DECLARE @PatientId int = 0; 	 	SELECT @PatientId = Patient_ID FROM Mst_Patient  	WHERE Patient_MRN = @MRN OR (Patient_First_Name=@FirstName AND Patient_Last_Name=@LastName  	AND Patient_DOB=@DOB AND Mobile=@ContactPhone AND Patient_Gender=@Gender)  	IF @PatientId IS NULL 	BEGIN 		SET @PatientId = 0 	END 	return @PatientId; END --SELECT dbo.func_IsPatientExistInMaster('Destiny','Stillwell','1997-04-24','Female','980-522-3052')  "
dbo,USP_GetDischargeReportForHospital," Create procedure [dbo].USP_GetDischargeReportForHospital ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@ActivityStatusID INT, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	--select @toDate = dateadd(dd,1,@toDate); 	DECLARE @EnrollMstActivityID int; 	SET @EnrollMstActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'EnrollPatient'); 	DECLARE @DischargeActivityID int; 	SET @DischargeActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'DischargeInfo'); 	 	WITH Result AS ( 	SELECT  	        IPL.InPatientLogId, 			patient.Patient_ID,			 			patient.Patient_MRN, 			IPL.FinNumber,  			IPL.UnitNumber, 			patient.ZipCode, 			IPL.DRG, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS PatientFullName, 			IPL.DischargeDate, 			IPL.EnrollmentStatus, 			enm.Discription AS DisplayEnrollmentStatus, 			TPA.Activity_Assigned_To, 			usr.User_First_Name + ' ' + usr.User_Last_Name AS ActivityAssignedToName			 		FROM Trn_InPatientLog IPL with (nolock) 		INNER JOIN dbo.Mst_Patient patient with (nolock) ON patient.Patient_ID = IPL.Patient_ID AND patient.Account_ID = @AccountId		 		INNER JOIN Mst_Enum enm ON enm.EnumValue = IPL.EnrollmentStatus AND enm.EnumType = 'EnrollmentStatus' 		INNER JOIN Trn_Patient_Activity TPA ON TPA.Patient_ID = IPL.Patient_ID AND TPA.InPatientLogId = IPL.InPatientLogId AND (TPA.Activity_ID = @DischargeActivityID OR TPA.Activity_ID = @EnrollMstActivityID) 		LEFT JOIN Mst_User usr with (nolock) ON usr.User_ID = TPA.Activity_Assigned_To		 		WHERE IPL.DischargeDate >= @fromDate AND IPL.DischargeDate <= @toDate  		AND (@ActivityStatusID = 99 OR IPL.EnrollmentStatus = @ActivityStatusID)   	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY  			case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc,	 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc,	 								case when @orderBy = 'UnitNumber' and @orderDir = 'asc' then UnitNumber end, 								case when @orderBy = 'UnitNumber' and @orderDir = 'desc' then UnitNumber end desc, 								case when @orderBy = 'DRG' and @orderDir = 'asc' then DRG end, 								case when @orderBy = 'DRG' and @orderDir = 'desc' then DRG end desc, 								case when @orderBy = 'DischargeDate' and @orderDir = 'asc' then DischargeDate end, 								case when @orderBy = 'DischargeDate' and @orderDir = 'desc' then DischargeDate end desc,							 								case when @orderBy = 'EnrollmentStatus' and @orderDir = 'asc' then EnrollmentStatus end, 								case when @orderBy = 'EnrollmentStatus' and @orderDir = 'desc' then EnrollmentStatus end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(InPatientLogId) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize); END  -- EXEC USP_GetDischargeReportForHospital 22,'01Oct2022','19Oct2022' -- EXEC sp_recompile N'dbo.USP_GetDischargeReportForHospital';   "
dbo,func_IsPatientExistInPatientLog," CREATE FUNCTION func_IsPatientExistInPatientLog ( 	@PatientId int )  returns INT AS BEGIN 	 	DECLARE @PatientInLogId int; 	IF EXISTS (SELECT * FROM Trn_InPatientLog WHERE Patient_ID = @PatientId) 	BEGIN 		set @PatientInLogId =(SELECT TOP(1) InPatientLogId FROM Trn_InPatientLog WHERE Patient_ID = @PatientId AND EnrollmentStatus <= 1 AND IsHospitalEHRDocumentation = 0) 	END 	IF @PatientInLogId IS NULL 	BEGIN 		SET @PatientInLogId = 0 	END 	return @PatientInLogId; END"
dbo,USP_GetEnrollmentDetailsWithPDCScore," Create procedure [dbo].USP_GetEnrollmentDetailsWithPDCScore (     @AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@status int,     @EnrollmentYear INT, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN SET NOCOUNT ON;  With EnrollmentDetailsWithPDCScoreResult AS ( SELECT  		P.Patient_ID, 		P.Patient_MRN, 		P.Patient_Last_Name, 		P.Patient_First_Name, 		P.Patient_Last_Name +' '+ P.Patient_First_Name AS PatientFullName, 		PE.Patient_Enroll_ID, 		PE.Patient_Enrollment_Status, 		ME.Discription AS EnrollStatusName, 		PE.EnrollmentDate AS ActualEnrollment, 		P.Patient_DOB, 		P.MADScore, 		P.MAHScore, 		P.MACScore, 		P.Patient_LanguageID, 		FHV.FirstHomeVisitOn, 		PE.CreatedOn AS UploadedDate, 		P.ReFillDueDate 	FROM dbo.Mst_Patient P 	INNER JOIN dbo.Trn_Patient_Enrollment PE ON PE.Patient_ID = P.Patient_ID AND (PE.UploadedYear = @EnrollmentYear OR YEAR(PE.EnrollmentDate) = @EnrollmentYear) AND P.Account_ID = @AccountID 	INNER JOIN dbo.Mst_Enum ME ON  ME.EnumValue=PE.Patient_Enrollment_Status AND ME.EnumType='EnrollmentStatus' 	LEFT JOIN dbo.View_FirstHomeVisitDetails FHV ON FHV.Patient_ID=P.Patient_ID AND YEAR(FHV.FirstHomeVisitOn) = YEAR(PE.EnrollmentDate) 	 	WHERE P.Patient_Status = 1 			 			AND (@status = 99 OR PE.Patient_Enrollment_Status = @status) 			AND  PE.CreatedOn >= @fromDate AND PE.CreatedOn <= @toDate 	), 	 OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'EnrollStatusName' and @orderDir = 'asc' then EnrollStatusName end, 								case when @orderBy = 'EnrollStatusName' and @orderDir = 'desc' then EnrollStatusName end desc, 								case when @orderBy = 'UploadedDate' and @orderDir = 'asc' then UploadedDate end, 								case when @orderBy = 'UploadedDate' and @orderDir = 'desc' then UploadedDate end desc, 								case when @orderBy = 'ActualEnrollment' and @orderDir = 'asc' then ActualEnrollment end, 								case when @orderBy = 'ActualEnrollment' and @orderDir = 'desc' then ActualEnrollment end desc 								 			) AS RowNumber FROM EnrollmentDetailsWithPDCScoreResult  	)   	SELECT *, (Select Count(Patient_ID) FROM EnrollmentDetailsWithPDCScoreResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  END  -- EXEC dbo.USP_GetEnrollmentDetailsWithPDCScore 5, '01Feb2020','31July2021',0,2021,'PatientFullName','asc',0,10 -- sp_recompile '[dbo].USP_GetEnrollmentDetailsWithPDCScore'"
dbo,func_IsUserAdmin," CREATE FUNCTION func_IsUserAdmin ( 	@userID int )  returns BIT AS BEGIN 	DECLARE @isAdmin BIT; 	Select @isAdmin = Count(U.User_ID) From Mst_Roles R  	INNER JOIN Mst_User U ON R.RoleId = U.User_Role  		AND U.User_ID = @userID AND (R.RoleName = 'Admin' OR R.RoleName='SuperUser'); 	 	IF @isAdmin > 0 	BEGIN  		return 1; 	END 	return 0; END"
dbo,USP_GetEnumDetailsByType," Create procedure [dbo].[USP_GetEnumDetailsByType] ( 	@Type varchar(250) ) AS BEGIN 	SELECT ID, EnumType, EnumValue, EnumName, Discription FROM Mst_Enum WHERE EnumType = @Type END -- exec USP_GetEnumDetailsByType 'Salutation'"
dbo,func_Split,"  CREATE function func_Split( 	@sInputList nvarchar(max) -- List of delimited items 	, @sDelimiter varchar(8000) = ',' -- delimiter that separates items ) returns @List TABLE (item varchar(8000)) begin declare @sItem varchar(8000) while charindex(@sDelimiter,@sInputList,0) <> 0     begin     select     @sItem=rtrim(ltrim(substring(@sInputList,1,charindex(@sDelimiter,@sInputList,0)-1))),     @sInputList=rtrim(ltrim(substring(@sInputList,charindex(@sDelimiter,@sInputList,0)+len(@sDelimiter),len(@sInputList))))      if len(@sItem) > 0     insert into @List select @sItem     end  if len(@sInputList) > 0     insert into @List select @sInputList -- Put the last item in return end"
dbo,USP_GetExistingImportedMemberList," Create procedure USP_GetExistingImportedMemberList AS BEGIN 	Select MP.MEMBER_MBI, 		MP.MEMBER_LAST_NAME, 		MP.MEMBER_FIRST_NAME, 		MP.MEMBER_GENDER, 		MP.MEMBER_DATE_OF_BIRTH, 		MP.MEMBER_MIDDLE_INITIAL, 		MP.MEMBER_ADDRESS1, 		MP.MEMBER_ADDRESS2, 		MP.MEMBER_CITY, 		MP.MEMBER_STATE, 		MP.MEMBER_ZIP_CODE, 		MP.MEMBER_PHONE_NUMBER, 		MP.MEMBER_SECONDARY_PHONE_NUMBER, 		MP.MEMBER_PRIMARY_LANGUAGE, 		MP.LIS_INDICATOR, 		MP.DISABLED_FLAG, 		MP.PLAN_EFFECTIVE_DATE, 		MP.TERM_DATE_FROM_PLAN, 		MP.CMR_FLAG, 		MP.CMS_CONTRACT_NUMBER, 		MP.CMS_PBP_NUMBER, 		MP.LTC_INDICATOR, 		MP.REASON_FOR_TERMINATION, 		MP.PCP_FIRST_NAME, 		MP.PCP_LAST_NAME, 		MP.PCP_PHONE, 		Round((Convert(float, MP.MAD_PDC_2021)*100),2) AS MAD_PDC_2021, 		Round((Convert(float, MP.MAH_PDC_2021)*100),2) AS MAH_PDC_2021, 		Round((Convert(float, MP.MAC_PDC_2021)*100),2) AS MAC_PDC_2021, 		MP.CLIENT_DEF_3 	From Salutem_Temp.dbo.Member_Import MP  	INNER JOIN Mst_Patient P ON MP.Member_MBI = P.Patient_MRN  	WHERE P.Patient_MRN IS NOT NULL AND P.Patient_ID IS NOT NULL END  --EXEC USP_GetExistingImportedMemberList "
dbo,funcEncounterInformationDetails," Create FUNCTION funcEncounterInformationDetails  ( 	@Patient_ID int, 	@LastActivityDate DATETIME  ) RETURNS TABLE AS  RETURN ( 	 	SELECT TOP 1 			PA.Patient_Activity_ID, 			PA.Patient_ID, 			PA.Activity_Assigned_To, 			PA.ActivityOutcomeName, 			ALog.EncounterDate, 			ALog.Attendance, 			PA.LastAttemptDate 	From Trn_Patient_Activity PA  		INNER JOIN Mst_Activity MA ON MA.Activity_ID = PA.Activity_ID AND MA.ActivityType IN ('InitialAssessment','ProgressNote','GroupNote') 		Inner JOIN TrnPatientAssessmentLog ALog ON ALog.PatientActivityID = PA.Patient_Activity_ID AND Attendance IN (2,5,6) --'No Call No Show', 'Cancelled', 'Patient Deceased' 	WHERE PA.Activity_Start_Status = 3  AND PA.Patient_ID = @Patient_ID AND  PA.Activity_Actual_End_Time = @LastActivityDate )   --SELECT * FROM funcEncounterInformationDetails(66604, '2023-02-23 17:39:52.663')  "
dbo,USP_GetFirstBillingActivityIDByMonthOfService," CREATE PROCEDURE [dbo].[USP_GetFirstBillingActivityIDByMonthOfService] ( 	@PatientID INT, 	@MonthOfService DATETIME  ) AS BEGIN 	--Here returning billing activity id for the patient and for the given month. 	--For billing need to consider IA,ClinicalCareScreening, PN OR GN activities only and that is priority by Sequence Number. 	--Sequence number is important here because IA is the high priority one and after that progress note and after that Group note. 	SELECT TOP 1  PA.Patient_Activity_ID, PA.Activity_ID, MA.ActivityType, PA.Activity_Assigned_To, PA.AssessmentID 	FROM Trn_Patient_Activity PA  	INNER JOIN Mst_Activity MA ON PA.Activity_ID = MA.Activity_ID  		AND MA.ActivityType IN ('InitialAssessment', 'ProgressNote', 'GroupNote','ClinicalCareScreening')  		AND PA.Activity_Start_Status = 3 and PA.IsSubmited = 1 -- need to get here only completed and submitted activitites 		AND PA.DateOfService = @MonthOfService 		AND PA.Activity_Status = 1 	WHERE PA.Patient_ID = @PatientID ORDER BY MA.SequenceNumber, PA.Patient_Activity_ID END  --EXEC USP_GetFirstBillingActivityIDByMonthOfService 25804, '31July2022'"
dbo,funcGetDXCodeByPatientActivityId," Create FUNCTION funcGetDXCodeByPatientActivityId (@PatientActivityId int) RETURNS TABLE AS RETURN ( 			Select 			@PatientActivityId PatientActivityID, 			STUFF((SELECT '; ' + MD.ICD10Code 			FROM Trn_DSMVDiagnosisLog lo 			LEFT JOIN Mst_Diagnosis MD ON lo.DiagnosisID = MD.Diagnosis_ID 			WHERE lo.PatientActivityID = @PatientActivityId 			FOR XML PATH(''), TYPE).value('text()[1]','nvarchar(max)') 			, 1, LEN('; '), '') AS Dx 		) --SELECT *FROM funcGetDXCodeByPatientActivityId (4113)"
dbo,USP_GetHomeVisitReportForHospital," CREATE procedure [dbo].[USP_GetHomeVisitReportForHospital] ( 	@AccountId INT, 	@activityId int, 	@fromDate DATETIME, 	@toDate DATETIME, 	@pccId int, 	@status int, 	@HomeVisitType int, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN select @toDate= dateadd(dd,1,@toDate); 	With ActivityReportResult AS(SELECT  		patient.Patient_MRN, 		patient.Patient_ID, 		patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 		patient.Patient_Contact_State, 		patient.CMS_Contract_Number, 		PA.Patient_Activity_ID, 		PA.Activity_ID, 		Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) AS Activity_Start_Date, 		PA.Activity_Start_Time, 		PA.Activity_Assigned_To, 		PA.SpentTimeInMinutes, 		U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName, 		Coalesce(PA.Activity_Start_Status, 1) AS Activity_Start_Status, 		ActivityOutcomeName, 		TIP.FinNumber, 		TIP.UnitNumber, 		patient.ZipCode, 		drg.DRGTitle, 		TIP.DischargeDate, 		PA.ActivityReasonDescription as ReasonforStatus, 		ME.EnumName, 		MAT.Activity_Type_Name 		FROM Trn_Patient_Activity PA 	INNER JOIN View_Mst_Patient patient ON PA.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountId 	INNER JOIN Trn_InPatientLog TIP ON TIP.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountID AND TIP.InPatientLogId = PA.InPatientLogId 	INNER JOIN Mst_Enum ME ON Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue AND ME.EnumType = 'ActivityStatus' 	 	LEFT JOIN Mst_User U ON U.User_ID = PA.Activity_Assigned_To 	LEFT JOIN Mst_DRG drg  ON drg.ID = TIP.DRG 	INNER JOIN dbo.Mst_Activity_Type MAT with (nolock)  ON MAT.Activity_Type_ID = PA.Activity_Type_ID 	WHERE PA.Activity_ID = @activityId  		AND( PA.Activity_UpdatedAt >= @fromDate AND PA.Activity_UpdatedAt <= @toDate) 		AND (@HomeVisitType = 0 OR PA.Activity_Type_ID = @HomeVisitType) 		AND (@pccId = 0 OR PA.Activity_Assigned_To = @pccId) 		AND (@status = 0 OR (Coalesce(PA.Activity_Start_Status, 1) = @status)) 	), 	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'asc' then Patient_Contact_State end, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'desc' then Patient_Contact_State end desc, 								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc, 								case when @orderBy = 'ActivityName' and @orderDir = 'asc' then Activity_Start_Status end, 								case when @orderBy = 'ActivityName' and @orderDir = 'desc' then Activity_Start_Status end desc 								 								 			) AS RowNumber FROM ActivityReportResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ActivityReportResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END  --EXEC USP_GetHomeVisitReportForHospita 7,3,'04/29/2021','07/31/2021',0,0,'PatientFullName','asc',0,10 "
dbo,funcGetDXCodeByPatientId," Create FUNCTION funcGetDXCodeByPatientId (@PatientID int) RETURNS TABLE AS RETURN ( 			Select 			@PatientID PatientID, 			STUFF((SELECT '; ' + MD.ICD10Code 			FROM Trn_DSMVDiagnosis TD 			LEFT JOIN Mst_Diagnosis MD ON TD.DiagnosisID = MD.Diagnosis_ID 			WHERE TD.PatientID = @PatientID AND IsDeleted = 0  			FOR XML PATH(''), TYPE).value('text()[1]','nvarchar(max)') 			, 1, LEN('; '), '') AS Dx 		) -- SELECT * FROM funcGetDXCodeByPatientId (19278) "
dbo,USP_GetHospitalActivityReport," Create procedure [DBO].USP_GetHospitalActivityReport ( 	@AccountId INT, 	@AssignTo INT, 	@FromDate Date, 	@ToDate Date,  	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	SET NOCOUNT ON; 	SET @ToDate = DATEADD(Day,1,@ToDate); 	 With ActivityReportResult AS (  	 SELECT  		 P.Patient_ID, 		 P.Patient_First_Name+ ' '+P.Patient_Last_Name PatientFullName, 		 P.Patient_MRN, 		 PIL.FinNumber 		,Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) AS ActivityDate 		,A.Activity_Name 		,E.Discription ActivityStatus 		,PA.ActivityOutcomeName 		,U.User_First_Name+' '+U.User_Last_Name AssignToName 		--,PA.AttemptNumber 	FROM Mst_Patient P 	INNER JOIN Trn_Patient_Activity PA ON P.Patient_ID = PA.Patient_ID 	INNER JOIN Trn_InPatientLog PIL ON PA.InPatientLogId = PIL.InPatientLogId 	INNER JOIN Mst_Activity A ON PA.Activity_ID = A.Activity_ID 	INNER JOIN Mst_Enum E ON ISNULL(PA.Activity_Start_Status,1) = E.EnumValue AND E.EnumType = 'ActivityStatus' 	LEFT JOIN Mst_User U ON PA.Activity_Assigned_To = U.User_ID 	WHERE P.Account_ID = @AccountId 	AND (@AssignTo = 0 OR PA.Activity_Assigned_To = @AssignTo) 	AND Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) >= @FromDate 	AND Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) < @ToDate 	--ORDER BY P.Patient_ID,ActivityDate ),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					 case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					 case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 					 case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 					 case when @orderBy = 'Activity_Name' and @orderDir = 'asc' then Activity_Name end, 					 case when @orderBy = 'Activity_Name' and @orderDir = 'desc' then Activity_Name end desc, 					 case when @orderBy = 'AssignToName' and @orderDir = 'asc' then AssignToName end, 					 case when @orderBy = 'AssignToName' and @orderDir = 'desc' then AssignToName end desc 			) AS RowNumber FROM ActivityReportResult  	) 	 	SELECT *, (Select Count(Patient_ID) FROM ActivityReportResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END"
dbo,funcGetInsuranceAndGroupIDByPatientId," Create FUNCTION funcGetInsuranceAndGroupIDByPatientId (@PatientId int) RETURNS TABLE AS RETURN	( 			SELECT 					@PatientId PatientID, 					PMI.Insurance AS PrimaryInsurance, 					SMI.Insurance AS SecondaryInsurance, 					TMI.Insurance AS TertiaryInsurance, 					PrimaryInsuranceIDNumber, 					SecondaryInsuranceIDNumber, 					TertiaryInsuranceIDNumber 			FROM Trn_PatientInsurance TPI 			LEFT JOIN Mst_Insurance PMI ON TPI.PrimaryInsurance = PMI.ID 			LEFT JOIN Mst_Insurance SMI ON TPI.SecondaryInsurance = SMI.ID 			LEFT JOIN Mst_Insurance TMI ON TPI.TertiaryInsurance = TMI.ID 			where PatientId = @PatientId 		) --SELECT *FROM funcGetInsuranceAndGroupIDByPatientId (16489)"
dbo,USP_GetInPatientLogActivityDetails," Create procedure USP_GetInPatientLogActivityDetails (@Patient_Activity_ID INT) AS BEGIN 	SET NOCOUNT ON 	Select  		TPA.Patient_Activity_ID, 		IPL.InPatientLogId, 		IPL.EnrollmentStatus, 		IPL.EnrollmentDate, 		IPL.EnrollmentType, 		TPA.Activity_ID, 		TPA.Activity_Type_ID, 		TPA.Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		TPA.Activity_Actual_End_Time, 		TPA.Activity_Assigned_To, 		MU.User_First_Name + ' '+ MU.User_Last_Name AS AssignedToName, 		TPA.Activity_Note, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		TPA.Activity_Delay_Note, 		TPA.Patient_Enroll_ID, 		TPA.AttemptNumber, 		TPA.LastCallOutcomeName, 		Coalesce(IPL.EnrollmentDate, TPA.LastAttemptDate, TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time) AS LastAttemptDate, 		MA.Activity_Description, 		MA.ActivityType, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Patient_ID, 		ActivityOutcomeName, 		TPA.IsImmediateActionRequired, 		ISNULL(IPL.RxHomeDelivery, 0) AS RxHomeDelivery, 		IPL.RxEnrollmentDate 	From dbo.Trn_Patient_Activity TPA   	INNER JOIN dbo.Mst_Patient P WITH (NOLOCK) ON P.Patient_ID = TPA.Patient_ID  	INNER JOIN dbo.Trn_InPatientLog IPL WITH (NOLOCK) ON IPL.Patient_ID = P.Patient_ID AND IPL.InPatientLogId  = TPA.InPatientLogId  	INNER JOIN dbo.Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID  	LEFT JOIN Mst_User MU ON MU.User_ID = TPA.Activity_Assigned_To 	WHERE TPA.Patient_Activity_ID = @Patient_Activity_ID; END -- EXEC USP_GetInPatientLogActivityDetails 21069"
dbo,funcGetMinutestoNextCode," CREATE FUNCTION funcGetMinutestoNextCode  ( 	@BillingCPTCode VARCHAR(50), 	@AddOnCPTCode VARCHAR(50), 	@SecondAddOnCPTCode VARCHAR(50), 	@MinutesOfThisMonth INT, 	@PatientID INT )  RETURNS INT AS  BEGIN   DECLARE @MinutesToNextCode INT, @IsFirstMonthService BIT=0;   DECLARE @EndOfMonth DATE = EOMONTH(GETUTCDATE());    	IF NOT EXISTS(SELECT TOP 1 ID FROM TrnBillingProfile WHERE PatientID = @PatientID AND IsDeleted = 0  	AND ActivityType IN ('InitialAssessment','ClinicalCareScreening') 	AND MonthOfService < @EndOfMonth)     BEGIN 		SET @IsFirstMonthService = 1 	END 	ELSE     BEGIN 		SET @IsFirstMonthService = 0 	END  	SELECT @MinutesToNextCode = (EndDuration - @MinutesOfThisMonth)  	FROM MstBillingCodes 	WHERE CPTCode = @BillingCPTCode  		AND @MinutesOfThisMonth >= StartDuration   		AND @MinutesOfThisMonth<= EndDuration  		AND IsFirstMonthService = @IsFirstMonthService 	 	IF @AddOnCPTCode IS NULL OR @SecondAddOnCPTCode IS NULL 	BEGIN 		RETURN @MinutesToNextCode + 1 	END 	RETURN NULL END"
dbo,USP_GetInPatientLogDetail," create procedure [dbo].[USP_GetInPatientLogDetail] ( 	@Patient_ID int  ) AS BEGIN 	SELECT  		P.Patient_ID, 		P.Patient_MBI, 		P.Account_ID, 		P.Account_Name, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Patient_MRN, 		P.Patient_DOB, 		P.Patient_SSN, 		P.Patient_Race, 		P.Patient_Gender, 		P.Patient_LanguageID, 		ML.Language_Description, 		P.Patient_Low_Income, 		P.Patient_Can_Contact, 		P.Patient_Status, 		P.Patient_Notes, 		P.Patient_CreatedAt, 		P.Patient_CreatedBy, 		P.Patient_UpdatedAt, 		P.Patient_UpdatedBy, 		P.Patient_Contact_ID, 		P.Patient_Contact_name, 		P.Patient_Relation_ID, 		P.Patient_Contact_Phone, 		P.Patient_Contact_email, 		P.Patient_Contact_Add1, 		P.Patient_Contact_Add2, 		P.Patient_Contact_Add3, 		P.Patient_Contact_City, 		P.Patient_Contact_County, 		P.Patient_Contact_State, 		P.ZipCode, 		IPL.InPatientLogId, 		IPL.EnrollmentStatus as Patient_Enrollment_Status, 		IPL.EnrollmentDate, 		IPL.UnitNumber,   		IPL.RoomNumber,  		IPL.AdmissionDate, 		IPL.EstimatedDischargeDate,         IPL.DaysInPatient,         IPL.IsReferral, 		p.CMRCompleted, 		p.CMROutcome, 		p.MACScore, 		p.MADScore, 		p.MAHScore, 		p.SUPDScore, 		p.HomeVisitType 	From View_Mst_Patient P 	LEFT JOIN Mst_Language ML ON ML.Language_ID = P.Patient_LanguageID 	LEFT JOIN Trn_InPatientLog IPL ON IPL.Patient_ID = P.Patient_ID AND IPL.InPatientLogId=P.InPatientLogId 	WHERE P.Patient_ID = @Patient_ID END"
dbo,funcGetNoOfWeeksOfIA," Create FUNCTION funcGetNoOfWeeksOfIA  ( 	@Patient_ID int ) RETURNS TABLE AS  RETURN (      SELECT TOP (1) datediff(week,PA.Activity_Actual_End_Time,getdate()) AS NoOfWeeksofIA,PA.Activity_Actual_End_Time,Patient_ID 	From Trn_Patient_Activity PA  	INNER JOIN Mst_Activity MA ON MA.Activity_ID = PA.Activity_ID     	WHERE PA.Patient_ID = @Patient_ID 	AND MA.ActivityType = 'InitialAssessment' 	AND Isnull(PA.Activity_Start_Status, 1) = 3 	ORDER BY PA.Activity_Actual_End_Time DESC 	 	 )"
dbo,USP_GetInsuranceTypeList," Create procedure [dbo].USP_GetInsuranceTypeList AS BEGIN 	SELECT ID, EnumValue, EnumName, Discription  	FROM Mst_Enum WHERE EnumType='InsuranceType' ORDER BY Discription END --EXEC USP_GetInsuranceTypeList"
dbo,funcGetPatientCommunicationDetails," Create FUNCTION funcGetPatientCommunicationDetails  ( 	@Patient_ID int, 	@ActivityType nvarchar(200) ) RETURNS TABLE AS  RETURN ( 	Select  		TOP (1) PA.Activity_Actual_End_Time AS LastCallDate, 		PA.LastCallOutcomeName AS LastCallOutcomeName, 		Coalesce(PA.Activity_UpdatedBy,PA.Activity_CreatedBy) AS LastOutreachby 	From Trn_Patient_Activity PA  	INNER JOIN Mst_Activity MA ON MA.Activity_ID = PA.Activity_ID     	WHERE PA.Patient_ID = @Patient_ID 	AND MA.ActivityType = @ActivityType 	AND Coalesce(PA.Activity_Start_Status, 1) = 3 	ORDER BY PA.Activity_Actual_End_Time DESC  )"
dbo,USP_GetLoggedInUserAccountList," Create procedure USP_GetLoggedInUserAccountList (@UserId int) AS BEGIN 	Select UA.ID, AccountId, UserId, Account_Name,AccountType,ME.Discription AS AccountTypeName FROM  Trn_User_Account UA 	INNER JOIN Mst_Account MA  ON UA.AccountId = MA.Account_ID and UA.UserId = @UserId AND MA.Account_Status = 1 	INNER JOIN Mst_Enum ME ON ME.EnumValue = MA.AccountType AND ME.EnumType = 'AccountType' 	ORDER BY Account_Name END"
dbo,funcGetPatientFullName," CREATE FUNCTION funcGetPatientFullName ( 	@patientId int )  returns varchar(250) AS BEGIN 	DECLARE @patientFullName VARCHAR(250); 	Select @patientFullName = coalesce(Patient_First_Name,'') + ' ' + coalesce(patient_Last_Name,'')  From Mst_Patient WHERE Patient_ID = @patientId; 	 	IF @patientFullName is null  	BEGIN 		SET @patientFullName = ''; 	END  	return @patientFullName; END"
dbo,USP_GetLoginLogoutHistoryReport," CREATE procedure [dbo].[USP_GetLoginLogoutHistoryReport] ( 	@AccountId INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@userId int, 	@orderBy nvarchar(50) = 'UserFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	With LoginLogoutReportResult AS(SELECT  		U.User_ID UserID, 		U.User_First_Name + U.User_Last_Name UserFullName, 		ULH.LoginTime, 		ULH.LogoutTime 		FROM TrnTrackUserLoginLogoutHistory ULH 		INNER JOIN Mst_User U ON ULH.UserID = U.User_ID AND U.User_Status = 1 AND ULH.LogoutTime IS NOT NULL 		WHERE  CONVERT(Date,ULH.LoginTime) >= @fromDate AND  CONVERT(Date,ULH.LoginTime) <= @toDate 		AND (@userId = 0 OR ULH.UserID = @userId) 	), 	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'UserFullName' and @orderDir = 'asc' then UserFullName end, 								case when @orderBy = 'UserFullName' and @orderDir = 'desc' then UserFullName end desc 			) AS RowNumber FROM LoginLogoutReportResult  	)   	SELECT *, (Select Count(UserID) FROM LoginLogoutReportResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END  --EXEC USP_GetLoginLogoutHistoryReport 22, '12/09/2022 12.00.00 AM','12/16/2022 12.00.00 AM',0"
dbo,funcGetPatientPHQorGADScore," Create FUNCTION funcGetPatientPHQorGADScore (@PatientID INT, @PatientActivityId INT, @QuestionFor INT, @QuestonSubType INT) RETURNS TABLE AS RETURN ( 			SELECT QA.PatientID, SUM(CAST(ISNULL(QA.AnswerText,0) AS INT)) Score FROM Mst_Questions Q  			INNER JOIN Trn_PatientQuestionAnswersLog QA ON Q.QuestionID = QA.QuestionID  				AND Q.QuestionFor=@QuestionFor AND Q.QuestonSubType=@QuestonSubType 				AND QA.PatientID = @PatientID AND QA.PatientActivityID = @PatientActivityID 			GROUP BY QA.PatientID  		) --SELECT *FROM funcGetPatientPHQorGADScore (19278, 4129, 1,1)"
dbo,USP_GetMasterPracticeSelectionList," create procedure [dbo].[USP_GetMasterPracticeSelectionList] ( 	@PatientID INT = 0, 	@LoggedInUserID INT = 0 ) AS BEGIN 	SELECT DISTINCT MP.ID, PracticeName FROM Mst_Practice MP  	LEFT JOIN TrnUserPractices UP ON MP.ID = UP.PracticeID  	WHERE PracticeStatus = 1 AND (@LoggedInUserID = 0 OR UP.UserID = @LoggedInUserID) 	UNION 	SELECT ID, PracticeName FROM Mst_Practice PR INNER JOIN Mst_Patient P ON PR.ID = P.PatientPracticeId AND P.Patient_ID = @PatientID END  -- EXEC USP_GetMasterPracticeSelectionList 19275"
dbo,funcGetUserFullName," CREATE FUNCTION funcGetUserFullName ( 	@userId int )  returns varchar(250) AS BEGIN 	DECLARE @userFullName VARCHAR(250); 	Select @userFullName = coalesce(User_First_Name,'') + ' ' + coalesce(User_Last_Name,'')  From Mst_User WHERE User_ID = @userId; 	 	IF @userFullName is null  	BEGIN 		SET @userFullName = ''; 	END  	return @userFullName; END"
dbo,USP_GetMedListToCreateMissingPDCActivity," Create procedure USP_GetMedListToCreateMissingPDCActivity AS BEGIN  	CREATE TABLE #TempNDC ( 		NDC VARCHAR(50), 		Med_ID INT, 		Strength_ID INT 	);  	INSERT INTO #TempNDC (NDC, Med_ID, Strength_ID) SELECT Distinct NDC.NDC,NDC.Med_ID,NDC.Strength_ID  	FROM Mst_MedNDC NDC  	INNER JOIN TRN_UHCMedNDC_List UHC ON NDC.NDC =UHC.NDC 	INNER JOIN Mst_Medicine M ON M.Med_ID=NDC.Med_ID  	INNER JOIN Mst_Med_Strength S ON NDC.Strength_ID = S.ID;  	DECLARE @CurrentYear INT = YEAR(GETDATE())  	DECLARE @CurrentDate DATE = GETDATE() 	 	SELECT DISTINCT PE.Patient_ID,  		--PE.UploadedYear, PE.EnrollmentDate, FHV.HomeVisitDate, 		MD.Refill_Next_Date, 		MD.Med_ID, 		MD.Med_Strength_ID, 		MD.DaysSupply 	FROM Trn_Patient_Enrollment PE  	INNER JOIN View_FirstHomeVisitComplete FHV ON PE.Patient_ID = FHV.Patient_ID AND PE.Patient_Enroll_ID = FHV.Patient_Enroll_ID 	INNER JOIN Trn_Patient_Med_Dosage MD ON PE.Patient_ID = MD.Patient_ID  		AND MD.Refill_Next_Date > @CurrentDate AND Patient_Dosage_Prescribed_Status = 1   	INNER JOIN #TempNDC T ON T.Med_ID = MD.Med_ID AND T.Strength_ID = MD.Med_Strength_ID 	WHERE  (PE.UploadedYear = @CurrentYear OR YEAR(PE.EnrollmentDate) = @CurrentYear) AND PE.Patient_Enrollment_Status IN (1,9,10,11,12) 	ORDER BY Patient_ID, MD.Refill_Next_Date;  	DROP TABLE #TempNDC END  -- EXEC USP_GetMedListToCreateMissingPDCActivity"
dbo,funcMaxEnrollmentAttemptNumber," Create FUNCTION funcMaxEnrollmentAttemptNumber (@EnrollmentId int) RETURNS TABLE AS  RETURN ( 	Select  		PEnrollment.Patient_Enroll_ID EnrollmentId, 		Max(AttemptNumber) AS AttemptNumber 	From Trn_Patient_Enrollment PEnrollment  	LEFT JOIN dbo.Trn_Enrollment_Attempt EAttempt ON EAttempt.EnrollmentId = PEnrollment.Patient_Enroll_ID  	WHERE PEnrollment.Patient_Enroll_ID = @EnrollmentId 	GROUP BY  	PEnrollment.Patient_Enroll_ID )"
dbo,USP_GetMHActivityOutcomeByActivityType," Create procedure [dbo].USP_GetMHActivityOutcomeByActivityType ( 	@ActivityType varchar(250) = '' ) AS BEGIN 	SET NOCOUNT ON; 	SELECT ID, ActivityOutcomeName,ActivityStatusID FROM MstMHActivityOutcome WHERE ActivityTypeCommaList LIKE '%'+ @ActivityType + '%' END -- EXEC USP_GetMHActivityOutcomeByActivityType 'CALL' -- SP_Recompile USP_GetMHActivityOutcomeByActivityType"
dbo,USP_GetMHCallOutcomeReasonList," Create procedure USP_GetMHCallOutcomeReasonList (@OutcomeID INT) AS BEGIN 	SELECT ID, OutcomeID, ReasonID,ReasonText,HasTextField,TextFieldLableName,HasReason 	FROM MstMHCallOutcomeReason  	WHERE OutcomeID = @OutcomeID END  -- EXEC USP_GetMHCallOutcomeReasonList 11"
dbo,USP_ReportMindHealthBilling," CREATE procedure USP_ReportMindHealthBilling ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME , 	@UserID INT = 0, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	With MindHealthBillingReportResult AS	( 	SELECT 		TRA.Patient_Activity_ID, 		TRA.DateOfService as DOS, 		MP.Patient_First_Name +' '+ MP.Patient_Last_Name as PatientFullName, 		MP.Patient_DOB , 	     TRA.CPT, 		DXT.DX, 		TRA.Activity_Assigned_To, 		MPH.PhysicianName as MD, 		FIG.PrimaryInsurance, 		FIG.SecondaryInsurance, 		FIG.TertiaryInsurance, 		FIG.PrimaryInsuranceIDNumber, 		FIG.SecondaryInsuranceIDNumber, 		FIG.TertiaryInsuranceIDNumber, 		U.User_First_Name + ' '+ U.User_Last_Name as BCMUsers 		FROM Trn_Patient_Activity TRA  		INNER JOIN Mst_Patient MP ON MP.Patient_ID = TRA.Patient_ID AND MP.Account_ID = @AccountID		 		INNER JOIN Mst_User U ON U.User_ID = TRA.Activity_Assigned_To 		LEFT JOIN Mst_Physician MPH ON MP.ReferringProviderId =MPH.ID  		CROSS APPLY funcGetDXCodeByPatientActivityId(TRA.Patient_Activity_ID) DXT 		CROSS APPLY funcGetInsuranceAndGroupIDByPatientId(TRA.Patient_ID) FIG 	WHERE TRA.IsSubmited = 1 AND TRA.IsBillable = 1  		AND (@UserID = 0 OR TRA.Activity_Assigned_To = @UserID) 		AND DateOfService >= @fromDate and DateOfService <= @toDate 		 	), 	OrderByResult AS (SELECT *, ROW_NUMBER() over (order BY  							case when @orderBy = 'DOS' and @orderDir = 'asc' then DOS end, 							case when @orderBy = 'DOS' and @orderDir = 'desc' then DOS end desc 		) AS RowNumber FROM MindHealthBillingReportResult  	)  	SELECT *, (Select Count(DOS) FROM MindHealthBillingReportResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  END  --exec USP_ReportMindHealthBilling 22,'31MAR2022','30APR2022',13  --select * from Mst_User"
dbo,USP_GetMHCallOutcomeReasonOptionsList," Create procedure USP_GetMHCallOutcomeReasonOptionsList (@OutcomeID INT,@ReasonID INT) AS BEGIN 	SELECT ID, OutcomeID, ReasonID, OptionID,OptionText,HasTextField,TextFieldLableName,HasReason 	FROM MstMHCallOutcomeReasonOptions  	WHERE OutcomeID = @OutcomeID AND ReasonID = @ReasonID END  -- EXEC USP_GetMHCallOutcomeReasonOptionsList 11"
dbo,USP_GetMonthlyPatientBillingDetails," CREATE procedure USP_GetMonthlyPatientBillingDetails ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME ) AS BEGIN 	SET NOCOUNT ON;  	SELECT  		BD.ID, 		P.Patient_ID, 		P.Patient_First_Name +' ' + P.Patient_Last_Name AS PatientFullName, 		P.Patient_DOB, 		BD.PatientActivityID, 		BD.ActivityType AS Activity_Name, 		BD.MonthOfService, 		BD.DateOfService, 		BD.SpentDuration, 		U.User_First_Name + ' ' + U.User_Last_Name AS AssignedUser, 		TBP.BillingCPTCode, 		TBP.AddOnCPTCode, 		TBP.PracticeName, 		TBP.SecondAddOnCode, 		EN.Discription AS NoteTypeName, 		P.PatientStatusId, 		MP.StatusName PatientStatusName, 		PA.EncounterDate, 		PA.EncounterStartTime, 		PA.EncounterEndTime, 		PR.BillingType, 		PR.BillingTime, 		PR.BillingTimeFees, 		TBP.PracticeBillingType, 		TBP.PracticeBillingTime, 		TBP.PracticeBillingFee, 		TBP.TotalCharges 	FROM TrnBillingProfile TBP 	INNER JOIN TrnPatientBillingDetail BD ON TBP.PatientID = BD.PatientID AND TBP.MonthOfService = BD.MonthOfService AND BD.IsDeleted =0 	INNER JOIN Mst_Patient P ON BD.PatientID = p.Patient_ID AND P.Account_ID = @AccountID 		AND (P.TypeOfReferral <> 1 OR P.TypeOfReferral IS NULL) -- Direct bill referral type patients should not listed in report as per requirement mentioned in ticket #5313 	INNER JOIN Mst_User U ON BD.ActivityAssignedTo = U.User_ID 	LEFT JOIN TrnPatientAssessmentLog PA ON BD.PatientActivityID = PA.PatientActivityID  	LEFT JOIN Mst_Enum EN ON PA.NoteType = EN.ID AND EN.EnumType='GenericNoteType'  	LEFT JOIN MstPatientStatuses MP ON MP.ID = P.PatientStatusId 	LEFT JOIN Mst_Practice PR ON TBP.PracticeName = PR.PracticeName 	WHERE BD.MonthOfService >= @fromDate and BD.MonthOfService <= @toDate 	ORDER BY PatientFullName, Patient_ID, BD.DateOfService END  "
dbo,USP_GetMstBillingCodes," CREATE PROCEDURE [dbo].[USP_GetMstBillingCodes] ( 	@IsFirstMonthService BIT, 	@Duration INT ) AS BEGIN 	SELECT ID 		,IsFirstMonthService 		,ActivityType 		,CPTCode 		,CPTFirstAddOn 		,CPTSecondAddOn 		,StartDuration 		,EndDuration 		,HasOnlyOneSession 		,HasRuralHealthPatient 		,InsuranceType 		,DxCode  	FROM MstBillingCodes 	WHERE IsFirstMonthService = @IsFirstMonthService  		AND @Duration >= StartDuration  AND @Duration<= EndDuration END  --EXEC USP_GetMstBillingCodes 1,55"
dbo,USP_GetMstRegion," Create Procedure USP_GetMstRegion AS BEGIN 	SELECT Distinct(Region) FROM Mst_RegionToCMSContact END  -- EXEC USP_GetMstRegion"
dbo,USP_GetMstTimezone," Create Procedure USP_GetMstTimezone AS BEGIN 	SELECT Distinct(Timezone),UTC +' - '+Description AS Description FROM Mst_TimeZone WHERE Timezone IS NOT NULL END  -- EXEC USP_GetMstTimezone"
dbo,USP_GetNewImportedClaimList," Create procedure USP_GetNewImportedClaimList AS BEGIN 	SELECT DISTINCT  		CI.NABP_NCPDP_NUMBER, 		CI.Pharmacy_NPI, 		CI.MBI, 		CI.rx_number, 		CI.service_date, 		NDC.NDC, 		CI.quantity, 		CI.days_supply, 		CI.REFILL_DUE_DATE, 		CI.MEMBER_COPAYMENT, 		CI.CLIENT_COST, 		CI.FORMULARY_INDICATOR, 		CI.Prescriber_NPI, 		CI.Prescriber_last_name, 		CI.Prescriber_first_name, 		CI.PRESCRIBER_ADDRESS1, 		CI.PRESCRIBER_ADDRESS2, 		CI.PRESCRIBER_CITY, 		CI.PRESCRIBER_STATE, 		CI.PRESCRIBER_ZIP_CODE, 		CI.Prescriber_phone, 		CI.DAW_CODE, 		CI.PART_D_DRUG_INDICATOR, 		P.Patient_ID, 		NDC.Med_ID, 		NDC.Strength_ID  	FROM Salutem_Temp.DBO.Claim_Import CI  	INNER JOIN Mst_Patient P ON CI.MBI=P.Patient_MRN AND P.Patient_Status=1 	-- Below join required to get med id and strength id 	-- Getting first 9 digit ndc only as per requirement 	-- if it is not a 9 digit then adding 0 at left position to make it 9 digit. 	INNER JOIN Mst_MedNDC NDC ON NDC.NDC = SUBSTRING((REPLICATE('0',11-LEN(SUBSTRING(CI.ndc,1,11))) + SUBSTRING(CI.ndc,1,11)),1,9)  	LEFT JOIN Trn_Patient_Med_Dosage PMD ON P.Patient_ID = PMD.Patient_ID AND CI.service_date=PMD.ServiceDate AND CI.rx_number=PMD.RxNumber  		AND PMD.Med_ID = NDC.Med_ID AND ISNULL(PMD.Med_Strength_ID,0) = ISNULL(NDC.Strength_ID,0) 	WHERE PMD.Patient_Dosage_ID IS NULL  	ORDER BY P.Patient_ID,REFILL_DUE_DATE,NDC,rx_number,service_date END"
dbo,USP_GetNewImportedMemberList," Create procedure USP_GetNewImportedMemberList AS BEGIN 	Select MP.MEMBER_MBI, 		MP.MEMBER_LAST_NAME, 		MP.MEMBER_FIRST_NAME, 		MP.MEMBER_GENDER, 		MP.MEMBER_DATE_OF_BIRTH, 		MP.MEMBER_MIDDLE_INITIAL, 		MP.MEMBER_ADDRESS1, 		MP.MEMBER_ADDRESS2, 		MP.MEMBER_CITY, 		MP.MEMBER_STATE, 		MP.MEMBER_ZIP_CODE, 		MP.MEMBER_PHONE_NUMBER, 		MP.MEMBER_SECONDARY_PHONE_NUMBER, 		MP.MEMBER_PRIMARY_LANGUAGE, 		MP.LIS_INDICATOR, 		MP.DISABLED_FLAG, 		MP.PLAN_EFFECTIVE_DATE, 		MP.TERM_DATE_FROM_PLAN, 		MP.CMR_FLAG, 		MP.CMS_CONTRACT_NUMBER, 		MP.CMS_PBP_NUMBER, 		MP.LTC_INDICATOR, 		MP.REASON_FOR_TERMINATION, 		MP.PCP_FIRST_NAME, 		MP.PCP_LAST_NAME, 		MP.PCP_PHONE, 		Round((Convert(float, MP.MAD_PDC_2021)*100),2) AS MAD_PDC_2021, 		Round((Convert(float, MP.MAH_PDC_2021)*100),2) AS MAH_PDC_2021, 		Round((Convert(float, MP.MAC_PDC_2021)*100),2) AS MAC_PDC_2021, 		MP.CLIENT_DEF_3 	From Salutem_Temp.dbo.Member_Import MP  	LEFT JOIN Mst_Patient P ON MP.Member_MBI = P.Patient_MRN  	WHERE P.Patient_MRN IS NULL AND P.Patient_ID IS NULL AND MP.MEMBER_LAST_NAME IS NOT NULL AND MP.MEMBER_FIRST_NAME IS NOT NULL END  --EXEC USP_GetNewImportedMemberList "
dbo,USP_GetNewImportedMHMembers," CREATE PROCEDURE USP_GetNewImportedMHMembers ( 	@AccountID INT ) AS BEGIN 	SELECT ISNULL(P.Patient_ID,0) Patient_ID 		,MH.MemberMRN 		,MH.Salutation 		,MH.LastName 		,MH.FirstName 		,MH.MiddleName 		,MH.Gender 		,MH.DateOfBirth 		,MH.TypeOfReferral 		,MH.ReasonForReferral 		,MH.PracticeName 		,MH.PracticePhone 		,MH.PracticeAddress 		,MH.BillingPOCName 		,MH.BillingPOCMail 		,MH.BillingPOCPhone 		,MH.PracticeManagerName 		,MH.PracticeManagerPhone 		,MH.PracticeManagerEmail 		,MH.EHRName 		,MH.PracticeType 		,MH.AssignedProgramManager 		,MH.BusinessDevelopmentManager 		,MH.ReferringProviderName 		,MH.ReferringProviderPhone 		,MH.ReferringProviderEmail 		,MH.Race 		,MH.IsSUD 		,MH.IsEligibleForCoCM 		,MH.PrimaryRelationWithContact 		,MH.PrimaryPatientContactPhone 		,MH.PrimaryPatientContactEmail 		,MH.PrimaryPatientContactName 		,MH.PrimaryPatientContactAddress1 		,MH.PrimaryPatientContactAddress2 		,MH.PrimaryPatientCity 		,MH.PriamaryPatientState 		,MH.PrimaryPatientZipCode 		,MH.SecondaryRelationWithContact 		,MH.SecondaryPatientContactPhone 		,MH.SecondaryPatientContactEmail 		,MH.SecondaryPatientContactName 		,MH.SecondaryPatientContactAddress1 		,MH.SecondaryPatientContactAddress2 		,MH.SecondaryPatientCity 		,MH.SecondaryPatientState 		,MH.SecondaryPatientZipCode 		,MH.PrimaryInsuranceType 		,MH.PrimaryInsuranceState 		,MH.PrimaryInsuranceName 		,MH.PrimaryInsuranceIDNumber 		,MH.PrimaryInsuranceGroupNumber 		,MH.PrimaryInsuranceStartDate 		,MH.PrimaryInsuranceEndDate 		,MH.SecondaryInsuranceType 		,MH.SecondaryInsuranceState 		,MH.SecondaryInsuranceName 		,MH.SecondaryInsuranceIDNumber 		,MH.SecondaryInsuranceGroupNumber 		,MH.SecondaryInsuranceStartDate 		,MH.SecondaryInsuranceEndDate 		,MH.TertiaryInsuranceType 		,MH.TertiaryInsuranceState 		,MH.TertiaryInsuranceName 		,MH.TertiaryInsuranceIDNumber 		,MH.TertiaryInsuranceGroupNumber 		,MH.TertiaryInsuranceStartDate 		,MH.TertiaryInsuranceEndDate 	FROM MHMemberTable MH  	LEFT JOIN Mst_Patient P ON MH.MemberMRN = P.Patient_MRN --AND P.Account_ID = @AccountID 	WHERE P.Patient_ID IS NULL END  --EXEC USP_GetNewImportedMHMembers 22 --SELECT * FROM Sys.tables WHERE name='MHMemberTable' --SELECT * FROM Sys.all_columns WHERE object_id='1020086595' "
dbo,USP_GetNextCloseRefillDate," Create procedure USP_GetNextCloseRefillDate ( 	@PatientID INT, 	@ActivityDate DATETIME, 	@DaysBefore INT  ) AS  BEGIN 	SELECT TOP 1 Patient_Dosage_ID,Refill_Next_Date,DaysSupply 	FROM Trn_Patient_Med_Dosage WHERE Patient_ID=@PatientID  		AND Refill_Next_Date>=GETDATE() -- getting only future refill date medicines only 		AND Patient_Dosage_Prescribed_Status = 1 -- All Active medicines only 		AND Refill_Next_Date >=  @ActivityDate 		AND Refill_Next_Date <= DATEADD(D, @DaysBefore, @ActivityDate) 	ORDER BY Refill_Next_Date,DaysSupply END  --EXEC USP_GetNextCloseRefillDate '13Feb2023',10"
dbo,USP_GetPatientActivityDetails," Create procedure USP_GetPatientActivityDetails (@PatientActivityId INT) AS BEGIN 	SET NOCOUNT ON 	Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		TPA.Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		TPA.Activity_Actual_End_Time, 		TPA.Activity_Assigned_To, 		(CASE WHEN MU.User_ID IS NOT NULL THEN MU.User_First_Name + ' ' + MU.User_Last_Name ELSE '' END) AS Activity_Assigned_To_Name, 		TPA.Activity_Note, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		TPA.Activity_Delay_Note, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		PAA.AttemptNumber AS AttemptNumber, 		TPA.LastCallOutcomeName, 		ActivityOutcomeName, 		TPA.IsImmediateActionRequired 	From Trn_Patient_Activity TPA  	INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID 	INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID 	INNER JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN View_PatientActivityAttempt PAA ON PAA.Patient_Activity_ID = TPA.Patient_Activity_ID 	LEFT JOIN Trn_Activity_Attempt TAA ON TPA.Patient_Activity_ID = TAA.Patient_Activity_ID AND TAA.AttemptNumber = PAA.AttemptNumber 	LEFT JOIN Mst_User MU ON MU.User_ID = TPA.Activity_Assigned_To 	WHERE TPA.Patient_Activity_ID = @PatientActivityId END -- EXEC USP_GetPatientActivityDetails 1220"
dbo,USP_GetPatientActivityGenericNoteDetails," Create procedure USP_GetPatientActivityGenericNoteDetails  ( 	@PatientActivityID int = 0 ) AS BEGIN 	SET NOCOUNT ON 	BEGIN 		IF EXISTS (SELECT ID FROM TrnPatientAssessmentLog WHERE PatientActivityID = @PatientActivityId) 		BEGIN 			Select 				TPA.AssessmentID, 				P.Patient_First_Name +' '+ P.Patient_Last_Name AS PatientFullName, 				P.Patient_DOB, 				TPA.Patient_Activity_ID, 				TPA.Patient_ID, 				TPA.Activity_ID, 				TPA.SpentTimeInMinutes, 				PA.NoteType, 				PA.NoteTypeOtherText, 				TPA.Activity_Start_Status, 				PA.GenNoteDiscription, 				TPA.ActivityOutcome, 				PA.ActivityTypeAssociated, 				PA.GenNoteMonthOfService, 				PA.AssociatedPatientActivityID 			From Trn_Patient_Activity TPA 			INNER JOIN TrnPatientAssessmentLog PA ON TPA.Patient_Activity_ID = PA.PatientActivityID 			INNER JOIN Mst_Patient P ON TPA.Patient_ID = P.Patient_ID 			WHERE TPA.Patient_Activity_ID = @PatientActivityId 		END 		ELSE 		BEGIN 			Select 				TPA.AssessmentID, 				P.Patient_First_Name +' '+ P.Patient_Last_Name AS PatientFullName, 				P.Patient_DOB, 				TPA.Patient_Activity_ID, 				TPA.Patient_ID, 				TPA.Activity_ID, 				TPA.SpentTimeInMinutes, 				0 AS NoteType, 				'' AS NoteTypeOtherText, 				TPA.Activity_Start_Status, 				'' AS GenNoteDiscription, 				TPA.ActivityOutcome, 				'' AS ActivityTypeAssociated, 				null AS GenNoteMonthOfService, 				0 AS AssociatedPatientActivityID 			From Trn_Patient_Activity TPA 			INNER JOIN Mst_Patient P ON TPA.Patient_ID = P.Patient_ID 			WHERE TPA.Patient_Activity_ID = @PatientActivityId 		END 	END  END 	--EXEC USP_GetPatientActivityGenericNoteDetails 3179"
dbo,USP_GetPatientAdditionalAllergiesDetails," create procedure [dbo].[USP_GetPatientAdditionalAllergiesDetails] ( 	@PatientID int, 	@AssessmentID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT  		TPAA.ID, 		Coalesce(TPAA.PatientID,@PatientID,0) AS PatientID, 		Coalesce(TPAA.AssessmentID,@AssessmentID,0) AS AssessmentID, 		TPAA.AllergyID, 		MA.Allerg_Name, 		TPAA.IsDeleted  	FROM TrnPatientAssessmentAllergies TPAA 	INNER JOIN Mst_Allergies MA ON MA.Allergy_ID = TPAA.AllergyID 	WHERE 	TPAA.PatientID=@PatientID AND TPAA.AssessmentID= @AssessmentID  	AND TPAA.IsDeleted = 0 	END 	ELSE 	BEGIN 		SELECT  		TPAA.ID, 		Coalesce(TPAA.PatientID,@PatientID,0) AS PatientID, 		Coalesce(TPAA.AssessmentID,@AssessmentID,0) AS AssessmentID, 		TPAA.AllergyID, 		MA.Allerg_Name, 		TPAA.IsDeleted  	FROM TrnPatientAssessmentAllergiesLog TPAA 	INNER JOIN Mst_Allergies MA ON MA.Allergy_ID = TPAA.AllergyID 	WHERE 	TPAA.PatientID=@PatientID AND TPAA.AssessmentID= @AssessmentID  	AND TPAA.IsDeleted = 0 	AND TPAA.PatientActivityID = @PatientActivityID 	END END  -- EXEC USP_GetPatientAdditionalAllergiesDetails 1255, 2"
dbo,Job_DischargeLogRemoveAfterDays," CREATE PROCEDURE Job_DischargeLogRemoveAfterDays AS BEGIN 	SET NOCOUNT ON; 	DECLARE @EnrollMstActivityID int; 	SET @EnrollMstActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'EnrollPatient'); 	DECLARE @DischargeActivityID int; 	SET @DischargeActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'DischargeInfo'); 	SELECT 			IPL.Patient_ID, 			patient.Patient_MRN, 			IPL.InPatientLogId,			 			IPL.DischargeDate, 			DATEDIFF(DAY, IPL.DischargeDate, GETDATE()) AS DisachargeDays,			 			TPA.Patient_Activity_ID, 			TPA.Activity_Assigned_To, 			TPA.CallBackDate, 			TPA.LastAttemptDate, 			TPA.AttemptNumber, 			TPA.Activity_Start_Status 		FROM Trn_InPatientLog IPL with (nolock) 		INNER JOIN dbo.Mst_Patient patient with (nolock) ON patient.Patient_ID = IPL.Patient_ID AND patient.Account_ID IN (SELECT Account_ID FROM Mst_Account WHERE AccountType = 2)		 		INNER JOIN Trn_Patient_Activity TPA ON TPA.Patient_ID = IPL.Patient_ID AND TPA.InPatientLogId = IPL.InPatientLogId AND (TPA.Activity_ID = @DischargeActivityID OR TPA.Activity_ID = @EnrollMstActivityID) 		WHERE (patient.Patient_Status = 1 				AND (IPL.IsDischargeSummary = 1 AND IPL.IsDischargeDate = 1 AND IPL.DischargeDate IS NOT NULL) -- patient has discharged and Post folloup checked 				AND DATEDIFF(DAY, IPL.DischargeDate, GETDATE()) > 15) --drop from Discharge log on day 15 past discharge date END  --EXEC Job_DischargeLogRemoveAfterDays"
dbo,USP_GetPatientAssessmentDetails," create procedure [dbo].[USP_GetPatientAssessmentDetails] ( 	@Patient_ID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT PA.AssessmentID 		,PA.PatientID 		,PA.ConsentToProgram 		,PA.ConsentToProgramReason 		,MAE.Discription AS DispalyConsentToProgramReason 		,PA.ConsentToProgramOtherReason 		,PA.HPIPresentingConcerns 		,PA.SMHCurrentConditions 		,PA.SMHCurrentConditionsOtherText 		,PA.SMHHasAllergies 		,PA.SMHCurrentPainScale 		,PA.SMHCurrentPainScaleOtherText 		,PA.SMHHasAssistiveDevices 		,PA.SMHAllergiesOtherText 		,PA.SMHAssistiveDevicesOtherText 		,PA.HasCurrentPsychotropicMedication 		,PA.HasOtherPsychotropicMedication 		,PA.OtherPsychotropicMedicationComment         ,PA.PlanEnumValue 		,PA.OtherPlan 		,PA.DeclinesPlanEnumValue 		,PA.DeclinesPlanOther 		,PA.PlanComment 		,PA.SessionSummary 		,PA.PatientGoals 		,PA.HasFollowUpScheduled 		,PA.FollowUpDate 		,PA.FollowUpTime 		,PA.FollowUpClinicianID 		,PA.FollowUpNoText 		,PA.FollowUpType 		,PA.OtherFollowUpType 		,PA.CliniciansName 		,PA.EncounterTitle 		,PA.EncounterDate 		,PA.EncounterStartTime 		,PA.EncounterEndTime 		,PA.ProgramType 		,PA.GroupTopic 		,PA.PatientContributionsSession 		,PA.NoteTitle 		,PA.ExplanationofNote 		,PA.NextSteps 		,PA.ReasonForPsychConsult 		,PA.CaseStatus 		,PA.CasePriority 		,PA.PsychConsultNoteSummary 		,PA.PsychConsultRecommendations 		,PA.PsychConsultRationale 		,PA.NoteType 		,PA.NoteTypeOtherText 		,PA.GuardianConsentToProgram 		,PA.Attendance 		,PA.AttendanceOption 		,PA.AttendanceOptionReason 	FROM TrnPatientAssessment PA INNER JOIN Mst_Patient P ON PA.PatientID=P.Patient_ID AND PA.AssessmentID = P.AssessmentID 	LEFT JOIN MstAssessmentEnum MAE ON MAE.EnumValue = PA.ConsentToProgramReason AND MAE.EnumType = 'ConsentToProgramReason' 	WHERE PA.PatientID = @Patient_ID 	END 	ELSE 	BEGIN 		SELECT PA.AssessmentID 		,PA.PatientID 		,PA.ConsentToProgram 		,PA.ConsentToProgramReason 		,MAE.Discription AS DispalyConsentToProgramReason 		,PA.ConsentToProgramOtherReason 		,PA.HPIPresentingConcerns 		,PA.SMHCurrentConditions 		,PA.SMHCurrentConditionsOtherText 		,PA.SMHHasAllergies 		,PA.SMHCurrentPainScale 		,PA.SMHCurrentPainScaleOtherText 		,PA.SMHHasAssistiveDevices 		,PA.SMHAllergiesOtherText 		,PA.SMHAssistiveDevicesOtherText 		,PA.HasCurrentPsychotropicMedication 		,PA.HasOtherPsychotropicMedication 		,PA.OtherPsychotropicMedicationComment         ,PA.PlanEnumValue 		,PA.OtherPlan 		,PA.DeclinesPlanEnumValue 		,PA.DeclinesPlanOther 		,PA.PlanComment 		,PA.SessionSummary 		,PA.PatientGoals 		,PA.HasFollowUpScheduled 		,PA.FollowUpDate 		,PA.FollowUpTime 		,PA.FollowUpClinicianID 		,PA.FollowUpNoText 		,PA.FollowUpType 		,PA.OtherFollowUpType 		,PA.CliniciansName 		,PA.EncounterTitle 		,PA.EncounterDate 		,PA.EncounterStartTime 		,PA.EncounterEndTime 		,PA.ProgramType 		,PA.GroupTopic 		,PA.PatientContributionsSession 		,PA.NoteTitle 		,PA.ExplanationofNote 		,PA.NextSteps 		,PA.ReasonForPsychConsult 		,PA.CaseStatus 		,PA.CasePriority 		,PA.PsychConsultNoteSummary 		,PA.PsychConsultRecommendations 		,PA.PsychConsultRationale 		,PA.NoteType 		,PA.NoteTypeOtherText 		,PA.GuardianConsentToProgram 		,PA.Attendance 		,PA.AttendanceOption 		,PA.AttendanceOptionReason 	FROM TrnPatientAssessmentLog PA 	LEFT JOIN MstAssessmentEnum MAE ON MAE.EnumValue = PA.ConsentToProgramReason AND MAE.EnumType = 'ConsentToProgramReason' 	WHERE PA.PatientID = @Patient_ID AND PA.PatientActivityID = @PatientActivityID 	END END"
dbo,SP_ActivityCallOutcomes," Create procedure SP_ActivityCallOutcomes (@ActivityTypeId INT) AS BEGIN 	Select  		MAAS.ID, 		MAAS.ActivityTypeID,  		MAAS.ActivityOutcomeID, 		MAAS.AttemptStatusID, 		MAAS.ActivityStatusID, 		MCO.CallOutcome, 		MCO.Priority, 		MAA.AttemptName, 		MAS.ActivityStatusName 	From Mst_ActivityAttemptStatus MAAS 	INNER JOIN Mst_CallOutcome MCO ON MAAS.ActivityOutcomeID = MCO.ID 	INNER JOIN Mst_ActivityAttempt MAA ON MAAS.AttemptStatusID = MAA.ID 	INNER JOIN Mst_ActivityStatus MAS ON MAAS.ActivityStatusID = MAS.ID 	WHERE @ActivityTypeId = 0 OR MAAS.ActivityTypeId = @ActivityTypeId END"
dbo,USP_GetPatientAssessmentDetailsForProgressNote,"  create procedure [dbo].[USP_GetPatientAssessmentDetailsForProgressNote] (    @Patient_ID int,    @PatientActivityID int = 0   ) AS   BEGIN       SELECT PA.AssessmentID     ,PA.PatientID     ,PA.ConsentToProgram     ,PA.ConsentToProgramReason     ,PA.ConsentToProgramOtherReason     ,PA.HasFollowUpScheduled     ,PA.FollowUpDate     ,PA.FollowUpTime     ,PA.FollowUpClinicianID     ,PA.FollowUpNoText     ,PA.FollowUpType     ,PA.OtherFollowUpType     ,PA.CliniciansName     ,PA.EncounterTitle     ,PA.EncounterDate     ,PA.EncounterStartTime     ,PA.EncounterEndTime     ,PA.HPIPresentingConcerns     ,PA.SessionSummary     ,PA.GroupTopic     ,PA.PatientContributionsSession     ,PA.NoteTitle     ,PA.ExplanationofNote     ,PA.NextSteps     ,PA.NoteType     ,PA.NoteTypeOtherText   ,PA.Attendance   ,PA.AttendanceOption   ,PA.AttendanceOptionReason  FROM TrnPatientAssessmentLog PA   LEFT JOIN MstAssessmentEnum MAE ON MAE.EnumValue = PA.ConsentToProgramReason AND MAE.EnumType = 'ConsentToProgramReason'      WHERE PA.PatientID = @Patient_ID AND PA.PatientActivityID = @PatientActivityID       END"
dbo,SP_ActivityProgress," Create procedure SP_ActivityProgress (@PatientId INT, @AccountId INT) AS BEGIN     DECLARE @IsEnroll int = (select  [dbo].[func_IsPatientEnrolled](@PatientId, 0)); 	DECLARE @AccountType INT = (SELECT AccountType FROM Mst_Account WHERE Account_ID = @AccountId) 	IF @AccountType = 1 -- For Payor Flow (It should be map with AccountType Enum) 	BEGIN  		 		DECLARE @CurrentYearEnrollmentID INT = (SELECT PatientEnrollmentId FROM Mst_Patient WHERE Patient_ID = @PatientId)  		SELECT 1 Activity_ID, 'Enrollment' AS  Activity_Name, 'EnrollPatient' AS ActivityType, @IsEnroll AS IsCompleted, 1 AS SequenceNumber 		UNION 		SELECT Distinct ma.Activity_ID, ma.Activity_Name,ma.ActivityType, (Case WHEN Coalesce(tpa.Activity_Start_Status, 1) = 3 THEN 1 ELSE 0 END)  AS IsCompleted, ma.SequenceNumber 		From  Mst_Activity AS ma 		INNER JOIN Mst_AccountActivity MAA ON MAA.ActivityType=ma.ActivityType AND ma.Activity_Status = 1 		LEFT JOIN Trn_Patient_Activity AS tpa ON ma.Activity_ID = tpa.Activity_ID  			and Patient_ID = @PatientId AND tpa.Patient_Enroll_ID = @CurrentYearEnrollmentID 			AND tpa.Activity_Status = 1 		WHERE MAA.AccountTypeId = @AccountType AND ma.ActivityType not in ('EnrollPatient', 'PDCReview') 		ORDER BY SequenceNumber 	END  	ELSE 	BEGIN  		SELECT Distinct ma.Activity_ID, ma.Activity_Name,ma.ActivityType, (Case WHEN Coalesce(tpa.Activity_Start_Status, 1) = 3 THEN 1 ELSE 0 END)  AS IsCompleted, ma.SequenceNumber 		From  Mst_Activity AS ma 		INNER JOIN Mst_AccountActivity MAA ON MAA.ActivityType=ma.ActivityType AND ma.Activity_Status = 1 		LEFT JOIN Trn_Patient_Activity AS tpa ON ma.Activity_ID = tpa.Activity_ID and Patient_ID = @PatientId 			AND tpa.Activity_Status = 1 		WHERE MAA.AccountTypeId = @AccountType AND ma.ActivityType != 'PDCReview' 		ORDER BY SequenceNumber 	END END -- EXEC SP_ActivityProgress 3, 5"
dbo,USP_GetPatientBehavioralHealthHistoryDetails," create procedure [dbo].[USP_GetPatientBehavioralHealthHistoryDetails] ( 	@PatientID int, 	@AssessmentID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT BHL.ID AS MstBHID, 		BHL.BehavioralName,  		BHL.BehavioralTypeID,  		ISNULL(BHH.ID,0) AS ID,  		Coalesce(BHH.PatientID,@PatientID,0) AS PatientID, 		Coalesce(BHH.AssessmentID,@AssessmentID,0) AS AssessmentID 		,ISNULL(BHH.BehavioralHealthID,0) AS BehavioralHealthID, 		BHH.YearDiagnosed,  		BHH.TreatmentPlace,  		BHH.TreatmentDate, 		BHH.IsDeleted 	FROM MstBehavioralHealthList BHL 	LEFT JOIN Trn_BehavioralHealthHistory BHH ON BHL.ID = BHH.BehavioralHealthID  	AND BHH.PatientID=@PatientID AND BHH.AssessmentID= @AssessmentID 	END 	ELSE 	BEGIN 		SELECT BHL.ID AS MstBHID, 		BHL.BehavioralName,  		BHL.BehavioralTypeID,  		ISNULL(BHH.ID,0) AS ID,  		Coalesce(BHH.PatientID,@PatientID,0) AS PatientID, 		Coalesce(BHH.AssessmentID,@AssessmentID,0) AS AssessmentID 		,ISNULL(BHH.BehavioralHealthID,0) AS BehavioralHealthID, 		BHH.YearDiagnosed,  		BHH.TreatmentPlace,  		BHH.TreatmentDate, 		BHH.IsDeleted 	FROM MstBehavioralHealthList BHL 	LEFT JOIN Trn_BehavioralHealthHistoryLog BHH ON BHL.ID = BHH.BehavioralHealthID  	AND BHH.PatientID=@PatientID AND BHH.AssessmentID= @AssessmentID AND BHH.PatientActivityID = @PatientActivityID 	END END  -- EXEC USP_GetPatientBehavioralHealthHistoryDetails 1255, 2"
dbo,SP_AuditTrail_ConsultDetails," CREATE procedure SP_AuditTrail_ConsultDetails ( 	@AccountId INT, 	@ActivityID INT, 	@pccId INT, 	@status INT, 	@CreatedByUserId int, 	@UpdatedByUserId int, 	@fromDate Datetime =null, 	@toDate Datetime =null, 	@UpdatedFromDate Datetime =null, 	@UpdatedToDate Datetime =null, 	@search nvarchar(50) = '', 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@PageSize int = 999999999 	 ) AS BEGIN With ConsultDetailsResult AS	(SELECT  			patient.Patient_MRN, 			patient.Patient_ID, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			patient.Patient_Contact_State, 			patient.CMS_Contract_Number, 			PA.Patient_Activity_ID, 			ME.EnumValue AS Activity_Start_Status, 			Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date) AS Activity_Date, 			PA.Activity_Assigned_To, 			U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName, 			(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 				THEN (Select Mst_Enum.Discription FROM Mst_Enum WHERE Mst_Enum.EnumType = 'PharmacistConsult'  				AND Mst_Enum.EnumValue = PA.ActivityOutcome) ELSE  MENUM.Discription END) AS ActivityName, 			PA.Activity_CretaedAt, 			PA.Activity_CreatedBy, 			usr.User_First_Name+ ' ' + usr.User_Last_Name AS CreatedByName, 			PA.Activity_UpdatedAt, 			PA.Activity_UpdatedBy, 			usrs.User_First_Name+ ' ' + usrs.User_Last_Name AS UpdatedByName 			FROM Trn_Patient_Activity PA 		INNER JOIN View_Mst_Patient patient ON PA.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountId 		INNER JOIN Mst_Enum ME ON Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue  			AND	ME.EnumType='PharmacistConsult' 		INNER JOIN Mst_Enum MENUM ON Coalesce(PA.Activity_Start_Status, 1) = MENUM.EnumValue  			AND	MENUM.EnumType='ActivityStatus' 		INNER JOIN Mst_User usr ON PA.Activity_CreatedBy = usr.User_ID 		LEFT JOIN  			Trn_Patient_Contact patientContact ON patient.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  		LEFT JOIN Mst_User U ON U.User_ID = PA.Activity_Assigned_To                 --AND ME.EnumType = 'ActivityStatus' 		LEFT JOIN Mst_User usrs ON PA.Activity_UpdatedBy = usrs.User_ID 		WHERE ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 			OR Patient_MRN LIKE '%' + @search + '%' 			OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%')  		AND (@CreatedByUserId = 0 OR PA.Activity_CreatedBy = @CreatedByUserId) 			AND (@UpdatedByUserId = 0 OR PA.Activity_UpdatedBy = @UpdatedByUserId) 			AND(               (@fromDate IS NULL  OR CONVERT(Date,PA.Activity_CretaedAt)  >= @fromDate)                   AND (@toDate IS NULL OR CONVERT(Date,PA.Activity_CretaedAt) <= @toDate)               ) 		AND(           (@UpdatedFromDate IS NULL  OR CONVERT(Date,PA.Activity_UpdatedAt)  >= @UpdatedFromDate)               AND (@UpdatedToDate IS NULL OR CONVERT(Date,PA.Activity_UpdatedAt) <= @UpdatedToDate)           ) 			AND (@pccId = 0 OR PA.Activity_Assigned_To = @pccId) 			AND (@status = 0 OR Coalesce(PA.ActivityOutcome, 0) = @status) 			AND PA.Activity_ID = @ActivityID 	), 	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Date' and @orderDir = 'asc' then Activity_Date end, 								case when @orderBy = 'Activity_Date' and @orderDir = 'desc' then Activity_Date end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'asc' then Patient_Contact_State end, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'desc' then Patient_Contact_State end desc, 								 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc,  								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc, 								case when @orderBy = 'ActivityName' and @orderDir = 'asc' then ActivityName end, 								case when @orderBy = 'ActivityName' and @orderDir = 'desc' then ActivityName end desc 								 								 			) AS RowNumber FROM ConsultDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ConsultDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) END"
dbo,USP_GetPatientCommunicationDetails," CREATE procedure USP_GetPatientCommunicationDetails (@PatientActivityID INT) AS BEGIN 	SELECT   		P.Patient_ID, 		P.Patient_First_Name + ' ' + P.Patient_Last_Name AS PatientFullName, 		P.Patient_DOB, 		TS.PatientStatusId, 		TS.PatientStatusReasonId, 		TS.PatientStatusOtherText, 		TS.PatientStatusReasonOptionId, 		TS.PatientStatusReasonOptionOtherText, 		TS.MHInsuranceId, 		TS.MHInsuranceName, 		P.PatientStatusDate, 		PA.Patient_Activity_ID, 		PA.Activity_ID, 		PA.Activity_Start_Status, 		PA.Activity_Note, 		PA.SpentTimeInMinutes, 		PA.IsBillable, 		PA.TypeOfCommunication 		,PS.StatusName AS DispalyPatientStatus 		,LastCallOutcomeName 		,PR.ReasonText AS DisplayPatientStatusReason 		,PO.OptionText AS DisplayPatientStatusReasonOption 		,PS.OtherTextLableName  AS  PatientStatusesOtherTextLableName 		,PA.TypeOfCommunicationName 	FROM Mst_Patient P  	INNER JOIN Trn_Patient_Activity PA ON P.Patient_ID = PA.Patient_ID	 	LEFT JOIN TrnPatientStatusLog TS ON TS.PatientID = PA.Patient_ID AND TS.PatientActivityID = PA.Patient_Activity_ID 	LEFT JOIN MstPatientStatuses PS ON PS.StatusID = TS.PatientStatusId 	LEFT JOIN MstPatientStatusReasons PR ON PR.StatusId = PS.StatusID AND PR.ReasonId = TS.PatientStatusReasonId 	LEFT JOIN MstPatientStatusReasonsOptions PO ON PO.StatusID = TS.PatientStatusId AND PO.ReasonID = TS.PatientStatusReasonId AND PO.OptionID = TS.PatientStatusReasonOptionId 	WHERE PA.Patient_Activity_ID = @PatientActivityID 	 END  --exec USP_GetPatientCommunicationDetails 5476"
dbo,SP_AuditTrail_ConversionQueue," CREATE procedure [dbo].[SP_AuditTrail_ConversionQueue] ( 	@AccountId INT, 	@CreatedByUserId INT, 	@UpdatedByUserId INT, 	@fromDate DATETIME =null, 	@toDate DATETIME =null, 	@UpdatedFromDate DATETIME =null, 	@UpdatedToDate DATETIME =null, 	@search NVARCHAR(50) = '', 	@orderBy NVARCHAR(50) = 'CreatedOn',  	@orderDir NVARCHAR(4) = 'asc',  	@pageIndex INT = 0,  	@PageSize INT = 999999999, 	@filterBy VARCHAR(100) = '' 	 ) AS BEGIN DECLARE @HomeVisit1ActivityID int SET @HomeVisit1ActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'HomeVisit' AND ActivityNumber = 1);  With ConversionQueueResult AS ( 	SELECT  		V.Patient_ID, 		V.Account_ID, 		V.Account_Name, 		V.Patient_First_Name, 		V.Patient_Middle_Name, 		V.Patient_Last_Name, 		(V.Patient_First_Name + ' ' + V.Patient_Last_Name) AS PatientFullName, 		V.Patient_MRN, 		V.Patient_Contact_ID, 		V.Patient_Contact_name, 		V.Patient_Relation_ID, 		V.Patient_Contact_Phone, 		V.Patient_Contact_email, 		V.Patient_Contact_State, 		PC.ID AS PatientConversionId, 		Coalesce(PC.RxHomeDelivery, 0) AS RxHomeDelivery, 		PC.RxEnrollmentDate, 		PC.CreatedBy, 		PC.CreatedOn, 		PC.UpdatedOn, 		PC.UpdatedBy, 		PC.ConversionStatus AS ConversionStatusID, 		EN.Discription AS ConversionStatus, 		usr.User_First_Name+ ' ' + usr.User_Last_Name AS CreatedByName, 		users.User_First_Name+ ' ' + users.User_Last_Name AS UpdatedByName, 		PC.RAComplete, 		PC.TransferRequest, 		PC.IsCompleted, 		PC.ViewPageNo 	FROM Trn_Patient_Conversion PC 	INNER JOIN View_Mst_Patient V ON V.Patient_ID = PC.PatientId AND V.Account_ID = @AccountId 	INNER JOIN Trn_Patient_Activity TPA ON PC.PatientId = TPA.Patient_ID AND TPA.Activity_ID = @HomeVisit1ActivityID 	INNER JOIN Mst_User usr ON PC.CreatedBy = usr.User_ID 	LEFT JOIN Mst_Enum EN ON (Coalesce(PC.ConversionStatus, 1)) = EN.EnumValue AND EN.EnumType = 'ActivityStatus' 	 	LEFT JOIN Mst_User users ON PC.UpdatedBy = users.User_ID 	WHERE  (Coalesce(PC.RxHomeDelivery, 0) = 1) 	--Searching on following feilds 	AND ( (V.Patient_First_Name + ' ' + V.Patient_Last_Name)  LIKE '%' + @search + '%' OR V.Patient_MRN LIKE '%' + @search + '%' OR V.Patient_Contact_Phone LIKE '%' + @search + '%') 	AND (@CreatedByUserId = 0 OR PC.CreatedBy = @CreatedByUserId) 	AND (@UpdatedByUserId = 0 OR PC.UpdatedBy = @UpdatedByUserId) 	AND(               (@fromDate IS NULL  OR CONVERT(Date,PC.CreatedOn)  >= @fromDate)                   AND (@toDate IS NULL OR CONVERT(Date,PC.CreatedOn) <= @toDate)   		) 	AND(           (@UpdatedFromDate IS NULL  OR CONVERT(Date,PC.UpdatedOn)  >= @UpdatedFromDate)               AND (@UpdatedToDate IS NULL OR CONVERT(Date,PC.UpdatedOn) <= @UpdatedToDate)           ) 	AND (@filterBy = ''  				OR (ISNULL(PC.ConversionStatus, 1) in (SELECT * FROM dbo.func_Split(@filterBy, ','))) 		) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'RxEnrollmentDate' and @orderDir = 'asc' then RxEnrollmentDate end, 								case when @orderBy = 'RxEnrollmentDate' and @orderDir = 'desc' then RxEnrollmentDate end desc, 								case when @orderBy = 'UpdatedOn' and @orderDir = 'asc' then CreatedOn end, 								case when @orderBy = 'UpdatedOn' and @orderDir = 'desc' then CreatedOn end desc, 								case when @orderBy = 'UpdatedByName' and @orderDir = 'asc' then UpdatedByName end, 								case when @orderBy = 'UpdatedByName' and @orderDir = 'desc' then UpdatedByName end desc 								 			) AS RowNumber FROM ConversionQueueResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ConversionQueueResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) 		 END  --EXEC SP_GetConversionQueue"
dbo,USP_GetPatientCurrentPsychotropicMedicationsDetails," create procedure [dbo].[USP_GetPatientCurrentPsychotropicMedicationsDetails] ( 	@PatientID int, 	@AssessmentID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT  		PastPsychotropicID 		,PatientID 		,AssessmentID 		,BehavioralHealthID 		,PPM.Med_ID 		,Med_Strength_ID 		,Frequency 		,MM.Med_Name 		,PPM.CurrentMedicationComment 		,MMS.Med_Strength 		,PPM.IsDeleted 	FROM Trn_PastPsychotropicMedications PPM 	INNER JOIN Mst_Medicine MM ON PPM.Med_ID = MM.Med_ID 	LEFT JOIN Mst_Med_Strength MMS ON PPM.Med_Strength_ID = MMS.ID 	WHERE PPM.PatientID=@PatientID AND PPM.AssessmentID= @AssessmentID 	AND PPM.IsDeleted = 0 AND PPM.IsCurrentMedicine = 1 	END 	ELSE 	BEGIN 		SELECT  		PastPsychotropicID 		,PatientID 		,AssessmentID 		,BehavioralHealthID 		,PPM.Med_ID 		,Med_Strength_ID 		,Frequency 		,MM.Med_Name 		,PPM.CurrentMedicationComment 		,MMS.Med_Strength 		,PPM.IsDeleted 		,PPM.PatientActivityID 	FROM Trn_PastPsychotropicMedicationsLog PPM 	INNER JOIN Mst_Medicine MM ON PPM.Med_ID = MM.Med_ID 	LEFT JOIN Mst_Med_Strength MMS ON PPM.Med_Strength_ID = MMS.ID 	WHERE PPM.PatientID=@PatientID AND PPM.AssessmentID= @AssessmentID 	AND PPM.IsDeleted = 0 AND PPM.IsCurrentMedicine = 1 AND PPM.PatientActivityID = @PatientActivityID 	END END -- EXEC USP_GetPatientCurrentPsychotropicMedicationsDetails 19290, 1007,4145"
dbo,SP_AuditTrail_EnrollmentQueue," Create procedure [DBO].SP_AuditTrail_EnrollmentQueue ( 	@userId INT, 	@AccountId INT, 	@CreatedByUserId int, 	@UpdatedByUserId int, 	@fromDate Datetime, 	@toDate Datetime, 	@UpdatedFromDate Datetime = null, 	@UpdatedToDate Datetime = null, 	@search nvarchar(50) = '', 	@pccId int, 	@status int, 	@orderBy nvarchar(50) = 'CreatedOn',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	SET NOCOUNT ON; 	Declare @UpdatedToDateDayEnd DateTime; 	IF @UpdatedToDate IS NULL  		SET  @UpdatedToDateDayEnd = GETDATE() 	ELSE 		SET  @UpdatedToDateDayEnd = DATEADD(DAY,1, @UpdatedToDate);--Adding 1 day in current passed date to get filter record upto end of the day.  	With SP_AuditTrailEnrollmentQueue AS (   	SELECT              patient.Patient_MRN, 			patient.Account_Name, 			patient.Patient_ID, 			Patient_Enrollment_Status, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			patient.Patient_Contact_State, 			patient.CMS_Contract_Number, 			patient.Patient_Contact_Phone, 			PE.Patient_Enroll_ID, 			PE.CreatedOn, 			PE.CreatedBy, 			PE.UpdatedOn, 			PE.UpdatedBy, 			PE.EnrollmentDate, 			Usr.User_First_Name + ' ' + Usr.User_Last_Name AS CreatedByName, 			Usrs.User_First_Name + ' ' + Usrs.User_Last_Name AS UpdatedByName, 			Coalesce(EA.AttemptNumber, 0) AttemptNumber, 			Coalesce(EA.AttemptStatus, 0) AttemptStatus, 			EA.AssignedUserId, 			EA.AttemptDate, 			U.User_First_Name + ' ' + U.User_Last_Name AS AssignedToName, 			PE.Patient_Enrollment_Status AS [Status], 			ME.Discription AS ActivityName, 			PE.RefusalRetractionReason 			 	FROM Trn_Patient_Enrollment PE 		INNER JOIN View_Mst_Patient patient ON PE.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountId 		INNER JOIN Mst_Enum ME ON Coalesce(PE.Patient_Enrollment_Status, 0) = ME.EnumValue  			AND ME.EnumType = 'EnrollmentStatus' 		INNER JOIN View_EnrollAttemptQueue EQ ON EQ.Patient_Enroll_ID = PE.Patient_Enroll_ID  		INNER JOIN Mst_User Usr ON Usr.User_ID = PE.CreatedBy 		LEFT JOIN Trn_Enrollment_Attempt EA ON PE.Patient_Enroll_ID = EA.EnrollmentId  			AND EQ.AttemptNumber=EA.AttemptNumber 		LEFT JOIN Mst_User U ON U.User_ID = EA.AssignedUserId 		LEFT JOIN Mst_User Usrs ON Usrs.User_ID = PE.UpdatedBy 	WHERE   		patient.Patient_Status = 1   		--Searching on following feilds 		AND ( @search = '' OR (patient.Patient_First_Name + ' ' + patient.Patient_Last_Name)  LIKE '%' + @search + '%' 				OR patient.Patient_MRN LIKE '%' + @search + '%' 				OR patient.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 		AND (@CreatedByUserId = 0 OR PE.CreatedBy = @CreatedByUserId) 		AND (@UpdatedByUserId = 0 OR PE.UpdatedBy = @UpdatedByUserId) 		AND PE.CreatedOn  >= @fromDate   		AND PE.CreatedOn <= @toDate   		AND (@UpdatedFromDate IS NULL  OR PE.UpdatedOn >= @UpdatedFromDate)         AND (@UpdatedToDate IS NULL OR PE.UpdatedOn <= @UpdatedToDateDayEnd)  		AND (@pccId = 0 OR EA.AssignedUserId = @pccId) 		AND (@status = 99 OR ISNULL(EA.AttemptStatus, 0) = @status) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Account_Name' and @orderDir = 'asc' then Account_Name end, 								case when @orderBy = 'Account_Name' and @orderDir = 'desc' then Account_Name end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'asc' then Patient_Enrollment_Status end, 								case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'desc' then Patient_Enrollment_Status end desc, 								 								case when @orderBy = 'AssignedToName' and @orderDir = 'asc' then AssignedToName end, 								case when @orderBy = 'AssignedToName' and @orderDir = 'desc' then AssignedToName end desc,  								case when @orderBy = 'AttemptNumber' and @orderDir = 'asc' then AttemptNumber end, 								case when @orderBy = 'AttemptNumber' and @orderDir = 'desc' then AttemptNumber end desc, 								case when @orderBy = 'CreatedOn' and @orderDir = 'asc' then CreatedOn end, 								case when @orderBy = 'CreatedOn' and @orderDir = 'desc' then CreatedOn end desc, 								case when @orderBy = 'AttemptDate' and @orderDir = 'asc' then AttemptDate end, 								case when @orderBy = 'AttemptDate' and @orderDir = 'desc' then AttemptDate end desc,  								case when @orderBy = 'AttemptStatus' and @orderDir = 'asc' then AttemptStatus end, 								case when @orderBy = 'AttemptStatus' and @orderDir = 'desc' then AttemptStatus end desc, 								case when @orderBy = 'Attempt_Status_Name' and @orderDir = 'asc' then AttemptStatus end, 								case when @orderBy = 'Attempt_Status_Name' and @orderDir = 'desc' then AttemptStatus end desc 								 			) AS RowNumber FROM SP_AuditTrailEnrollmentQueue  	)   	SELECT *, (Select Count(Patient_ID) FROM SP_AuditTrailEnrollmentQueue) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) 		 END  -- Exec [DBO].SP_AuditTrail_EnrollmentQueue 0,5,0,0,'01Jan2020','31Jul2021',null,null,'',0,99,'PatientFullName','asc',0,10 "
dbo,USP_GetPatientDSMVDiagnosisDetails," create procedure [dbo].[USP_GetPatientDSMVDiagnosisDetails] ( 	@PatientID int, 	@AssessmentID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0 	BEGIN 		SELECT		 			DsmDiagnosisID 			,PatientID 			,AssessmentID 			,DiagnosisID 			,MD.ICD10Code 			,MD.ICD10Code + ' '+ MD.Diagnosis_Name AS DisplayDiagnosisName 			,HasPrimaryDiagnosis 			,HasSecondaryDiagnosis 			,HasAdditionalDiagnosis 			,DD.IsDeleted 		FROM Trn_DSMVDiagnosis DD 		INNER JOIN Mst_Diagnosis MD ON DD.DiagnosisID = MD.Diagnosis_ID 		WHERE DD.PatientID=@PatientID AND DD.AssessmentID = @AssessmentID 		AND DD.IsDeleted = 0 	END 	ELSE 	BEGIN 		SELECT		 			DsmDiagnosisID 			,PatientID 			,AssessmentID 			,DiagnosisID 			,MD.ICD10Code 			,MD.ICD10Code + ' '+ MD.Diagnosis_Name AS DisplayDiagnosisName 			,HasPrimaryDiagnosis 			,HasSecondaryDiagnosis 			,HasAdditionalDiagnosis 			,DD.IsDeleted 		FROM Trn_DSMVDiagnosisLog DD 		INNER JOIN Mst_Diagnosis MD ON DD.DiagnosisID = MD.Diagnosis_ID AND DD.PatientActivityID = @PatientActivityID 		WHERE DD.PatientID=@PatientID AND DD.IsDeleted = 0 	END END -- EXEC USP_GetPatientDSMVDiagnosisDetails 0,0"
dbo,SP_AuditTrail_MasterActivities," CREATE procedure SP_AuditTrail_MasterActivities ( 	@AccountId INT, 	@ActivityID INT, 	@pccId INT, 	@status INT, 	@CreatedByUserId int, 	@UpdatedByUserId int, 	@fromDate Datetime =null, 	@toDate Datetime =null, 	@UpdatedFromDate Datetime =null, 	@UpdatedToDate Datetime =null, 	@search nvarchar(50) = '', 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@PageSize int = 999999999 	 ) AS BEGIN With MasterActivitiesDetailsResult AS	(SELECT  		patient.Patient_MRN, 		patient.Patient_ID, 		patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 		patient.Patient_Contact_State, 		patient.CMS_Contract_Number, 		PA.Patient_Activity_ID, 		PA.Activity_ID, 		Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) AS Activity_Date, 		PA.Activity_Start_Time, 		PA.Activity_Assigned_To, 		U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName, 		Coalesce(PA.Activity_Start_Status, 1) AS Activity_Start_Status, 		(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 			 AND ( ActivityOutcome = 10 OR ActivityOutcome = 11) -- it should be map with ActivityOutCome enum of name = PatientDishargedFacility or UserContactToPatient 		THEN  'Consult Needed' ELSE CASE WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 AND ( ActivityOutcome = 9 ) -- it should be map with ActivityOutCome enum of name = MrrReviewedAndNoIrregularities 		THEN 'Consult Not Needed' ELSE  ME.Discription END END) AS ActivityName, 		PA.Activity_CretaedAt, 		PA.Activity_CreatedBy, 		usr.User_First_Name+ ' ' + usr.User_Last_Name AS CreatedByName, 		PA.Activity_UpdatedAt, 		PA.Activity_UpdatedBy, 		usrs.User_First_Name+ ' ' + usrs.User_Last_Name AS UpdatedByName 		FROM Trn_Patient_Activity PA 	INNER JOIN View_Mst_Patient patient ON PA.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountId 	INNER JOIN Mst_Enum ME ON Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue AND ME.EnumType = 'ActivityStatus' 	INNER JOIN Mst_User usr ON PA.Activity_CreatedBy = usr.User_ID 	LEFT JOIN Mst_User U ON U.User_ID = PA.Activity_Assigned_To 	LEFT JOIN Mst_User usrs ON PA.Activity_UpdatedBy = usrs.User_ID 	WHERE (@CreatedByUserId = 0 OR PA.Activity_CreatedBy = @CreatedByUserId) 			AND (@UpdatedByUserId = 0 OR PA.Activity_UpdatedBy = @UpdatedByUserId) 			AND(               (@fromDate IS NULL  OR CONVERT(Date,PA.Activity_CretaedAt)  >= @fromDate)                   AND (@toDate IS NULL OR CONVERT(Date,PA.Activity_CretaedAt) <= @toDate)               ) 		AND(           (@UpdatedFromDate IS NULL  OR CONVERT(Date,PA.Activity_UpdatedAt)  >= @UpdatedFromDate)               AND (@UpdatedToDate IS NULL OR CONVERT(Date,PA.Activity_UpdatedAt) <= @UpdatedToDate)           ) 			AND (@pccId = 0 OR PA.Activity_Assigned_To = @pccId) 		AND (@status = 0  			OR ( @status > 3 AND @status <= 9 AND Coalesce(PA.Activity_Start_Status, 1) = 3 AND ActivityOutcome = 9) -- for only MRR 			OR ( @status > 3 AND @status > 9 AND Coalesce(PA.Activity_Start_Status, 1) = 3 AND ActivityOutcome > 9) -- For only MRR 			OR (Coalesce(PA.Activity_Start_Status, 1) = @status	) -- For Home Visit 		) 		AND PA.Activity_ID = @ActivityID 		AND ( (patient.Patient_First_Name + ' ' + patient.Patient_Last_Name)  LIKE '%' + @search + '%' OR patient.Patient_MRN LIKE '%' + @search + '%' OR patient.Patient_Contact_Phone LIKE '%' + @search + '%') 	), 	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Date' and @orderDir = 'asc' then Activity_Date end, 								case when @orderBy = 'Activity_Date' and @orderDir = 'desc' then Activity_Date end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'asc' then Patient_Contact_State end, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'desc' then Patient_Contact_State end desc, 								 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc,  								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc, 								case when @orderBy = 'ActivityName' and @orderDir = 'asc' then Activity_Start_Status end, 								case when @orderBy = 'ActivityName' and @orderDir = 'desc' then Activity_Start_Status end desc 								 								 			) AS RowNumber FROM MasterActivitiesDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM MasterActivitiesDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) END"
dbo,USP_GetPatientLinkChildrenDetails," create procedure [dbo].[USP_GetPatientLinkChildrenDetails] ( 	@SocialHistoryID int, 	@PatientActivityID int = 0  ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT		 			ID 			,SocialHistoryID 			,ChildName 			,NoOFChildern 			,ChildrenGenderID 			,ChildrenAge 			,IsDeleted 		FROM Trn_LinkChildren  		WHERE SocialHistoryID=@SocialHistoryID AND IsDeleted = 0 	END 	ELSE 	BEGIN 	SELECT		 			ID 			,SocialHistoryID 			,ChildName 			,NoOFChildern 			,ChildrenGenderID 			,ChildrenAge 			,IsDeleted 		FROM Trn_LinkChildrenLog  		WHERE PatientActivityID = @PatientActivityID AND IsDeleted = 0 	END END  -- EXEC USP_GetPatientLinkChildernDetails 2415, 0"
dbo,SP_AuditTrail_MedList," CREATE procedure SP_AuditTrail_MedList ( 	@CreatedByUserId int, 	@UpdatedByUserId int, 	@fromDate Datetime =null, 	@toDate Datetime =null, 	@UpdatedFromDate Datetime =null, 	@UpdatedToDate Datetime =null, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'Med_Name',  	@orderDir varchar(4) = 'asc', 	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	WITH Result AS ( 		SELECT  			med.Med_ID, 			med.Med_Name, 			mms.Med_Strength, 			med.Med_CreatedAt, 			med.Med_CreatedBy, 			usr.User_First_Name + ' ' +usr.User_Last_Name AS CreatedByName, 			med.Med_UpdatedAt, 			med.Med_UpdatedBy, 			usrs.User_First_Name + ' ' +usrs.User_Last_Name AS UpdatedByName 		FROM Mst_Medicine med 		INNER JOIN Trn_Med_Strength ms ON med.Med_ID = ms.Med_ID 		INNER JOIN Mst_Med_Strength mms ON ms.Strengh_ID = mms.ID 		LEFT JOIN Mst_User usr ON med.Med_CreatedBy = usr.User_ID 		LEFT JOIN Mst_User usrs ON med.Med_UpdatedBy = usrs.User_ID 		WHERE ( Med_Name LIKE '%' + @search + '%') 			AND (@CreatedByUserId = 0 OR med.Med_CreatedBy = @CreatedByUserId) 			AND (@UpdatedByUserId = 0 OR med.Med_UpdatedBy = @UpdatedByUserId) 			AND(               (@fromDate IS NULL  OR CONVERT(Date,med.Med_CreatedAt)  >= @fromDate)                   AND (@toDate IS NULL OR CONVERT(Date,med.Med_CreatedAt) <= @toDate)               ) 			AND(               (@UpdatedFromDate IS NULL  OR CONVERT(Date,med.Med_UpdatedAt)  >= @UpdatedFromDate)                   AND (@UpdatedToDate IS NULL OR CONVERT(Date,med.Med_UpdatedAt) <= @UpdatedToDate)               ) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Med_Name' and @orderDir = 'asc' then Med_Name end, 								case when @orderBy = 'Med_Name' and @orderDir = 'desc' then Med_Name end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Med_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) END  "
dbo,USP_GetPatientLinkSiblingsHistoryDetails," create procedure [dbo].[USP_GetPatientLinkSiblingsHistoryDetails] ( 	@SocialHistoryID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT  		ID 		,SocialHistoryID 		,SiblingsGenderID 		,SiblingsAge 		,SiblingsLifeStatusID 		,SiblingsRelationshipID 		,IsDeleted 		,SiblingName 	FROM Trn_LinkSiblings  	WHERE SocialHistoryID=@SocialHistoryID AND IsDeleted = 0 	END 	ELSE 	BEGIN 		SELECT  		ID 		,SocialHistoryID 		,SiblingsGenderID 		,SiblingsAge 		,SiblingsLifeStatusID 		,SiblingsRelationshipID 		,IsDeleted 		,SiblingName 	FROM Trn_LinkSiblingsLog 	WHERE PatientActivityID = @PatientActivityID AND IsDeleted = 0 	END END  -- EXEC USP_GetPatientLinkSiblingsHistoryDetails 2415, 0"
dbo,SP_AuditTrail_Patient," CREATE procedure SP_AuditTrail_Patient ( 	@AccountId INT, 	@CreatedByUserId int, 	@UpdatedByUserId int, 	@fromDate Datetime =null, 	@toDate Datetime =null, 	@UpdatedFromDate Datetime =null, 	@UpdatedToDate Datetime =null, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'Patient_Full_Name',  	@orderDir varchar(4) = 'asc', 	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	WITH Result AS ( 		SELECT  			patient.Patient_ID, 			patient.Account_ID, 			account.Account_Name, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS PatientFullName, 			patient.Patient_DOB, 			patientContact.Patient_Contact_Phone, 			coalesce(patient.Patient_Status, 0) Patient_Status, 			patient.Patient_MRN, 			Patient_Gender, 			Patient_CreatedAt, 			Patient_CreatedBy, 			usr.User_First_Name + ' ' +usr.User_Last_Name AS CreatedByName, 			Patient_Contact_UpdatedAt, 			Patient_Contact_UpdatedBy, 			usrs.User_First_Name + ' ' +usrs.User_Last_Name AS UpdatedByName 		FROM Mst_Patient patient  		INNER JOIN  			Mst_Account account ON patient.Account_ID = account.Account_ID AND patient.Account_ID = @AccountId 		LEFT JOIN  			Trn_Patient_Contact patientContact ON patient.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  		LEFT JOIN Mst_User usr ON Patient_CreatedBy = usr.User_ID 		LEFT JOIN Mst_User usrs ON Patient_UpdatedBy = usrs.User_ID 		WHERE ( Account_Name LIKE '%' + @search + '%'  			OR (Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 			OR Patient_MRN LIKE '%' + @search + '%' 			OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%') 			AND (@CreatedByUserId = 0 OR patient.Patient_CreatedBy = @CreatedByUserId) 			AND (@UpdatedByUserId = 0 OR patientContact.Patient_Contact_UpdatedBy = @UpdatedByUserId) 			AND(               (@fromDate IS NULL  OR CONVERT(Date,Patient_CreatedAt)  >= @fromDate)                   AND (@toDate IS NULL OR CONVERT(Date,Patient_CreatedAt) <= @toDate)               ) 			AND(               (@UpdatedFromDate IS NULL  OR CONVERT(Date,Patient_Contact_UpdatedAt)  >= @UpdatedFromDate)                   AND (@UpdatedToDate IS NULL OR CONVERT(Date,Patient_Contact_UpdatedAt) <= @UpdatedToDate)               ) 			AND (coalesce(patient.Patient_Status, 0) = 1) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Account_Name' and @orderDir = 'asc' then Account_Name end, 								case when @orderBy = 'Account_Name' and @orderDir = 'desc' then Account_Name end desc, 								case when @orderBy = 'Patient_Full_Name' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'Patient_Full_Name' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_DOB' and @orderDir = 'asc' then Patient_DOB end, 								case when @orderBy = 'Patient_DOB' and @orderDir = 'desc' then Patient_DOB end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'Patient_Contact_Phone' and @orderDir = 'asc' then Patient_Contact_Phone end, 								case when @orderBy = 'Patient_Contact_Phone' and @orderDir = 'desc' then Patient_Contact_Phone end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) END  "
dbo,USP_GetPatientLinkSocialHistoryDetails," create procedure [dbo].[USP_GetPatientLinkSocialHistoryDetails] ( 	@SocialHistoryID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT  		ID 		,SocialHistoryID 		,AssessmentEnumID 		,OtherDetails 		,IsDeleted 	FROM Trn_LinkSocialHistory  	WHERE SocialHistoryID=@SocialHistoryID 	AND IsDeleted = 0 	END 	ELSE 	BEGIN 		SELECT  		ID 		,SocialHistoryID 		,AssessmentEnumID 		,OtherDetails 		,IsDeleted 	FROM Trn_LinkSocialHistoryLog 	WHERE PatientActivityID = @PatientActivityID 	AND IsDeleted = 0 	END END  -- EXEC USP_GetPatientLinkSocialHistoryDetails 34,3133"
dbo,SP_ChartReportCallStatus," Create PROCEDURE [dbo].[SP_ChartReportCallStatus]         @ReportType varchar(50)  AS BEGIN          IF @ReportType = 'Enrollment'      BEGIN         WITH AttemptStatus AS(             Select PE.Patient_Enroll_ID, Coalesce(AttemptStatus, 0) Activity_Start_Status, ME.Discription AS ActivityStartStatus             FROM Trn_Patient_Enrollment PE              INNER JOIN Trn_Enrollment_Attempt Attempt ON PE.Patient_Enroll_ID = Attempt.EnrollmentId             INNER JOIN Mst_Enum ME ON ME.EnumValue =  Attempt.AttemptStatus AND ME.EnumType = 'AttemptStatus'             UNION ALL              Select PE.Patient_Enroll_ID, AttemptNumber Activity_Start_Status,              (Case WHEN AttemptNumber = 1 THEN 'Attempt 1'                  ELSE CASE WHEN AttemptNumber = 2 THEN 'Attempt 2'                  ELSE CASE WHEN AttemptNumber = 3 THEN 'Attempt 3' END END END) ActivityStartStatus             FROM Trn_Patient_Enrollment PE              INNER JOIN Trn_Enrollment_Attempt Attempt ON PE.Patient_Enroll_ID = Attempt.EnrollmentId             WHERE AttemptNumber IS NOT NULL         )          SELECT DISTINCT EQ.Activity_Start_Status,EQ.ActivityStartStatus AS StatusName         FROM Trn_Patient_Enrollment PE          INNER JOIN AttemptStatus EQ ON EQ.Patient_Enroll_ID = PE.Patient_Enroll_ID          INNER JOIN Trn_Enrollment_Attempt EA ON PE.Patient_Enroll_ID = EA.EnrollmentId                  AND EQ.Activity_Start_Status=EA.AttemptStatus         GROUP BY EQ.Activity_Start_Status,EQ.ActivityStartStatus     END     ELSE BEGIN         WITH AttemptStatus AS(             Select PA.Patient_Activity_ID, Coalesce(AttemptStatus, 0) Activity_Start_Status, ME.Discription AS ActivityStartStatus             FROM Trn_Patient_Activity PA              INNER JOIN Trn_Activity_Attempt Attempt ON PA.Patient_Activity_ID = Attempt.Patient_Activity_ID             INNER JOIN Mst_Enum ME ON ME.EnumValue =  Attempt.AttemptStatus AND ME.EnumType = 'AttemptStatus'             UNION ALL              Select PA.Patient_Activity_ID, Attempt.AttemptNumber Activity_Start_Status,              (Case WHEN Attempt.AttemptNumber = 1 THEN 'Attempt 1'                  ELSE CASE WHEN Attempt.AttemptNumber = 2 THEN 'Attempt 2'                  ELSE CASE WHEN Attempt.AttemptNumber = 3 THEN 'Attempt 3' END END END) ActivityStartStatus             FROM Trn_Patient_Activity PA               INNER JOIN Trn_Activity_Attempt Attempt ON PA.Patient_Activity_ID = Attempt.Patient_Activity_ID             WHERE Attempt.AttemptNumber IS NOT NULL         )          SELECT DISTINCT EQ.Activity_Start_Status,EQ.ActivityStartStatus AS StatusName         FROM Trn_Patient_Activity  PA         INNER JOIN AttemptStatus EQ ON EQ.Patient_Activity_ID = PA.Patient_Activity_ID          INNER JOIN Trn_Activity_Attempt AA ON PA.Patient_Activity_ID = AA.Patient_Activity_ID                  AND EQ.Activity_Start_Status=AA.AttemptStatus         GROUP BY EQ.Activity_Start_Status,EQ.ActivityStartStatus     END  END -- SP_ChartReportCallStatus 'Enrollment'"
dbo,USP_GetPatientListByAccountId," Create procedure [dbo].USP_GetPatientListByAccountId ( 	@userId int, 	@AccountId INT, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999, 	@DateOfBirth Datetime =null ) AS BEGIN 	SET NOCOUNT ON; 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	--getting list of practices assigned to user. 	--This is for to get only assigned practices patient for the user. 	CREATE TABLE #AssignedPracticesID ( 		ID INT 	)  	INSERT INTO #AssignedPracticesID Select DISTINCT MP.ID FROM  Mst_Practice  MP  	LEFT JOIN TrnUserPractices UP ON UP.PracticeID = MP.ID   	WHERE  ( @isAdmin = 1 OR UP.UserID = @userId ); -- AND MP.PracticeStatus = 1;  	WITH Result AS ( 		SELECT  			patient.Patient_ID, 			patient.Account_ID, 			patient.Patient_First_Name, 			patient.Patient_Last_Name, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS Patient_Full_Name, 			patient.Patient_DOB, 			patient.Mobile, 			patient.Patient_Status, 			patient.Patient_MRN, 			Patient_Gender, 			TPI.PrimaryInsurance, 			MI.Insurance AS PrimaryInsuranceName, 			patient.PatientStatusId, 			MPS.StatusName AS DispalyPatientStatus, 			MP.PracticeName 		FROM dbo.Mst_Patient patient  		INNER JOIN #AssignedPracticesID AP ON  patient.PatientPracticeId = AP.ID -- Listing out users practices assigned patients only. 		INNER JOIN Mst_Practice MP ON MP.ID = patient.PatientPracticeId 		LEFT JOIN Trn_PatientInsurance TPI ON patient.Patient_ID = TPI.PatientId 		LEFT JOIN Mst_Insurance MI ON TPI.PrimaryInsurance = MI.ID 		LEFT JOIN MstPatientStatuses MPS ON patient.PatientStatusId = MPS.ID 		WHERE patient.Account_ID = @AccountId  AND  ((Patient_First_Name + ' ' + Patient_Last_Name) LIKE '%' + @search + '%' 			OR (Patient_Last_Name + ' ' + Patient_First_Name) LIKE '%' + @search + '%' 			OR Patient_MRN LIKE '%' + @search + '%' 			OR patient.Mobile LIKE '%' + @search + '%')  			AND (@isAdmin = 1 OR patient.Patient_Status = 1) 			AND (patient.Patient_DOB =  @DateOfBirth OR @DateOfBirth is null) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Patient_Full_Name' and @orderDir = 'asc' then Patient_Full_Name end, 						case when @orderBy = 'Patient_Full_Name' and @orderDir = 'desc' then Patient_Full_Name end desc, 						case when @orderBy = 'Patient_DOB' and @orderDir = 'asc' then Patient_DOB end, 						case when @orderBy = 'Patient_DOB' and @orderDir = 'desc' then Patient_DOB end desc, 						case when @orderBy = 'Patient_Age' and @orderDir = 'asc' then Patient_DOB end, 						case when @orderBy = 'Patient_Age' and @orderDir = 'desc' then Patient_DOB end desc, 						case when @orderBy = 'PrimaryInsuranceName' and @orderDir = 'asc' then PrimaryInsuranceName end, 						case when @orderBy = 'PrimaryInsuranceName' and @orderDir = 'desc' then PrimaryInsuranceName end desc, 						case when @orderBy = 'DispalyPatientStatus' and @orderDir = 'asc' then DispalyPatientStatus end, 						case when @orderBy = 'DispalyPatientStatus' and @orderDir = 'desc' then DispalyPatientStatus end desc, 						case when @orderBy = 'Patient_Status' and @orderDir = 'asc' then Patient_Status end, 						case when @orderBy = 'Patient_Status' and @orderDir = 'desc' then Patient_Status end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE --OrderByResult.RowNumber BETWEEN ((@pageIndex * @pageSize) + 1) AND ((@pageIndex + 1) * @pageSize) 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) 	DROP TABLE #AssignedPracticesID; END -- EXEC USP_GetPatientListByAccountId 18, 22"
dbo,SP_ChartReportCallStatusCount," CREATE PROCEDURE [dbo].[SP_ChartReportCallStatusCount]     @AccountID INT, 	@PCC int,     @fromDate DATETIME,     @toDate DATETIME,     @ReportType varchar(50)  AS BEGIN DECLARE @ActivityId int SET @ActivityId = (SELECT Top(1) Activity_ID FROM Mst_Activity WHERE ActivityType='PDCReview')       IF @ReportType = 'Enrollment'       BEGIN         WITH ChartResult AS ( 		SELECT  			CR.CallOutComeID AS ActivityID, 			Convert(Date, EA.AttemptDate) AS ActivityDate, 			Cr.CallOutcome AS ActivityStatus, 			EA.AttemptDate, 			CR.CallOutcome, 			EA.AttemptNumber 			FROM Trn_Patient_Enrollment PE 			INNER JOIN Mst_Patient P ON P.Patient_ID = PE.Patient_ID AND P.Account_ID = @AccountID 			INNER JOIN Trn_Enrollment_Attempt EA ON PE.Patient_Enroll_ID = EA.EnrollmentId  			INNER JOIN View_EnrollmentCallOutComeResult CR ON PE.Patient_Enroll_ID = CR.EnrollmentId AND CR.AttemptNumber = EA.AttemptNumber 		WHERE Convert(Date, EA.AttemptDate) >= @fromDate  		AND Convert(Date, EA.AttemptDate) <= @toDate 		AND (@PCC = 0 OR EA.AssignedUserId = @PCC) 		)         SELECT ActivityID AS StatusId,             CallOutcome AS StatusName,             Convert(Date, ActivityDate) AS LableDate,             CONVERT(varchar, ActivityDate, 6) AS DisplayLableDate,             Count(ActivityID) TotalCount         FROM ChartResult         GROUP BY ActivityID,CallOutcome, Convert(Date, ActivityDate),CONVERT(varchar, ActivityDate, 6)         ORDER BY  LableDate     END     ELSE BEGIN 		WITH AttemptStatus AS(             SELECT  				CR.CallOutComeID AS ActivityID, 				Convert(Date, AA.AttemptDate) AS ActivityDate, 				AA.AttemptDate, 				CR.CallOutcome, 				AA.AttemptNumber 			FROM Trn_Patient_Activity PA 			INNER JOIN Mst_Patient P ON P.Patient_ID = PA.Patient_ID AND P.Account_ID = @AccountID 			INNER JOIN Trn_Activity_Attempt AA ON PA.Patient_Activity_ID = AA.Patient_Activity_ID  			INNER JOIN View_ActivityCallOutComeResult CR ON PA.Patient_Activity_ID = CR.Patient_Activity_ID AND CR.AttemptNumber = AA.AttemptNumber 			WHERE Convert(Date, AA.AttemptDate) >= @fromDate  				AND Convert(Date, AA.AttemptDate) <= @toDate 				AND PA.Activity_ID = @ActivityId 				AND (@PCC = 0 OR PA.Activity_Assigned_To = @PCC)         )          SELECT ActivityID AS StatusId,             CallOutcome AS StatusName,             Convert(Date, ActivityDate) AS LableDate,             CONVERT(varchar, ActivityDate, 6) AS DisplayLableDate,             Count(ActivityID) TotalCount         FROM AttemptStatus         GROUP BY ActivityID,CallOutcome, Convert(Date, ActivityDate),CONVERT(varchar, ActivityDate, 6)         ORDER BY  LableDate     END  END  -- Exec SP_ChartReportCallStatusCount 0,'01Jan2020','31Mar2021','PDC'  "
dbo,USP_GetPatientMasterDetails," create procedure [dbo].[USP_GetPatientMasterDetails] ( 	@Patient_ID int  ) AS BEGIN 	SELECT [Patient_ID] 		,[Account_ID] 		,[Patient_First_Name] 		,[Patient_Middle_Name] 		,[Patient_Last_Name] 		,[Patient_MRN] 		,[Patient_DOB] 		,[Patient_Gender] 		,[Patient_Status] 		,[Patient_CreatedAt] 		,[Patient_CreatedBy] 		,[Patient_UpdatedAt] 		,[Patient_UpdatedBy] 		,[PatientPracticeId] 		,[ReferringProviderId] 		,[SurveryScore] 		,[TypeOfReferral] 		,[ReasonForReferral] 		,[AreYouEligible] 		,[IsSUD] 		,[IsExport] 		,[IsFlagThisPatient] 		,[Salutation] 		,[Salutation] + ' ' + [Patient_First_Name] + ' '+ [Patient_Last_Name] AS PatientFullName 		,[NotEligibleReason] 		,[NotEligibleReasonNote] 		,[PreferredName] 		,[CurrentLocation] 		,[CurrentLocationAddress] 		,[PatientStatusId] 		,[PatientStatusReasonId] 		,[PatientStatusOtherText] 		,[PatientStatusDate] 		,PS.StatusName AS DispalyPatientStatus 		,TPA.ProgramType 		,MAE.Discription AS DispalyProgramType 		,P.AssessmentID 		,P.Patient_Race 		,P.ReferralDate 		,P.Mobile 		,P.Email 		,P.PreferredPronouns 		,P.AssignedBCM 		,P.AssignedBCMID 		,P.GenderIdentity 		,P.FlagComment 	FROM [dbo].[Mst_Patient] P 	LEFT JOIN MstPatientStatuses PS ON PS.StatusID = P.PatientStatusId 	LEFT JOIN TrnPatientAssessment TPA ON TPA.PatientID = P.Patient_ID AND TPA.AssessmentID = P.AssessmentID 	LEFT JOIN MstAssessmentEnum MAE ON MAE.EnumValue = TPA.ProgramType AND MAE.EnumType = 'ProgramTypes' 	WHERE P.[Patient_ID] = @Patient_ID  END  -- EXEC USP_GetPatientMasterDetails 19278"
dbo,SP_ChartReportConsult," CREATE procedure SP_ChartReportConsult ( 	@AccountID INT, 	@ActivityID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@pccId INT ) AS BEGIN 		With  Result AS ( 		SELECT  			ME.EnumValue AS StatusId, 			Convert(Date,  				Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, 				PA.Activity_Start_Date) 				) LableDate, 			CONVERT(varchar,  				Convert(Date,  					Coalesce(PA.Activity_Actual_End_Time,PA.Activity_Actual_Start_Time, 					PA.Activity_Start_Date) 					), 6) AS DisplayLableDate, 			PA.Patient_Activity_ID 		FROM Mst_Enum ME  		INNER JOIN Trn_Patient_Activity PA ON  			Coalesce(PA.ActivityOutCome, PA.LastCallOutCome) = ME.EnumValue  		INNER JOIN View_Mst_Patient patient ON PA.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountID 		WHERE ME.EnumType = 'PharmacistConsult' 			AND Convert(Date,  					Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, 					PA.Activity_Start_Date) 					) >= @fromDate  			AND Convert(Date,  					Coalesce(PA.Activity_Actual_End_Time,PA.Activity_Actual_Start_Time, 					PA.Activity_Start_Date) 					) <= @toDate 			AND (@pccId = 0 OR PA.Activity_Assigned_To = @pccId) 			AND PA.Activity_ID = @ActivityID 	)  	 	SELECT StatusId, LableDate, DisplayLableDate, Count(Patient_Activity_ID) TotalCount FROM Result  	GROUP BY  StatusId, LableDate, DisplayLableDate 			 END  -- Exec SP_ChartReportConsult 4, '12Mar2021','12Mar2021',0"
dbo,USP_GetPatientNotes," Create procedure [dbo].USP_GetPatientNotes ( 	@PatientId INT ) AS BEGIN 	SELECT  		N.Patient_Note_Id, 		N.Patient_ID, 		N.Patient_Note_Description, 		N.Patient_Note_CreatedBy, 		U.User_First_Name+ ' '+U.User_Last_Name CreatedBy, 		N.Patient_Note_CreatedAt CreatedAt, 		US.User_First_Name+ ' '+US.User_Last_Name UpdatedBy, 		N.Patient_Note_UpdatedAt UpdatedAt 	FROM Trn_Patient_Notes N 	INNER JOIN Mst_User U ON N.Patient_Note_CreatedBy = U.User_ID 	LEFT JOIN Mst_User US ON N.Patient_Note_UpdatedBy = US.User_ID 	WHERE N.Patient_ID = @PatientId 	ORDER BY N.Patient_Note_Id DESC END  --EXEC USP_GetPatientNotes 15708"
dbo,SP_ChartReportConsultStatus," Create procedure [dbo].[SP_ChartReportConsultStatus] ( 	@ActivityID varchar(50) ) AS BEGIN 		SELECT  			ME.EnumValue AS ID, 			ME.Discription AS statusName 		FROM Mst_Enum ME WHERE ME.EnumType = 'PharmacistConsult' 		ORDER BY ID, Discription END  -- Exec SP_ChartReportConsultStatus ''"
dbo,USP_GetPatientOtherMasterDetails," CREATE PROCEDURE [dbo].[USP_GetPatientOtherMasterDetails] (     @PatientID INT ) AS BEGIN     SELECT P.Patient_ID 		,ReferringProviderId 		,Ph.PhysicianName AS ReferringProviderName 		,PatientPracticeId 		,Pr.PracticeName 		,Pr.PracticeType 		,PR.BillingType 		,PR.BillingTime 		,PR.BillingTimeFees     FROM Mst_Patient P  	LEFT JOIN Mst_Physician Ph ON P.ReferringProviderId = Ph.ID 	LEFT JOIN Mst_Practice Pr ON P.PatientPracticeId = Pr.ID 	WHERE P.Patient_ID=@PatientID END -- EXEC USP_GetPatientOtherMasterDetails 3"
dbo,SP_ChartReportHomeVisit," CREATE PROCEDURE [dbo].[SP_ChartReportHomeVisit] 	@AccountID INT, 	@ActivityId INT, 	@PCC int, 	@fromDate DATETIME, 	@toDate DATETIME AS BEGIN  	WITH HomeVisitMRR AS ( 	SELECT 	(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 				 AND ( ActivityOutcome = 10 OR ActivityOutcome = 11) -- it should be map with ActivityOutCome enum of name = PatientDishargedFacility or UserContactToPatient 					THEN  10 ELSE CASE WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 AND ( ActivityOutcome = 9 ) -- it should be map with ActivityOutCome enum of name = MrrReviewedAndNoIrregularities 					THEN 9 ELSE  Coalesce(PA.Activity_Start_Status, 1) END END) 					 AS StatusId, 			(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 				 AND ( ActivityOutcome = 10 OR ActivityOutcome = 11) -- it should be map with ActivityOutCome enum of name = PatientDishargedFacility or UserContactToPatient 					THEN  'Consult Needed' ELSE CASE WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 AND ( ActivityOutcome = 9 ) -- it should be map with ActivityOutCome enum of name = MrrReviewedAndNoIrregularities 					THEN 'Consult Not Needed' ELSE  ME.Discription END END) AS StatusName, 			Convert(Date, Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, Activity_Start_Date)) AS LableDate, 			CONVERT(varchar, Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, Activity_Start_Date), 6) AS DisplayLableDate, 			PA.Patient_Activity_ID 		FROM Trn_Patient_Activity PA  		INNER JOIN Mst_Enum ME ON Coalesce(PA.Activity_Start_Status, 1) =ME.EnumValue AND ME.EnumType='ActivityStatus' 		INNER JOIN Mst_Patient P ON P.Patient_ID = PA.Patient_ID AND P.Account_ID = @AccountID 		WHERE  Convert(Date, Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, Activity_Start_Date)) BETWEEN @fromDate AND @toDate  			AND (@PCC = 0 or PA.Activity_Assigned_To = @PCC) 			AND PA.Activity_ID = @ActivityId 	) 		SELECT StatusId, StatusName,LableDate, DisplayLableDate, Count(Patient_Activity_ID) TotalCount 		FROM HomeVisitMRR  		GROUP BY StatusId,StatusName,LableDate,DisplayLableDate 		ORDER BY  LableDate 	 END --Exec SP_ChartReportHomeVisit 3,0,'01Jan2021','08Mar2021' "
dbo,USP_GetPatientPastPsychotropicMedicationsDetails," create procedure [dbo].[USP_GetPatientPastPsychotropicMedicationsDetails] ( 	@PatientID int, 	@AssessmentID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT	 		PastPsychotropicID 		,PatientID 		,AssessmentID 		,BehavioralHealthID 		,PPM.Med_ID 		,Med_Strength_ID 		,Frequency 		,MM.Med_Name 		,MMS.Med_Strength 		,PPM.IsDeleted 	FROM Trn_PastPsychotropicMedications PPM 	INNER JOIN Mst_Medicine MM ON PPM.Med_ID = MM.Med_ID 	LEFT JOIN Mst_Med_Strength MMS ON PPM.Med_Strength_ID = MMS.ID 	WHERE PPM.PatientID=@PatientID AND PPM.AssessmentID= @AssessmentID 	AND PPM.IsDeleted = 0 and PPM.IsCurrentMedicine=0 	END 	ELSE 	BEGIN 		SELECT	 		PastPsychotropicID 		,PatientID 		,AssessmentID 		,BehavioralHealthID 		,PPM.Med_ID 		,Med_Strength_ID 		,Frequency 		,MM.Med_Name 		,MMS.Med_Strength 		,PPM.IsDeleted 	FROM Trn_PastPsychotropicMedicationsLog PPM 	INNER JOIN Mst_Medicine MM ON PPM.Med_ID = MM.Med_ID 	LEFT JOIN Mst_Med_Strength MMS ON PPM.Med_Strength_ID = MMS.ID 	WHERE PPM.PatientID=@PatientID AND PPM.AssessmentID= @AssessmentID 	AND PPM.IsDeleted = 0 and PPM.IsCurrentMedicine=0 AND PPM.PatientActivityID = @PatientActivityID 	END END  -- EXEC USP_GetPatientPastPsychotropicMedicationsDetails 0,0"
dbo,SP_ChartReportInterventionStatusCount," CREATE PROCEDURE [dbo].[SP_ChartReportInterventionStatusCount]     @AccountID INT, 	@errorTypeId int,     @fromDate DATETIME,     @toDate DATETIME AS BEGIN      SELECT IT.ID AS StatusId,             '' AS StatusName,             CONVERT(Date, CI.CreatedOn) AS LableDate,             CONVERT(varchar, CI.CreatedOn, 6) AS DisplayLableDate,             Count(CI.ID) TotalCount         FROM Mst_InterventionType  IT         INNER JOIN Trn_Clinical_Intervention CI ON IT.ID = CI.InterventionType_ID 		INNER JOIN Mst_Patient P ON P.Patient_ID = CI.Patient_ID AND P.Account_ID = @AccountID         where CI.InterventionType_ID is not null          AND Convert(Date, CI.CreatedOn) BETWEEN @fromDate AND @toDate          AND (@errorTypeId = 0 or CI.InterventionType_ID = @errorTypeId)          GROUP BY IT.ID,  CONVERT(Date, CI.CreatedOn),  		CONVERT(varchar, CI.CreatedOn, 6)   		ORDER BY LableDate END"
dbo,USP_GetPatientQuestionAnswerFor," Create PROCEDURE [dbo].[USP_GetPatientQuestionAnswerFor] @QuestionFor INT, @PatientID INT, @AccountType INT AS BEGIN 	SELECT QM.QuestionID,QuestionType,QuestionText,QuestionFor,QuestonSubType,QM.QuestionLinkID, 		QO.ID OptionID,QO.OptionsFor,QO.OptionText,QO.OptionValue,QO.HasChildQuestion, QO.ChildQuestionLinkID, QO.AdditionalInfo, 		PQA.ID, 		PQA.PatientID, 		PQA.AnswerText, 		(CASE WHEN QM.QuestionType = 6 OR QM.QuestionType = 7 -- When Question type is ShortAnswer or LongAnswer then it should be display text as it is saved in answer table. 			THEN PQA.AnswerText  			ELSE (SELECT OptionText FROM Mst_QuestionOptions MQO WHERE MQO.OptionValue = PQA.AnswerText AND MQO.QuestionLinkID = QM.QuestionLinkID)  			END) DisplayAnswerText, 		PQA.IsDeleted 	FROM Mst_Questions QM  	INNER JOIN Mst_QuestionOptions QO ON QM.QuestionLinkID=QO.QuestionLinkID AND QM.AccountTypeId = @AccountType 	LEFT JOIN Trn_PatientQuestionAnswers PQA ON QM.QuestionID = PQA.QuestionID AND PQA.PatientID = @PatientID 	WHERE QuestionFor = @QuestionFor  AND QM.IsDeletedQuestion = 0 END  -- EXEC USP_GetPatientQuestionAnswerFor 3, 16474, 1"
dbo,SP_CurrentActivityAttemptDetails," Create procedure SP_CurrentActivityAttemptDetails (@PatientActivityId INT) AS BEGIN 	 	WITH PatientActivityAttempt AS ( 	SELECT TPA1.Patient_Activity_ID, 		MAX(Coalesce(TAA1.AttemptNumber, 1)) AS AttemptNumber 		FROM Trn_Patient_Activity TPA1 		LEFT JOIN Trn_Activity_Attempt TAA1 ON TPA1.Patient_Activity_ID = TAA1.Patient_Activity_ID 		WHERE TPA1.Patient_Activity_ID = @PatientActivityId 		GROUP BY TPA1.Patient_Activity_ID  	)  	Select  		TPA.Patient_Activity_ID, 		Patient_ID, 		TPA.Activity_ID, 		MA.Activity_Name, 		MA.ActivityType, 		TAA.Id AS AttemptId, 		PAA.AttemptNumber AS AttemptNumber, 		TAA.AttemptDate, 		TAA.AttemptStatus, 		TAA.AssignedUserId, 		TAA.PrimaryCallOutcome, 		TAA.SecondaryCallOutcome, 		MA.ActivityNumber 	FROM Trn_Patient_Activity TPA 	INNER JOIN Mst_Activity MA ON TPA.Activity_ID = MA.Activity_ID  	INNER JOIN PatientActivityAttempt PAA ON PAA.Patient_Activity_ID = TPA.Patient_Activity_ID 	LEFT JOIN Trn_Activity_Attempt TAA ON TPA.Patient_Activity_ID = TAA.Patient_Activity_ID AND TAA.AttemptNumber = PAA.AttemptNumber 	 	WHERE TPA.Patient_Activity_ID = @PatientActivityId  END "
dbo,USP_GetPatientRegistry," Create PROCEDURE [dbo].[USP_GetPatientRegistry] 	@AccountId INT, 	@LoggedInUserID INT = 0, 	@ClinicianName NVARCHAR(100)='', 	@PracticeID INT=0, 	@PatientStatusId INT=0, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'IsFlagged',  	@orderDir varchar(4) = 'desc',  	@StartFrom int = 0,  	@PageSize int = 999999999, 	@DateOfBirth Datetime =null, 	@NextScheduledSessionFromDate Datetime =null, 	@NextScheduledSessionToDate Datetime=null, 	@IsMissing int=0, 	@MonthLost nvarchar(100) = null AS BEGIN 	SET NOCOUNT ON; 	DECLARE @MonthLostFromDate DATETIME,@MonthLostToDate DATETIME; 	 	DECLARE @Today DATE = CONVERT(DATE, GETDATE()); 	DECLARE @MonthOfService DATE = EOMONTH(GETUTCDATE()); 	DECLARE @LastMonthOfService DATE = (EOMONTH(DATEADD(MONTH, -1, @MonthOfService))); 	DECLARE @DisplayLastMonthOfService VARCHAR(20) = FORMAT(EOMONTH(DATEADD(MONTH, -1, @MonthOfService)),'MMMM yyyy'); 			 			SELECT distinct ta.Patient_ID, 				    STUFF( 				     ( 				         SELECT ',' + MA.Activity_Name 				         FROM Trn_Patient_Activity ta_inner 				         INNER JOIN dbo.Mst_Activity MA ON MA.Activity_ID = ta_inner.Activity_ID 				         WHERE ta.Patient_ID = ta_inner.Patient_ID 				             AND MA.ActivityType IN ('InitialAssessment','ProgressNote','GroupNote','ClinicalCareScreening') 				             AND ta_inner.Activity_Start_Status IN (1,2) and ta_inner.Activity_Status = 1 				             AND ta_inner.Activity_Start_Date > @Today 				         FOR XML PATH('') 				     ), 1, 1, '' 				 ) AS Activity_Name	 				 ,ta.Activity_Start_Date 			INTO #Temp2 			FROM Trn_Patient_Activity ta 			INNER JOIN dbo.Mst_Activity MA ON MA.Activity_ID = TA.Activity_ID 			 			WHERE MA.ActivityType IN ('InitialAssessment','ProgressNote','GroupNote','ClinicalCareScreening') 			AND ta.Activity_Start_Status In (1,2) and ta.Activity_Status = 1 			AND ta.Activity_Start_Date > @Today 			GROUP BY ta.Patient_ID,ta.Activity_Start_Date;  			SELECT PatientID, ID AS prevMonthData             INTO #Temp4 			FROM TrnBillingProfile  			WHERE MonthOfService = @LastMonthOfService;  	WITH Result AS ( 		SELECT distinct R.ID, 			P.Patient_ID, 			P.Patient_First_Name, 			P.Patient_Last_Name, 			P.Patient_DOB, 			P.Patient_First_Name + ' '+	P.Patient_Last_Name AS PatientFullName, 			R.ClinicianName, 			R.ReferringProviderName, 			R.PracticeName, 			R.Diagnosis, 			R.ServiceStartDate, 			R.PHQ9FirstServiceDate, 			R.PHQ9FirstScore, 			R.PHQ9LastServiceDate, 			R.PHQ9LastScore, 			R.GAD7FirstServiceDate, 			R.GAD7FirstScore, 			R.GAD7LastServiceDate, 			R.GAD7LastScore, 			R.PatientActivityID, 			ISNULL(P.IsFlagThisPatient, 0) IsFlagged, 			P.FlagComment, 			R.IsReviewed, 			R.ReviewedNote, 			R.UpdatedBy, 			R.UpdatedOn, 			MS.StatusName, 			R.CCSLastDate as CCS, 			R.IALastDate as IA, 			R.PNLastDate as PN, 			R.GNLastDate as GN, 			fw.NoOfWeeksofIA, 			R.MinutesOfThisMonth, 			R.TotalSessionCount as NoOfSession, 			R.RecentAttendanceName AS Attendance, 			ME.Discription AS DisplayTypeOfReferral, 			R.BillableCPTCodes AS BillingCPTCode, 			CASE WHEN T2.Activity_Name IS NULL THEN 'Missing' ELSE T2.Activity_Name END AS NextScheduledSession, 			R.MinutesToNextCode, 			Convert(VARCHAR(20), R.LastMonthYearSeen) AS LastMonthYearSeen, 			P.PatientPracticeId, 			CASE WHEN T4.prevMonthData IS NULL THEN @DisplayLastMonthOfService ELSE '' END AS MonthLost, 			R.MindHealthyFee 		FROM TrnPatientRegistry R 		 		INNER JOIN Mst_Patient P ON R.PatientID = P.Patient_ID AND P.Patient_Status = 1 AND P.Account_ID = @AccountId 		INNER JOIN TrnUserPractices UP ON P.PatientPracticeId = UP.PracticeID  AND UP.UserID = @LoggedInUserID 		INNER JOIN MstPatientStatuses MS ON MS.ID = P.PatientStatusId 		INNER JOIN Mst_Enum ME ON ME.EnumValue = P.TypeOfReferral AND ME.EnumType='TypeOfReferral' 		OUTER apply dbo.funcGetNoOfWeeksOfIA(P.Patient_ID) fw		 		LEFT  JOIN #Temp2 T2 ON R.PatientID = T2.Patient_ID 		LEFT join #Temp4 T4 ON R.PatientID = T4.PatientID 		WHERE  (@ClinicianName = '' OR R.ClinicianName = @ClinicianName) 			AND (@PracticeID = 0 OR P.PatientPracticeId = @PracticeID) 			AND (@PatientStatusId = 0 OR P.PatientStatusId = @PatientStatusId) 			AND (P.Patient_DOB =  @DateOfBirth OR @DateOfBirth is null) 			AND (T2.Activity_Start_Date >=  @NextScheduledSessionFromDate OR @NextScheduledSessionFromDate is null) 			AND (T2.Activity_Start_Date <=  @NextScheduledSessionToDate OR @NextScheduledSessionToDate  is null) 			AND (@IsMissing = 0 OR ((@IsMissing = 1 And T2.Activity_Name is null) OR (@IsMissing = 2 And T2.Activity_Name is not null))) 			--AND ((T4.prevMonthData IS NULL And @MonthLost like '%'+@LastMonthOfService+'%') OR @MonthLost is null) 	),  	OrderByResult AS ( 		SELECT *, ROW_NUMBER() over ( order BY IsReviewed, case when @orderBy = 'IsFlagged' and @orderDir = 'asc' then IsFlagged end, 			case when @orderBy = 'IsFlagged' and @orderDir = 'desc' then IsFlagged end desc, PHQ9LastServiceDate asc, PHQ9LastServiceDate, ServiceStartDate ) AS RowNumber  		FROM Result  	) 	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 	 	DROP table #Temp2 	DROP table #Temp4 END -- EXEC USP_GetPatientRegistry 22, 3"
dbo,SP_EnrollmentReport," CREATE PROCEDURE [dbo].[SP_EnrollmentReport] 	@AccountID INT, 	@PCC int, 	@fromDate DATETIME, 	@toDate DATETIME, 	@ReportType varchar(50)  AS BEGIN  Declare @isAdmin BIT; 	 	  	IF @ReportType = 'Enrollment'  	BEGIN 		 		SELECT PE.Patient_Enrollment_Status AS StatusId, 			'' AS StatusName, 			CONVERT(Date, PE.EnrollmentDate) AS LableDate, 			CONVERT(varchar, PE.EnrollmentDate, 6) AS DisplayLableDate, 			Count(PE.Patient_Enroll_ID) TotalCount 		FROM Trn_Patient_Enrollment PE with (nolock) 		INNER JOIN Mst_Patient P with (nolock) ON P.Patient_ID = PE.Patient_ID AND P.Account_ID = @AccountID 		INNER JOIN View_EnrollAttemptQueue EQ with (nolock) ON EQ.Patient_Enroll_ID = PE.Patient_Enroll_ID  		LEFT JOIN Trn_Enrollment_Attempt EA with (nolock) ON PE.Patient_Enroll_ID = EA.EnrollmentId  				AND EQ.AttemptNumber=EA.AttemptNumber 		WHERE  Convert(Date, PE.EnrollmentDate) BETWEEN @fromDate AND @toDate  			AND (@PCC = 0 or EA.AssignedUserId = @PCC) 		GROUP BY PE.Patient_Enrollment_Status, 		CONVERT(Date, PE.EnrollmentDate), 		CONVERT(varchar, PE.EnrollmentDate, 6) 		ORDER BY  LableDate 	END 	ELSE 	BEGIN  		 		SELECT PE.RxHomeDelivery AS StatusId, 			'' AS StatusName, 			CONVERT(Date, PE.RxEnrollmentDate) AS LableDate, 			CONVERT(varchar, PE.RxEnrollmentDate, 6) AS DisplayLableDate, 			Count(PE.Patient_Enroll_ID) TotalCount 		FROM Trn_Patient_Enrollment PE with (nolock) 		INNER JOIN Mst_Patient P with (nolock) ON P.Patient_ID = PE.Patient_ID AND P.Account_ID = @AccountID 		INNER JOIN View_EnrollAttemptQueue EQ with (nolock) ON EQ.Patient_Enroll_ID = PE.Patient_Enroll_ID  		LEFT JOIN Trn_Enrollment_Attempt EA with (nolock) ON PE.Patient_Enroll_ID = EA.EnrollmentId  				AND EQ.AttemptNumber=EA.AttemptNumber 		WHERE  Convert(Date, PE.RxEnrollmentDate) BETWEEN @fromDate AND @toDate  			AND (@PCC = 0 or EA.AssignedUserId = @PCC) AND ISNULL(PE.RxHomeDelivery, 0) > 0 		GROUP BY PE.RxHomeDelivery, 		CONVERT(Date, PE.RxEnrollmentDate), 		CONVERT(varchar, PE.RxEnrollmentDate, 6) 		ORDER BY  LableDate 	END END"
dbo,USP_GetPatientsDetails_Hospital," CREATE procedure USP_GetPatientsDetails_Hospital ( 	@Patient_ID int  ) AS BEGIN 	SELECT  		P.Patient_ID, 		P.Account_ID, 		P.Account_Name, 		P.Patient_MRN, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Patient_DOB, 		P.Patient_Contact_ID, 		P.Patient_Contact_name, 		P.Patient_Relation_ID, 		P.Patient_Contact_Phone, 		P.Patient_Contact_email, 		P.Patient_Contact_Add1, 		P.Patient_Contact_Add2, 		P.Patient_Contact_Add3, 		P.Patient_Contact_City, 		P.Patient_Contact_County, 		P.Patient_Contact_State, 		P.ZipCode, 		P.InPatientLogId, 		P.EpisodeId, 		P.HomeVisitType 	From View_Mst_Patient P 	WHERE P.Patient_ID = @Patient_ID END"
dbo,SP_GetAllPatients," Create procedure [dbo].SP_GetAllPatients ( 	@userId int, 	@AccountId INT, 	@search nvarchar(50) = '',  	@EnrollmentStatus int = 0, -- zero will indicate not enrolled, 99 will indicate all enrollment status 	@orderBy nvarchar(50) = 'Paitent_ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON; 	DECLARE @currentYear int = YEAR(GETDATE()); 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);  	WITH Result AS ( 		SELECT  			patient.Patient_ID, 			patient.Account_ID, 			account.Account_Name, 			patient.Patient_First_Name, 			patient.Patient_Last_Name, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS PatientFullName, 			patient.Patient_DOB, 			patientContact.Patient_Contact_Phone, 			Coalesce(patient.Patient_Status, 0) Patient_Status, 			Coalesce(PE.Patient_Enrollment_Status,0) AS Patient_Enrollment_Status, 			patient.Patient_MRN, 			Patient_Gender 		FROM dbo.Mst_Patient patient with (nolock) 		INNER JOIN  			dbo.Mst_Account account with (nolock) ON patient.Account_ID = account.Account_ID AND patient.Account_ID = @AccountId  		LEFT JOIN  			dbo.Trn_Patient_Contact patientContact with (nolock) ON patient.Patient_ID = patientContact.Patient_ID AND patientContact.IsPrimary = 1  		LEFT JOIN 			dbo.Trn_Patient_Enrollment PE with (nolock) ON PE.Patient_ID = patient.Patient_ID AND (PE.Patient_Enrollment_Status IS NULL  			OR PE.UploadedYear = @currentYear OR YEAR(PE.EnrollmentDate) = @currentYear) 		WHERE patient.Account_ID = @AccountId  AND ( (Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 			OR Patient_MRN LIKE '%' + @search + '%' 			OR patientContact.Patient_Contact_Phone LIKE '%' + @search + '%')  			AND (@EnrollmentStatus = 99 OR ISNULL(PE.Patient_Enrollment_Status, 0) = @EnrollmentStatus) 			AND (@isAdmin = 1 OR patient.Patient_Status = 1) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Account_Name' and @orderDir = 'asc' then Account_Name end, 								case when @orderBy = 'Account_Name' and @orderDir = 'desc' then Account_Name end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'Patient_Full_Name' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'Patient_Full_Name' and @orderDir = 'desc' then PatientFullName end desc, 								 								case when @orderBy = 'Patient_DOB' and @orderDir = 'asc' then Patient_DOB end, 								case when @orderBy = 'Patient_DOB' and @orderDir = 'desc' then Patient_DOB end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc,  								case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'asc' then Patient_Enrollment_Status end, 								case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'desc' then Patient_Enrollment_Status end desc,  								case when @orderBy = 'Patient_Contact_Phone' and @orderDir = 'asc' then Patient_Contact_Phone end, 								case when @orderBy = 'Patient_Contact_Phone' and @orderDir = 'desc' then Patient_Contact_Phone end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE --OrderByResult.RowNumber BETWEEN ((@pageIndex * @pageSize) + 1) AND ((@pageIndex + 1) * @pageSize) 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC SP_GetAllPatients 3,5,'',99,'Patient_ID','asc',0,10"
dbo,USP_GetPatientSocialHistoryDetails," create procedure [dbo].[USP_GetPatientSocialHistoryDetails] ( 	@PatientID int, 	@AssessmentID int, 	@PatientActivityID int = 0  ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT  			ID 			,PatientID 			,AssessmentID 			,HighestEducationID 			,OtherHighestEducation 			,LivingSalutationID 			,OtherLivingSalutation 			,CurrentResidentsID 			,GenderIdentity 			,SexualOrientation 			,MaritalStatusID 			,RomanticRelationship 			,OtherRomanticRelationship 			,HasChildren 			,NoOFChildern 			,ChildrenGenderID 			,ChildrenAge 			,MotherLifeStatusID 			,MotherRelationshipID 			,FatherLifeStatusID 			,FatherRelationshipID 			,HasOtherParentalFigure 			,OtherParentalLifeStatusID 			,OtherParentalRelationshipID 			,HasSiblings 			,DevelopmentUpbringing 			,ModeofBirth 			,HasPets 			,PetsDetails 			,OtherPetsDetails 			,SocialSupportNetwork 			,OtherSocialSupportNetwork 			,HasReligiousAffiliation 			,HasHobbies 			,OtherHobbies 			,HasSelfCareBarrier 			,OtherSelfCareBarrier 			,HasBasicNeedsMet 			,OtherBasicNeedsMet 			,HasLegalHistory 			,OtherLegalHistory 			,HasCurrentLegalCharges 			,OtherCurrentLegalCharges 			,IsDeleted 			,MaritalStatusComment 			,RomanticRelationshipComment 			,ReligiousAffiliationComment 			,OtherParentalFigureComment 			,OtherGenderIdentity 			,OtherSexualOrientation 	FROM Trn_SocialHistory  	WHERE PatientID=@PatientID AND AssessmentID= @AssessmentID 	END 	ELSE 	BEGIN 		SELECT  			ID 			,PatientID 			,AssessmentID 			,HighestEducationID 			,OtherHighestEducation 			,LivingSalutationID 			,OtherLivingSalutation 			,CurrentResidentsID 			,GenderIdentity 			,SexualOrientation 			,MaritalStatusID 			,RomanticRelationship 			,OtherRomanticRelationship 			,HasChildren 			,NoOFChildern 			,ChildrenGenderID 			,ChildrenAge 			,MotherLifeStatusID 			,MotherRelationshipID 			,FatherLifeStatusID 			,FatherRelationshipID 			,HasOtherParentalFigure 			,OtherParentalLifeStatusID 			,OtherParentalRelationshipID 			,HasSiblings 			,DevelopmentUpbringing 			,ModeofBirth 			,HasPets 			,PetsDetails 			,OtherPetsDetails 			,SocialSupportNetwork 			,OtherSocialSupportNetwork 			,HasReligiousAffiliation 			,HasHobbies 			,OtherHobbies 			,HasSelfCareBarrier 			,OtherSelfCareBarrier 			,HasBasicNeedsMet 			,OtherBasicNeedsMet 			,HasLegalHistory 			,OtherLegalHistory 			,HasCurrentLegalCharges 			,OtherCurrentLegalCharges 			,IsDeleted 			,MaritalStatusComment 			,RomanticRelationshipComment 			,ReligiousAffiliationComment 			,OtherParentalFigureComment 			,OtherGenderIdentity 			,OtherSexualOrientation 	FROM Trn_SocialHistoryLog  	WHERE PatientID=@PatientID AND PatientActivityID = @PatientActivityID 	END END  -- EXEC USP_GetPatientSocialHistoryDetails 2415, 0"
dbo,SP_GetAllPatientsActivityReport," CREATE procedure [dbo].[SP_GetAllPatientsActivityReport] ( 	@AccountId INT, 	@activityId int, 	@fromDate DATETIME, 	@toDate DATETIME, 	@pccId int, 	@status int, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	With ActivityReportResult AS(SELECT  		patient.Patient_MRN, 		patient.Patient_ID, 		patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 		patient.Patient_Contact_State, 		patient.CMS_Contract_Number, 		PA.Patient_Activity_ID, 		PA.Activity_ID, 		Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) AS Activity_Start_Date, 		PA.Activity_Start_Time, 		PA.Activity_Assigned_To, 		U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName, 		Coalesce(PA.Activity_Start_Status, 1) AS Activity_Start_Status, 		(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 			 AND ( ActivityOutcome = 10 OR ActivityOutcome = 11) -- it should be map with ActivityOutCome enum of name = PatientDishargedFacility or UserContactToPatient 		THEN  'Consult Needed' ELSE CASE WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 AND ( ActivityOutcome = 9 ) -- it should be map with ActivityOutCome enum of name = MrrReviewedAndNoIrregularities 		THEN 'Consult Not Needed' ELSE  ME.Discription END END) AS ActivityName 		FROM Trn_Patient_Activity PA 	INNER JOIN View_Mst_Patient patient ON PA.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountId 	INNER JOIN Mst_Enum ME ON Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue AND ME.EnumType = 'ActivityStatus' 	LEFT JOIN Mst_User U ON U.User_ID = PA.Activity_Assigned_To 	WHERE PA.Activity_ID = @activityId  		AND Convert(Date, Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date)) >= @fromDate  		AND Convert(Date, Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date)) <= @toDate 		AND (@pccId = 0 OR PA.Activity_Assigned_To = @pccId) 		AND (@status = 0  			OR ( @status > 3 AND @status <= 9 AND Coalesce(PA.Activity_Start_Status, 1) = 3 AND ActivityOutcome = 9) -- for only MRR 			OR ( @status > 3 AND @status > 9 AND Coalesce(PA.Activity_Start_Status, 1) = 3 AND ActivityOutcome > 9) -- For only MRR 			OR (Coalesce(PA.Activity_Start_Status, 1) = @status	) -- For Home Visit 		) 	), 	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'asc' then Patient_Contact_State end, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'desc' then Patient_Contact_State end desc, 								 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc,  								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc, 								case when @orderBy = 'ActivityName' and @orderDir = 'asc' then Activity_Start_Status end, 								case when @orderBy = 'ActivityName' and @orderDir = 'desc' then Activity_Start_Status end desc 								 								 			) AS RowNumber FROM ActivityReportResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ActivityReportResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END  --EXEC SP_GetAllPatientsActivityReport 7,3,'04/29/2021','07/31/2021',0,0,'PatientFullName','asc',0,10 "
dbo,USP_GetPatientsQuestionAnswer," Create procedure USP_GetPatientsQuestionAnswer ( 	@PatientID int, 	@QuestionsFor int, 	@AssessmentID INT =	0, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT QM.QuestionID ,QM.QuestionType ,QM.QuestionText ,QM.QuestionFor ,QM.QuestonSubType 		,QO.ID OptionID, QO.OptionsFor, QO.OptionText, QO.OptionValue, QO.HasQuestionLink, QO.LinkQuestionIds 		,Coalesce(PQA.ID, 0) ID 		,Coalesce(PQA.PatientID, @PatientID) PatientID 		,Coalesce(PQA.AssessmentID, @AssessmentID) AssessmentID 		,PQA.AnswerText 		,(CASE WHEN QM.QuestionType = 6 OR QM.QuestionType = 7 -- When Question type is ShortAnswer or LongAnswer then it should be display text as it is saved in answer table. 			THEN PQA.AnswerText  			ELSE (SELECT OptionText FROM Mst_QuestionOptions MQO WHERE MQO.OptionValue = PQA.AnswerText AND MQO.OptionsFor = QM.QuestionFor)  			END) DisplayAnswerText, 		PQA.TypeText, 		PQA.QuantityText, 		PQA.FrequencyText, 		PQA.IsDeleted 	FROM Mst_Questions QM  	INNER JOIN Mst_QuestionOptions QO on QO.OptionsFor=QM.QuestionFor 		AND QO.OptionsFor = @QuestionsFor -- here OptionsFor is the same as @QuestionFor, Make sure that when adding new questions and options in master table, QuestionFor and OptionsFor should be the same. 	LEFT JOIN Trn_PatientQuestionAnswers PQA ON QM.QuestionID = PQA.QuestionID  AND PQA.IsDeleted = 0 		AND PQA.PatientID = @PatientID 		AND PQA.AssessmentID = @AssessmentID 	WHERE QM.QuestionFor = @QuestionsFor  	ORDER BY QM.QuestionID, QO.OptionValue 	END 	ELSE 	BEGIN 		SELECT QM.QuestionID ,QM.QuestionType ,QM.QuestionText ,QM.QuestionFor ,QM.QuestonSubType 		,QO.ID OptionID, QO.OptionsFor, QO.OptionText, QO.OptionValue, QO.HasQuestionLink, QO.LinkQuestionIds 		,Coalesce(PQA.ID, 0) ID 		,Coalesce(PQA.PatientID, @PatientID) PatientID 		,Coalesce(PQA.AssessmentID, @AssessmentID) AssessmentID 		,PQA.AnswerText 		,(CASE WHEN QM.QuestionType = 6 OR QM.QuestionType = 7 -- When Question type is ShortAnswer or LongAnswer then it should be display text as it is saved in answer table. 			THEN PQA.AnswerText  			ELSE (SELECT OptionText FROM Mst_QuestionOptions MQO WHERE MQO.OptionValue = PQA.AnswerText AND MQO.OptionsFor = QM.QuestionFor)  			END) DisplayAnswerText, 		PQA.TypeText, 		PQA.QuantityText, 		PQA.FrequencyText, 		PQA.IsDeleted 	FROM Mst_Questions QM  	INNER JOIN Mst_QuestionOptions QO on QO.OptionsFor=QM.QuestionFor 		AND QO.OptionsFor = @QuestionsFor -- here OptionsFor is the same as @QuestionFor, Make sure that when adding new questions and options in master table, QuestionFor and OptionsFor should be the same. 	LEFT JOIN Trn_PatientQuestionAnswersLog PQA ON QM.QuestionID = PQA.QuestionID  AND PQA.IsDeleted = 0 		AND PQA.PatientID = @PatientID 		AND PQA.AssessmentID = @AssessmentID 	AND PQA.PatientActivityID = @PatientActivityID 	WHERE QM.QuestionFor = @QuestionsFor  	ORDER BY QM.QuestionID, QO.OptionValue 	END END  -- EXEC USP_GetPatientsQuestionAnswer 3,1"
dbo,SP_GetClinicalIntervention," CREATE PROCEDURE [dbo].[SP_GetClinicalIntervention] @PatientID int, @Patient_Dosage_ID int AS BEGIN SELECT  ci.ID       ,ci.Patient_ID       ,ci.Med_ID 	  ,med.Med_Name 	  ,ms.Med_Strength 	  ,md.Patient_Dosage_ID       ,ci.InterventionType_ID 	  ,intpe.InterventionTypeName 	  ,intpe.InterventionSelectionType 	  ,intpe.DisplayActionLabel       ,ci.InterventionAction_ID       ,ci.InterventionActionDetails       ,ci.IntervenionActionType_ID       ,ci.IsDeleted, 	  ci.PharmaConsultActionId, 	  ci.PharmaConsultResolutionId, 	  ci.PharmaConsultResolutionActionId, 	  ci.PharmaConsultActionName, 	  ci.PharmaConsultResolutiosName, 	  ci.PharmaConsultResolutiosActionName, 	  ci.Note  	  FROM Trn_Clinical_Intervention ci INNER JOIN Trn_Patient_Med_Dosage md ON ci.Patient_ID = md.Patient_ID AND ci.Patient_Dosage_ID = md.Patient_Dosage_ID INNER JOIN Mst_InterventionType intpe ON ci.InterventionType_ID = intpe.ID INNER JOIN Mst_Medicine med ON md.Med_ID = med.Med_ID INNER JOIN Mst_Med_Strength ms ON md.Med_Strength_ID = ms.ID   WHERE ci.Patient_ID = @PatientID    AND (@Patient_Dosage_ID = 0 OR ci.Patient_Dosage_ID = @Patient_Dosage_ID )   AND ci.IsDeleted = 0 END "
dbo,USP_GetPatientStatusReasonList," Create procedure USP_GetPatientStatusReasonList (@StatusId INT) AS BEGIN 	SELECT ID, StatusId, ReasonId,ReasonText,HasTextField,TextFieldLableName,HasReason 	FROM MstPatientStatusReasons  	WHERE StatusId = @StatusId END  -- EXEC USP_GetPatientStatusReasonList 11"
dbo,SP_GetConversionPatientDetail," Create procedure SP_GetConversionPatientDetail ( 	@Patient_ID int  ) AS BEGIN 	Declare @CurrentYear int = Year(GetDate()); 	SELECT  		P.Patient_ID, 		P.Patient_MBI, 		P.Account_ID, 		P.Account_Name, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Patient_MRN, 		P.Patient_DOB, 		P.Patient_SSN, 		P.Patient_Race, 		P.Patient_Gender, 		P.Patient_LanguageID, 		ML.Language_Description, 		P.Patient_Low_Income, 		P.Patient_Can_Contact, 		P.Patient_Status, 		P.Patient_Notes, 		P.Patient_CreatedAt, 		P.Patient_CreatedBy, 		P.Patient_UpdatedAt, 		P.Patient_UpdatedBy, 		P.Patient_Contact_ID, 		P.Patient_Contact_name, 		P.Patient_Relation_ID, 		P.Patient_Contact_Phone, 		P.Patient_Contact_email, 		P.Patient_Contact_Add1, 		P.Patient_Contact_Add2, 		P.Patient_Contact_Add3, 		P.Patient_Contact_City, 		P.Patient_Contact_County, 		P.Patient_Contact_State, 		P.ZipCode, 		PE.Patient_Enroll_ID, 		PE.Patient_Enrollment_Status, 		PE.UploadedYear, 		PE.EnrollmentDate, 		PE.RxHomeDelivery, 		PE.RxEnrollmentDate, 		p.CMRCompleted, 		p.CMROutcome, 		p.MACScore, 		p.MADScore, 		p.MAHScore, 		p.SUPDScore, 		PC.ID AS ConversionID, 		PC.PackagingType, 		PC.Notes 	From View_Mst_Patient P  	LEFT JOIN Mst_Language ML ON ML.Language_ID = P.Patient_LanguageID 	LEFT JOIN Trn_Patient_Enrollment PE ON PE.Patient_ID = P.Patient_ID AND (UploadedYear = @CurrentYear OR YEAR(PE.EnrollmentDate) = @CurrentYear) 	INNER JOIN Trn_Patient_Conversion PC ON PC.PatientId = p.Patient_ID 	WHERE P.Patient_ID = @Patient_ID END"
dbo,USP_GetPatientStatusReasonOptionsList," Create procedure USP_GetPatientStatusReasonOptionsList (@StatusId INT, @ReasonId INT) AS BEGIN 	SELECT ID, StatusId, ReasonId,OptionID,OptionText,HasTextField,TextFieldLableName,HasReason 	FROM MstPatientStatusReasonsOptions  	WHERE StatusId = @StatusId AND ReasonId = @ReasonId END  -- EXEC USP_GetPatientStatusReasonOptionsList 6,5"
dbo,SP_GetConversionQueue," CREATE procedure [dbo].[SP_GetConversionQueue] ( 	@search nvarchar(50) = '',  	@AccountId INT, 	@orderBy nvarchar(50) = 'CreatedOn',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999, 	@filterBy varchar(100) = '', 	@filterByTimezone varchar(100) = '', 	@filterByRegion varchar(100) = '' ) AS BEGIN SET NOCOUNT ON; DECLARE @HomeVisit1ActivityID int SET @HomeVisit1ActivityID = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'HomeVisit' AND ActivityNumber = 1);  With ConversionQueueResult AS ( 	SELECT  		V.Patient_ID, 		V.Account_ID, 		V.Account_Name, 		V.Patient_First_Name, 		V.Patient_Middle_Name, 		V.Patient_Last_Name, 		(V.Patient_First_Name + ' ' + V.Patient_Last_Name) AS PatientFullName, 		V.Patient_MRN, 		V.Patient_Contact_ID, 		V.Patient_Contact_name, 		V.Patient_Relation_ID, 		V.Patient_Contact_Phone, 		V.Patient_Contact_email, 		V.Patient_Contact_State, 		PC.ID AS PatientConversionId, 		Coalesce(PC.RxHomeDelivery, 0) AS RxHomeDelivery, 		PC.RxEnrollmentDate, 		PC.CreatedOn, 		PC.UpdatedOn, 		PC.UpdatedBy, 		PC.ConversionStatus AS ConversionStatusID, 		EN.Discription AS ConversionStatus, 		usr.User_First_Name+ ' ' + usr.User_Last_Name AS CreatedByName, 		users.User_First_Name+ ' ' + users.User_Last_Name AS UpdatedByName, 		PC.RAComplete, 		PC.TransferRequest, 		PC.IsCompleted, 		PC.ViewPageNo, 		V.TimeZoneName, 		R.Region 	FROM dbo.Trn_Patient_Conversion PC with (nolock) 	INNER JOIN dbo.Trn_Patient_Activity TPA with (nolock) ON PC.PatientId = TPA.Patient_ID AND TPA.Activity_ID = @HomeVisit1ActivityID  	INNER JOIN dbo.View_Mst_Patient V with (nolock) ON V.Patient_ID = PC.PatientId AND V.Account_ID = @AccountId 	INNER JOIN dbo.Mst_User usr with (nolock) ON PC.CreatedBy = usr.User_ID 	INNER JOIN dbo.Trn_Patient_UHCDetails UD with (nolock) ON V.Patient_ID = UD.PatientId 	LEFT JOIN dbo.Mst_Enum EN with (nolock) ON (ISNULL(PC.ConversionStatus, 1)) = EN.EnumValue AND EN.EnumType = 'ActivityStatus' 	 	LEFT JOIN dbo.Mst_User users with (nolock) ON PC.UpdatedBy = users.User_ID 	LEFT JOIN Mst_RegionToCMSContact R ON UD.CMS_Contract_Number = R.CMSContactNumber AND V.Patient_Contact_State= R.State 	WHERE (ISNULL(PC.RxHomeDelivery, 0) = 1) 		--Searching on following feilds 		AND ( @search = '' OR ( 								(V.Patient_First_Name + ' ' + V.Patient_Last_Name)  LIKE '%' + @search + '%'  								OR V.Patient_MRN LIKE '%' + @search + '%'  								OR V.Patient_Contact_Phone LIKE '%' + @search + '%' 								) 			) 		AND (@filterBy = ''  					OR (ISNULL(PC.ConversionStatus, 1) in (SELECT * FROM dbo.func_Split(@filterBy, ','))) 			) 		AND (@filterByRegion = ''  					OR (ISNULL(R.Region, '') in (SELECT * FROM dbo.func_Split(@filterByRegion, ','))) 			) 		AND (@filterByTimezone = ''  				OR (ISNULL(V.TimeZoneName, '') in (SELECT * FROM dbo.func_Split(@filterByTimezone, ','))) 		) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'RxEnrollmentDate' and @orderDir = 'asc' then RxEnrollmentDate end, 								case when @orderBy = 'RxEnrollmentDate' and @orderDir = 'desc' then RxEnrollmentDate end desc, 								case when @orderBy = 'UpdatedOn' and @orderDir = 'asc' then CreatedOn end, 								case when @orderBy = 'UpdatedOn' and @orderDir = 'desc' then CreatedOn end desc, 								case when @orderBy = 'UpdatedByName' and @orderDir = 'asc' then UpdatedByName end, 								case when @orderBy = 'UpdatedByName' and @orderDir = 'desc' then UpdatedByName end desc 								 			) AS RowNumber FROM ConversionQueueResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ConversionQueueResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 		 END  --EXEC SP_GetConversionQueue"
dbo,USP_GetPatientTraumaHistoryDetails," create procedure [dbo].[USP_GetPatientTraumaHistoryDetails] ( 	@PatientID int, 	@AssessmentID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT THL.ID AS MstTHID, 		THL.TraumaName,  		THL.TraumaHistoryTypeID,  		TTH.ID AS MyID, 		ISNULL(TTH.ID,0) AS ID,  		Coalesce(TTH.PatientID,@PatientID,0) AS PatientID, 		Coalesce(TTH.AssessmentID,@AssessmentID,0) AS AssessmentID 		,ISNULL(TTH.TraumaHistoryID,0) AS TraumaHistoryID, 		TTH.ChildHoodTraumaComment,  		TTH.AdultHoodTraumaComment,  		TTH.RalationshipToPatient, 		TTH.DateOfDeath, 		TTH.AdditionalComment, 		TTH.OtherTraumaComments, 		Coalesce(TTH.IsDeleted,0) IsDeleted 	FROM MstTramaHistoryList THL 	LEFT JOIN Trn_TraumaHistory TTH ON THL.ID = TTH.TraumaHistoryID  	AND TTH.PatientID=@PatientID AND TTH.AssessmentID= @AssessmentID 	END 	ELSE 	BEGIN 		SELECT THL.ID AS MstTHID, 		THL.TraumaName,  		THL.TraumaHistoryTypeID,  		TTH.ID AS MyID, 		ISNULL(TTH.ID,0) AS ID,  		Coalesce(TTH.PatientID,@PatientID,0) AS PatientID, 		Coalesce(TTH.AssessmentID,@AssessmentID,0) AS AssessmentID 		,ISNULL(TTH.TraumaHistoryID,0) AS TraumaHistoryID, 		TTH.ChildHoodTraumaComment,  		TTH.AdultHoodTraumaComment,  		TTH.RalationshipToPatient, 		TTH.DateOfDeath, 		TTH.AdditionalComment, 		TTH.OtherTraumaComments, 		Coalesce(TTH.IsDeleted,0) IsDeleted 	FROM MstTramaHistoryList THL 	LEFT JOIN Trn_TraumaHistoryLog TTH ON THL.ID = TTH.TraumaHistoryID  	AND TTH.PatientID=@PatientID AND TTH.AssessmentID= @AssessmentID AND TTH.PatientActivityID = @PatientActivityID 	END END  -- EXEC USP_GetPatientTraumaHistoryDetails 2415, 0, 0"
dbo,SP_GetConversionQueueDetails," CREATE procedure SP_GetConversionQueueDetails ( 	@PatientId int ) AS BEGIN 	Select  		PMD.Patient_Dosage_ID, 		PMD.Patient_ID, 		PMD.Patient_Dosage_Directions, 		PMD.Med_Strength_ID, 		M.Med_ID, 		M.Med_Name, 		MMS.Med_Strength, 		PMD.Prescriber_ID, 		MP.PrescriberFirstName, 		MP.PrescriberLastName, 		PMD.Pharmacy_ID, 		MPharm.PharmacyName, 		Convert(Date,PMD.Refill_Prev_Date) AS Refill_Prev_Date, 		Convert(Date,PMD.Refill_Next_Date) AS Refill_Next_Date, 		PMD.PharmacyNPI, 		PMD.TransferNeeded, 		PMD.RANeeded, 		PMD.NotFilling, 		PMD.MedicationRecieved, 		PMD.MedicationDiscontinued, 		TPC.RAComplete, 		TPC.TransferRequest, 		TPC.IsCompleted 		From Trn_Patient_Med_Dosage PMD  	INNER JOIN Mst_Medicine M ON M.Med_ID = PMD.Med_ID 	INNER JOIN Mst_Prescriber MP ON MP.Id = PMD.Prescriber_ID 	LEFT JOIN Mst_Med_Strength MMS ON MMS.ID = PMD.Med_Strength_ID 	LEFT JOIN Mst_Pharmacy MPharm ON MPharm.Id = PMD.Pharmacy_ID 	INNER JOIN Trn_Patient_Conversion TPC ON TPC.PatientId = PMD.Patient_ID 	WHERE (@PatientId = 0 OR PMD.Patient_ID = @PatientId) 		 END"
dbo,USP_GetPayorActivityReport," Create procedure [DBO].USP_GetPayorActivityReport ( 	@AccountId INT, 	@AssignTo INT, 	@FromDate Date, 	@ToDate Date,  	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	SET NOCOUNT ON; 	SET @ToDate = DATEADD(Day,1,@ToDate); 	 With ActivityReportResult AS (  	 SELECT  		 P.Patient_ID, 		 P.Patient_First_Name+ ' '+P.Patient_Last_Name PatientFullName, 		 P.Patient_MRN 		,Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) AS ActivityDate 		,A.Activity_Name 		,E.Discription ActivityStatus 		,PA.ActivityOutcomeName 		,U.User_First_Name+' '+U.User_Last_Name AssignToName 		--,PA.AttemptNumber 	FROM Mst_Patient P 	INNER JOIN Trn_Patient_Activity PA ON P.Patient_ID = PA.Patient_ID 	INNER JOIN Mst_Activity A ON PA.Activity_ID = A.Activity_ID 	INNER JOIN Mst_Enum E ON ISNULL(PA.Activity_Start_Status,1) = E.EnumValue AND E.EnumType = 'ActivityStatus' 	LEFT JOIN Mst_User U ON PA.Activity_Assigned_To = U.User_ID 	WHERE P.Account_ID = @AccountId 	AND (@AssignTo = 0 OR PA.Activity_Assigned_To = @AssignTo) 	AND Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) >= @FromDate 	AND Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date ) < @ToDate 	--ORDER BY P.Patient_ID,ActivityDate ),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					 case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					 case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 					 case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 					 case when @orderBy = 'Activity_Name' and @orderDir = 'asc' then Activity_Name end, 					 case when @orderBy = 'Activity_Name' and @orderDir = 'desc' then Activity_Name end desc, 					 case when @orderBy = 'AssignToName' and @orderDir = 'asc' then AssignToName end, 					 case when @orderBy = 'AssignToName' and @orderDir = 'desc' then AssignToName end desc 			) AS RowNumber FROM ActivityReportResult  	) 	 	SELECT *, (Select Count(Patient_ID) FROM ActivityReportResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END"
dbo,SP_GetDashboardActivityCount," Create procedure SP_GetDashboardActivityCount (@userId INT, @AccountId INT, @patientId INT = 0) AS BEGIN 	DECLARE @ActivitySort varchar(50)= 'Delayed'; 	Declare @isAdmin BIT 	 	Declare @isHospitalAccount BIT =  0; 	SELECT @isHospitalAccount = (CASE WHEN AccountType = 2 THEN 1 else 0 end) FROM Mst_Account WHERE Account_ID = @AccountId  	SET @isAdmin = dbo.func_IsUserAdmin(@userId);	 	DECLARE @TodayDate Date = (Select Convert(Date, GetDate())); 	DECLARE @TodaysActivityDetailCount INT; 	DECLARE @TodaysActivityDetail_CompletedCount INT; 	DECLARE @TodaysActivityDetail_InProgressCount INT; 	DECLARE @TodaysActivityDetail_YetToStartCount INT; 	DECLARE @DelayedActivityCount INT; 	DECLARE @EnrollmentPendingCount INT;  	SET @TodaysActivityDetailCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA 										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.PatientEnrollmentId = ISNULL(TPA.Patient_Enroll_ID,0) 										WHERE P.Patient_Status = 1  											AND (((@isHospitalAccount = 1 OR @isAdmin = 1) AND TPA.Activity_Assigned_To > 0)OR TPA.Activity_Assigned_To = @userId)  											AND TPA.Activity_Start_Date = @TodayDate  											AND P.Account_ID = @AccountId  									); 	SET @TodaysActivityDetail_CompletedCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA 										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.PatientEnrollmentId = ISNULL(TPA.Patient_Enroll_ID,0) 										WHERE P.Patient_Status = 1  											AND (((@isHospitalAccount = 1 OR @isAdmin = 1) AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND P.Account_ID = @AccountId  											AND TPA.Activity_Start_Date = @TodayDate  											AND TPA.Activity_Start_Status = 3 									); 	SET @TodaysActivityDetail_InProgressCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA  										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.PatientEnrollmentId = ISNULL(TPA.Patient_Enroll_ID,0) 										WHERE P.Patient_Status = 1  											AND (((@isHospitalAccount = 1 OR @isAdmin = 1) AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND P.Account_ID = @AccountId  											AND TPA.Activity_Start_Date  = @TodayDate  											AND TPA.Activity_Start_Status = 2 									); 	SET @TodaysActivityDetail_YetToStartCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA  										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.PatientEnrollmentId = ISNULL(TPA.Patient_Enroll_ID,0) 										WHERE P.Patient_Status = 1  											AND (((@isHospitalAccount = 1 OR @isAdmin = 1) AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND Coalesce(TPA.Activity_Start_Status, 1) = 1 											AND TPA.Activity_Start_Date = @TodayDate 											AND P.Account_ID = @AccountId 									); 	SET @DelayedActivityCount = (Select COUNT(TPA.Patient_Activity_ID) 									From Trn_Patient_Activity TPA  									INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.PatientEnrollmentId = ISNULL(TPA.Patient_Enroll_ID,0) 									WHERE P.Patient_Status = 1  AND 										(((@isHospitalAccount = 1 OR @isAdmin = 1) AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  										AND TPA.Activity_Start_Date < @TodayDate  										AND P.Account_ID = @AccountId 										AND Coalesce(TPA.Activity_Start_Status, 1) in (1,2) 								); 	SET @EnrollmentPendingCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA  										INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID 										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.PatientEnrollmentId = ISNULL(TPA.Patient_Enroll_ID,0) 										WHERE P.Patient_Status = 1  AND 											(((@isHospitalAccount = 1 OR @isAdmin = 1) AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND MA.ActivityType = 'EnrollPatient' 											AND P.Account_ID = @AccountId 											AND Coalesce(TPA.Activity_Start_Status, 1) IN (1, 2)  									);  		SELECT @TodaysActivityDetailCount AS TodaysActivityDetailCount,@TodaysActivityDetail_CompletedCount AS TodaysActivityDetail_CompletedCount,@TodaysActivityDetail_InProgressCount AS TodaysActivityDetail_InProgressCount, 		@TodaysActivityDetail_YetToStartCount AS TodaysActivityDetail_YetToStartCount,@DelayedActivityCount AS DelayedActivityCount,@EnrollmentPendingCount AS EnrollmentPendingCount END																   -- EXEC SP_GetDashboardActivityCount 3, 5 --SP_Recompile SP_GetDashboardActivityCount"
dbo,USP_GetPhysicianDetails," Create procedure [dbo].USP_GetPhysicianDetails ( 	@PhysicianId INT, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON;  	WITH Result AS ( 		SELECT  			P.ID, 			P.PhysicianName, 			P.Phone, 			P.Email, 			P.IsDeleted, 			P.CreatedBy, 			U.User_First_Name + ' '+ U.User_Last_Name AS CreatedByName,  			P.UpdatedBy, 			Up.User_First_Name + ' '+ Up.User_Last_Name AS UpdatedByName 		FROM dbo.Mst_Physician P with (nolock) 		LEFT JOIN Mst_User U ON P.CreatedBy = U.User_ID  		LEFT JOIN Mst_User Up ON P.UpdatedBy = Up.User_ID 		WHERE (@PhysicianId = 0 OR P.ID = @PhysicianId)  			AND (P.PhysicianName  LIKE '%' + @search + '%' OR P.Phone LIKE '%' + @search + '%') 			AND (@pageSize <= 100 OR P.IsDeleted = 0) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PhysicianName' and @orderDir = 'asc' then PhysicianName end, 								case when @orderBy = 'PhysicianName' and @orderDir = 'desc' then PhysicianName end desc, 								case when @orderBy = 'ID' and @orderDir = 'asc' then ID end, 								case when @orderBy = 'ID' and @orderDir = 'desc' then ID end desc, 								case when @orderBy = 'Phone' and @orderDir = 'asc' then Phone end, 								case when @orderBy = 'Phone' and @orderDir = 'desc' then Phone end desc, 								case when @orderBy = 'Email' and @orderDir = 'asc' then Email end, 								case when @orderBy = 'Email' and @orderDir = 'desc' then Email end desc, 								 								case when @orderBy = 'CreatedByName' and @orderDir = 'asc' then CreatedByName end, 								case when @orderBy = 'CreatedByName' and @orderDir = 'desc' then CreatedByName end desc, 								case when @orderBy = 'UpdatedByName' and @orderDir = 'asc' then UpdatedByName end, 								case when @orderBy = 'UpdatedByName' and @orderDir = 'desc' then UpdatedByName end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE --OrderByResult.RowNumber BETWEEN ((@pageIndex * @pageSize) + 1) AND ((@pageIndex + 1) * @pageSize) 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --EXEC USP_GetPhysicianDetails 0,''"
dbo,SP_GetEnrollmentQueue," Create procedure [DBO].SP_GetEnrollmentQueue (@userId INT, @AccountId INT, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'CreatedOn',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999, 	@filterByTimezone varchar(100) = '', 	@filterByRegion varchar(100) = '', 	@filterByCallAttempt varchar(100) = '', 	@filterByNextRefillDate varchar(100) = '', 	@IsCurrentYearEnrollmentQueue bit = 1 ) AS BEGIN 	 	Declare @isAdmin BIT; 	DECLARE @YEAR INT= YEAR(GETDATE()); 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);	 	SET NOCOUNT ON; 	 With EnrollmentResult AS (   	SELECT  		V.Patient_ID, 		V.Account_ID, 		V.Account_Name, 		V.Patient_First_Name, 		V.Patient_Middle_Name, 		V.Patient_Last_Name, 		(V.Patient_First_Name + ' ' + V.Patient_Last_Name) AS PatientFullName, 		V.Patient_MRN, 		V.Patient_MBI, 		V.Patient_Contact_ID, 		V.Patient_Contact_name, 		V.Patient_Relation_ID, 		V.Patient_Contact_Phone, 		V.Patient_Contact_email, 		V.Patient_Contact_State, 		PE.Patient_Enroll_ID, 		PE.Patient_Enrollment_Note, 		PE.Patient_Enrollment_Status AS Patient_Enrollment_Status, 		ISNULL(PC.RxHomeDelivery, 0) AS RxHomeDelivery, 		PC.RxEnrollmentDate, 		PE.CreatedOn, 		EA.AssignedUserId, 		U.User_First_Name + ' ' + U.User_Last_Name AS AssignedToName, 		EA.AttemptDate, 		ISNULL(EA.AttemptStatus, 0) AttemptStatus, 		EA.Id AS AttemptId, 		ISNULL(EA.AttemptNumber, 0) AttemptNumber, 		EA.PrimaryCallOutcome, 		EA.SecondaryCallOutcome, 		PE.CreatedBy, 		'' AS CreatedByName, 		PE.UpdatedOn, 		PE.UpdatedBy, 		'' AS UpdatedByName, 		V.MACScore, 		V.MADScore, 		V.MAHScore, 		V.SUPDScore, 		V.ZipCode, 		V.CMS_Contract_Number, 		V.TimeZoneName, 		R.Region,		 		CASE WHEN V.CLIENT_DEF_3 IN (1,2,5,6) THEN 'Y' ELSE 'N' END SUPD, 		CASE WHEN V.CLIENT_DEF_3 IN (3,4,5,6) THEN 'Y' ELSE 'N' END SPC, 		V.ReFillDueDate, 		PE.UploadedYear 	FROM dbo.Trn_Patient_Enrollment PE with (nolock) 	INNER JOIN dbo.View_Mst_Patient V with (nolock) ON V.Patient_ID = PE.Patient_ID AND V.Account_ID = @AccountId 			AND PE.Patient_Enrollment_Status = 0 AND V.Patient_Status = 1 	INNER JOIN dbo.Trn_Patient_UHCDetails UD with (nolock) ON V.Patient_ID = UD.PatientId 	CROSS APPLY funcMaxEnrollmentAttemptNumber(PE.Patient_Enroll_ID) maxAttempt 	LEFT JOIN Trn_Enrollment_Attempt EA ON EA.EnrollmentId = PE.Patient_Enroll_ID  		AND EA.EnrollmentId = maxAttempt.EnrollmentId 		AND EA.AttemptNumber = maxAttempt.AttemptNumber 	LEFT JOIN dbo.Trn_Patient_Conversion PC with (nolock) ON PC.PatientId = PE.Patient_ID  	LEFT JOIN dbo.Mst_User U with (nolock) ON U.User_ID = EA.AssignedUserId 	LEFT JOIN Mst_RegionToCMSContact R ON UD.CMS_Contract_Number = R.CMSContactNumber AND V.Patient_Contact_State= R.State 	WHERE  		--Searching on following feilds 		( @search ='' OR  			((V.Patient_First_Name + ' ' + V.Patient_Last_Name)  LIKE '%' + @search + '%' 					OR V.Patient_MRN LIKE '%' + @search + '%' 					OR V.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 		) 		--Getting only Yet start and In progress  		--Here make a note the NULL or 0 for Yet to Start and 1 is for in progress (These values need to map with AttemptStatus enum) 		AND (EA.AttemptStatus IS NULL OR EA.AttemptStatus IN (0,1)) 		 		--If the user is Admin the getting all queue entries  		--If the user is not admin getting assigned and yet to start queue entries  		AND (@isAdmin = 1 OR EA.AssignedUserId IS NULL OR EA.AssignedUserId = @userId) 		AND (@filterByCallAttempt = ''  					OR (ISNULL(EA.AttemptNumber, 0) in (SELECT * FROM dbo.func_Split(@filterByCallAttempt, ','))) 			) 		AND (@filterByRegion = ''  					OR (ISNULL(R.Region, '') in (SELECT * FROM dbo.func_Split(@filterByRegion, ','))) 			) 		AND (@filterByTimezone = ''  				OR (ISNULL(V.TimeZoneName, '') in (SELECT * FROM dbo.func_Split(@filterByTimezone, ','))) 		) 		AND (@filterByNextRefillDate = ''  				OR (@filterByNextRefillDate = '1' AND V.ReFillDueDate < GETDATE())-- @filterByNextRefillDate = 1 For Past 				OR (@filterByNextRefillDate = '2' AND V.ReFillDueDate = GETDATE())-- @filterByNextRefillDate = 2 For Current 				OR (@filterByNextRefillDate = '3' AND V.ReFillDueDate > GETDATE())-- @filterByNextRefillDate = 3 For Future 		)		 		AND ((@IsCurrentYearEnrollmentQueue = 0 AND PE.UploadedYear < @YEAR) 		      OR (@IsCurrentYearEnrollmentQueue = 1 AND PE.UploadedYear = @YEAR)) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								--case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'asc' then Patient_Enrollment_Status end, 								--case when @orderBy = 'Patient_Enrollment_Status' and @orderDir = 'desc' then Patient_Enrollment_Status end desc, 								case when @orderBy = 'AssignedToName' and @orderDir = 'asc' then AssignedToName end, 								case when @orderBy = 'AssignedToName' and @orderDir = 'desc' then AssignedToName end desc, 								case when @orderBy = 'AttemptNumber' and @orderDir = 'asc' then AttemptNumber end, 								case when @orderBy = 'AttemptNumber' and @orderDir = 'desc' then AttemptNumber end desc, 								case when @orderBy = 'AttemptDate' and @orderDir = 'asc' then AttemptDate end, 								case when @orderBy = 'AttemptDate' and @orderDir = 'desc' then AttemptDate end desc, 								case when @orderBy = 'AttemptStatus' and @orderDir = 'asc' then AttemptStatus end, 								case when @orderBy = 'AttemptStatus' and @orderDir = 'desc' then AttemptStatus end desc, 								case when @orderBy = 'Attempt_Status_Name' and @orderDir = 'asc' then AttemptStatus end, 								case when @orderBy = 'Attempt_Status_Name' and @orderDir = 'desc' then AttemptStatus end desc, 								case when @orderBy = 'ReFillDueDate' and @orderDir = 'asc' then ReFillDueDate end, 								case when @orderBy = 'ReFillDueDate' and @orderDir = 'desc' then ReFillDueDate end desc 								 			) AS RowNumber FROM EnrollmentResult  	)   	SELECT *, (Select Count(Patient_ID) FROM EnrollmentResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 		 END --EXEC SP_GetEnrollmentQueue 0,5,'','','',0,10,'','',''"
dbo,USP_GetPracticeBillingInfo," CREATE PROCEDURE [dbo].[USP_GetPracticeBillingInfo] ( 	@PracticeID int, 	@BillingCode varchar(200) = '' ) AS BEGIN SELECT  MB.ID as BillingCodeID, 		MB.BillingCode, 		TP.ID, 		TP.PracticeID, 		coalesce( TP.Fees,MB.Fees) as Fees 	  FROM MstBillingCodeFees MB 	  Left join TrnPracticeBillingFeesInfo TP ON MB.ID = TP.BillingCodeID 	  AND TP.PracticeID = @PracticeID 	  where (mb.BillingCode LIKE '%' + @BillingCode + '%' OR @BillingCode = '')   END   --exec USP_GetPracticeBillingInfo 0"
dbo,SP_GetEnrollmentQueue_For_NoContact," Create procedure [DBO].SP_GetEnrollmentQueue_For_NoContact (@userId INT, @AccountId INT, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'CreatedOn',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999, 	@filterByTimezone varchar(100) = '', 	@filterByRegion varchar(100) = '', 	@filterByCallAttempt varchar(100) = '', 	@filterByNextRefillDate varchar(100) = '' ) AS BEGIN 	Declare @IsCurrentYearEnrollmentQueue bit = 1; 	Declare @isAdmin BIT; 	DECLARE @YEAR INT= YEAR(GETDATE()); 	SET @isAdmin = dbo.func_IsUserAdmin(@userId);	 	SET NOCOUNT ON; 	 With EnrollmentResultForNoContact AS (   	SELECT  		V.Patient_ID, 		V.Account_ID, 		V.Account_Name, 		V.Patient_First_Name, 		V.Patient_Middle_Name, 		V.Patient_Last_Name, 		(V.Patient_First_Name + ' ' + V.Patient_Last_Name) AS PatientFullName, 		V.Patient_MRN, 		V.Patient_MBI, 		V.Patient_Contact_ID, 		V.Patient_Contact_name, 		V.Patient_Relation_ID, 		V.Patient_Contact_Phone, 		V.Patient_Contact_email, 		V.Patient_Contact_State, 		PE.Patient_Enroll_ID, 		PE.Patient_Enrollment_Note, 		PE.Patient_Enrollment_Status AS Patient_Enrollment_Status, 		ISNULL(PC.RxHomeDelivery, 0) AS RxHomeDelivery, 		PC.RxEnrollmentDate, 		PE.CreatedOn, 		EA.AssignedUserId, 		U.User_First_Name + ' ' + U.User_Last_Name AS AssignedToName, 		EA.AttemptDate, 		ISNULL(EA.AttemptStatus, 0) AttemptStatus, 		EA.Id AS AttemptId, 		ISNULL(EA.AttemptNumber, 0) AttemptNumber, 		EA.PrimaryCallOutcome, 		EA.SecondaryCallOutcome, 		PE.CreatedBy, 		'' AS CreatedByName, 		PE.UpdatedOn, 		PE.UpdatedBy, 		'' AS UpdatedByName, 		V.MACScore, 		V.MADScore, 		V.MAHScore, 		V.SUPDScore, 		V.ZipCode, 		V.CMS_Contract_Number, 		V.TimeZoneName, 		R.Region,		 		CASE WHEN V.CLIENT_DEF_3 IN (1,2,5,6) THEN 'Y' ELSE 'N' END SUPD, 		CASE WHEN V.CLIENT_DEF_3 IN (3,4,5,6) THEN 'Y' ELSE 'N' END SPC, 		V.ReFillDueDate, 		PE.UploadedYear 	FROM dbo.Trn_Patient_Enrollment PE with (nolock) 	INNER JOIN dbo.View_Mst_Patient V with (nolock) ON V.Patient_ID = PE.Patient_ID AND V.Account_ID = @AccountId 			AND PE.Patient_Enrollment_Status = 6 AND V.Patient_Status = 1 	LEFT JOIN dbo.Trn_Patient_UHCDetails UD with (nolock) ON V.Patient_ID = UD.PatientId 	CROSS APPLY funcMaxEnrollmentAttemptNumber(PE.Patient_Enroll_ID) maxAttempt 	LEFT JOIN Trn_Enrollment_Attempt EA ON EA.EnrollmentId = PE.Patient_Enroll_ID  		AND EA.EnrollmentId = maxAttempt.EnrollmentId 		AND EA.AttemptNumber = maxAttempt.AttemptNumber 	LEFT JOIN dbo.Trn_Patient_Conversion PC with (nolock) ON PC.PatientId = PE.Patient_ID  	LEFT JOIN dbo.Mst_User U with (nolock) ON U.User_ID = EA.AssignedUserId 	LEFT JOIN Mst_RegionToCMSContact R ON UD.CMS_Contract_Number = R.CMSContactNumber AND V.Patient_Contact_State= R.State 	WHERE  		--Searching on following feilds 		( @search ='' OR  			((V.Patient_First_Name + ' ' + V.Patient_Last_Name)  LIKE '%' + @search + '%' 					OR V.Patient_MRN LIKE '%' + @search + '%' 					OR V.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 		) 		--Getting only for NoContact 		--AND PE.Patient_Enrollment_Status = 6 		--AND ISNULL(EA.AttemptNumber, 0) >=  3		 		--If the user is Admin the getting all queue entries  		--If the user is not admin getting assigned and yet to start queue entries  		--AND (@isAdmin = 1 OR EA.AssignedUserId IS NULL OR EA.AssignedUserId = @userId) 		AND (@filterByCallAttempt = ''  					OR (ISNULL(EA.AttemptNumber, 0) in (SELECT * FROM dbo.func_Split(@filterByCallAttempt, ','))) 			) 		AND (@filterByRegion = ''  					OR (ISNULL(R.Region, '') in (SELECT * FROM dbo.func_Split(@filterByRegion, ','))) 			) 		AND (@filterByTimezone = ''  				OR (ISNULL(V.TimeZoneName, '') in (SELECT * FROM dbo.func_Split(@filterByTimezone, ','))) 		) 		AND (@filterByNextRefillDate = ''  				OR (@filterByNextRefillDate = '1' AND V.ReFillDueDate < GETDATE())-- @filterByNextRefillDate = 1 For Past 				OR (@filterByNextRefillDate = '2' AND V.ReFillDueDate = GETDATE())-- @filterByNextRefillDate = 2 For Current 				OR (@filterByNextRefillDate = '3' AND V.ReFillDueDate > GETDATE())-- @filterByNextRefillDate = 3 For Future 		) 		AND ((@IsCurrentYearEnrollmentQueue = 0 AND PE.UploadedYear < @YEAR) 		      OR (@IsCurrentYearEnrollmentQueue = 1 AND PE.UploadedYear = @YEAR)) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'AssignedToName' and @orderDir = 'asc' then AssignedToName end, 								case when @orderBy = 'AssignedToName' and @orderDir = 'desc' then AssignedToName end desc, 								case when @orderBy = 'AttemptNumber' and @orderDir = 'asc' then AttemptNumber end, 								case when @orderBy = 'AttemptNumber' and @orderDir = 'desc' then AttemptNumber end desc, 								case when @orderBy = 'AttemptDate' and @orderDir = 'asc' then AttemptDate end, 								case when @orderBy = 'AttemptDate' and @orderDir = 'desc' then AttemptDate end desc, 								case when @orderBy = 'ReFillDueDate' and @orderDir = 'asc' then ReFillDueDate end, 								case when @orderBy = 'ReFillDueDate' and @orderDir = 'desc' then ReFillDueDate end desc 								 			) AS RowNumber FROM EnrollmentResultForNoContact  	)   	SELECT *, (Select Count(Patient_ID) FROM EnrollmentResultForNoContact) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 		 END --EXEC SP_GetEnrollmentQueue_For_NoContact 0,5,'','','',0,10,'','',''"
dbo,USP_GetPracticeDetails," Create procedure USP_GetPracticeDetails (@PracticeId INT) AS BEGIN 	SELECT ID, PracticeName, PracticePhone,  		PracticeAddress, BillingPOCName, BillingPOCEmail, BillingPOCPhone, PracticeManagerName, PracticeManagerPhone, PracticeManagerEmail, 		EHRName,PracticeType, PracticeStatus,AssignedProgramManager, BusinessDevelopmentManager, 		BillingType,BillingTime,BillingTimeFees 	FROM Mst_Practice WHERE ID = @PracticeId END  -- EXEC USP_GetPracticeDetails 1"
dbo,SP_GetEnrollmentQueueDetailsByEnrollId," Create procedure SP_GetEnrollmentQueueDetailsByEnrollId (@enrollId INT) AS BEGIN 	SELECT  		V.Patient_ID, 		V.Account_ID, 		V.Account_Name, 		V.Patient_First_Name, 		V.Patient_Middle_Name, 		V.Patient_Last_Name, 		(V.Patient_First_Name + ' ' + V.Patient_Last_Name) AS PatientFullName, 		V.Patient_MRN, 		V.Patient_MBI, 		V.Patient_Contact_ID, 		V.Patient_Contact_name, 		V.Patient_Relation_ID, 		V.Patient_Contact_Phone, 		V.Patient_Contact_email, 		V.Patient_Contact_State,  		PE.Patient_Enroll_ID, 		PE.Patient_Enrollment_Note, 		Coalesce(PE.Patient_Enrollment_Status, 0) AS Patient_Enrollment_Status, 		Coalesce(PC.RxHomeDelivery, 0) AS RxHomeDelivery, 		PC.RxEnrollmentDate, 		PE.CreatedOn, 		EA.AssignedUserId, 		U.User_First_Name + ' ' + U.User_Last_Name AS AssignedToName, 		EA.AttemptDate, 		Coalesce(EA.AttemptStatus, 0) AttemptStatus, 		EA.Id AS AttemptId, 		Coalesce(EA.AttemptNumber, 0) AttemptNumber, 		EA.PrimaryCallOutcome, 		EA.SecondaryCallOutcome, 		PE.CreatedBy, 		'' AS CreatedByName, 		PE.UpdatedOn, 		PE.UpdatedBy, 		'' AS UpdatedByName, 		V.MACScore, 		V.MADScore, 		V.MAHScore, 		V.SUPDScore, 		V.ZipCode 	FROM Trn_Patient_Enrollment PE with (nolock) 	INNER JOIN  		View_Mst_Patient V with (nolock) ON V.Patient_ID = PE.Patient_ID  	INNER JOIN  		View_EnrollAttemptQueue EQ with (nolock) ON EQ.Patient_Enroll_ID = PE.Patient_Enroll_ID  	LEFT JOIN Trn_Patient_Conversion PC with (nolock) ON PC.PatientId = PE.Patient_ID  	LEFT JOIN  		Trn_Enrollment_Attempt EA with (nolock) ON PE.Patient_Enroll_ID = EA.EnrollmentId  			AND EA.AttemptNumber = EQ.AttemptNumber 	LEFT JOIN Mst_User U with (nolock) ON U.User_ID = EA.AssignedUserId 	WHERE PE.Patient_Enroll_ID = @enrollId 		 END -- EXEC SP_GetEnrollmentQueueDetailsByEnrollId 1073"
dbo,USP_GetPracticeList," Create procedure [dbo].USP_GetPracticeList ( 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON;  	WITH Result AS ( 		SELECT 	ID,  				PracticeName 		FROM Mst_Practice P with (nolock) 		WHERE PracticeStatus = 1 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PracticeName' and @orderDir = 'asc' then PracticeName end, 								case when @orderBy = 'PracticeName' and @orderDir = 'desc' then PracticeName end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  --exec USP_GetPracticeList  "
dbo,SP_GetMasterAccounts," Create procedure SP_GetMasterAccounts  AS BEGIN      Select MA.Account_ID, MA.Account_Name, MA.Account_Owner, MA.Account_Add1, MA.Account_Add2, MA.Account_Add3, MA.Account_City, MA.Account_County,        MA.Account_State, MA.Account_Phone, MA.Account_email, MA.Account_Notes, MA.Account_Status, MA.Account_CreatedAt,       MA.Account_CreatedBy, MA.Account_UpdatedAt, MA.Account_UpdatedBy, MA.AccountType, ME.Discription as AccountTypeName  from Mst_Account MA inner join Mst_Enum ME on MA.AccountType = ME.EnumValue and ME.EnumType ='AccountType'  END"
dbo,USP_GetPracticeListforPhysician," Create procedure USP_GetPracticeListforPhysician (@PhysicianId INT) AS BEGIN 	SELECT TP.ID, PracticeId,PhysicianId,MP.PracticeName 	FROM Trn_PracticePhysicians TP  	INNER JOIN Mst_Practice MP ON TP.PracticeId = MP.ID 	WHERE TP.IsDeleted = 0 AND TP.PhysicianId = @PhysicianId END"
dbo,SP_GetMstActivity," Create procedure SP_GetMstActivity (@activityType varchar(50)) AS BEGIN 	IF  @activityType ='Calls' 		SELECT  Activity_ID,Activity_Name FROM Mst_Activity WHERE ActivityType IN ('EnrollPatient','DischargeInfo','HomeVisit','PharmacistConsultation') 	  ELSE  		SELECT Activity_ID,Activity_Name FROM Mst_Activity WHERE ActivityType = @activityType END"
dbo,USP_CheckIsFirstActivityInMonth," Create procedure USP_CheckIsFirstActivityInMonth ( 	@ActivityId INT,  	@PatientID INT,  	@DateOfService DateTime ) AS BEGIN 	SET NOCOUNT ON 	SELECT Count(Patient_Activity_ID) AS IsFirstActivityInMonth FROM Trn_Patient_Activity  	WHERE Activity_ID = @ActivityId 		AND Patient_ID = @PatientID  		AND Activity_Start_Status=3 AND IsSubmited = 1 -- activity should be completed and submitted 		AND DateOfService = @DateOfService END -- EXEC USP_CheckIsFirstActivityInMonth 18, 19278, '30Apr2022'"
dbo,USP_GetPracticePhysiciansList," Create procedure USP_GetPracticePhysiciansList (@PracticeId INT) AS BEGIN 	SELECT TP.ID, PracticeId,PhysicianId,MP.PhysicianName, MP.Phone, MP.Email  	FROM Trn_PracticePhysicians TP  	INNER JOIN Mst_Physician MP ON TP.PhysicianId = MP.ID  AND MP.IsDeleted = 0 	WHERE TP.IsDeleted = 0 AND TP.PracticeId = @PracticeId END  -- EXEC USP_GetPracticePhysiciansList	 1"
dbo,SP_GetPatientBarrier," Create PROCEDURE [dbo].[SP_GetPatientBarrier] @activityId INT, @patientId INT AS BEGIN SELECT mst.ActivityId       ,mst.QuestionType, 	  mst.Patient_Barrier_Id AS QuestionId       ,mst.QuestionTitle       ,mst.QuestionDescription 	  ,trn.Answer 	  ,trn.AnsweredOn 	  ,trn.Patient_Barrier_Assessment_Id   FROM Mst_Patient_Barrier mst   Left Join Trn_Patient_Barrier_Assessment trn ON mst.Patient_Barrier_Id = trn.QuestionId   AND trn.PatientId = @patientId   WHERE ActivityId = @activityId END"
dbo,USP_GetPracticeTypeList," Create procedure [dbo].USP_GetPracticeTypeList ( 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'ID',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0,  	@pageSize int = 99999 ) AS BEGIN 	SET NOCOUNT ON;  	WITH Result AS ( 		SELECT  			P.ID, 			P.PracticeType, 			P.IsDeleted 		FROM dbo.Mst_PracticeType P with (nolock) 		WHERE (P.PracticeType  LIKE '%' + @search + '%') 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PracticeType' and @orderDir = 'asc' then PracticeType end, 								case when @orderBy = 'PracticeType' and @orderDir = 'desc' then PracticeType end desc 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize)  END  "
dbo,SP_GetPatientDetail," Create procedure SP_GetPatientDetail ( 	@Patient_ID int  ) AS BEGIN 	Declare @CurrentYear int = Year(GetDate()); 	SELECT  		P.Patient_ID, 		P.Patient_MBI, 		P.Account_ID, 		P.Account_Name, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Patient_MRN, 		P.Patient_DOB, 		P.Patient_SSN, 		P.Patient_Race, 		P.Patient_Gender, 		P.Patient_LanguageID, 		ML.Language_Description, 		P.Patient_Low_Income, 		P.Patient_Can_Contact, 		P.Patient_Status, 		P.Patient_Notes, 		P.Patient_CreatedAt, 		P.Patient_CreatedBy, 		P.Patient_UpdatedAt, 		P.Patient_UpdatedBy, 		P.Patient_Contact_ID, 		P.Patient_Contact_name, 		P.Patient_Relation_ID, 		P.Patient_Contact_Phone, 		P.Patient_Contact_email, 		P.Patient_Contact_Add1, 		P.Patient_Contact_Add2, 		P.Patient_Contact_Add3, 		P.Patient_Contact_City, 		P.Patient_Contact_County, 		P.Patient_Contact_State, 		P.ZipCode, 		PE.Patient_Enroll_ID, 		PE.Patient_Enrollment_Status, 		PE.UploadedYear, 		PE.EnrollmentDate, 		TPC.RxHomeDelivery, 		TPC.RxEnrollmentDate, 		p.CMRCompleted, 		p.CMROutcome, 		p.MACScore, 		p.MADScore, 		p.MAHScore, 		p.SUPDScore 	From View_Mst_Patient P 	LEFT JOIN Trn_Patient_Conversion TPC ON P.Patient_ID = TPC.PatientId 	LEFT JOIN Mst_Language ML ON ML.Language_ID = P.Patient_LanguageID 	LEFT JOIN Trn_Patient_Enrollment PE ON PE.Patient_ID = P.Patient_ID AND (UploadedYear = @CurrentYear OR YEAR(PE.EnrollmentDate)=@CurrentYear) 	WHERE P.Patient_ID = @Patient_ID END "
dbo,USP_GetReadmissionDetails," CREATE PROCEDURE USP_GetReadmissionDetails ( 	@InPatientLogId int ) AS BEGIN 	SET NOCOUNT ON; 	SELECT IPL.InPatientLogId,P.Patient_First_Name + ' '+ P.Patient_Last_Name  AS PatientFullName, 	IPL.DischargeDate, IPL.ReadmissionDate,IPL.ReadmissionDiagnosis 	From Trn_InPatientLog IPL with (nolock) 	INNER JOIN Mst_Patient P ON P.Patient_ID = IPL.Patient_ID AND IPL.InPatientLogId = @InPatientLogId  END  "
dbo,SP_GetPatientRefillDueDateDetails," Create procedure SP_GetPatientRefillDueDateDetails AS BEGIN 	Select Patient_ID, Patient_MRN, RefillDueDate FROM Mst_Patient Where Patient_Status = 1 END"
dbo,USP_GetReferralDateMissingReport," Create procedure [dbo].USP_GetReferralDateMissingReport ( 	@AccountID INT, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	 	WITH Result AS ( 	SELECT  			patient.Patient_ID, 			patient.Account_ID, 			patient.Patient_First_Name, 			patient.Patient_Last_Name, 			patient.Patient_First_Name + ' '+ patient.Patient_Last_Name  AS PatientFullName, 			patient.Patient_DOB, 			patient.Mobile, 			patient.Patient_Status, 			patient.Patient_MRN, 			Patient_Gender, 			patient.PatientStatusId, 			MPS.StatusName AS DispalyPatientStatus, 			MP.PracticeName 		FROM dbo.Mst_Patient patient  		INNER JOIN Mst_Practice MP ON MP.ID = patient.PatientPracticeId		 		LEFT JOIN MstPatientStatuses MPS ON patient.PatientStatusId = MPS.ID 	WHERE patient.Patient_Status = 1 AND patient.Account_ID=@AccountID  	AND   patient.ReferralDate is NULL 	AND ((patient.Patient_First_Name + ' ' + patient.Patient_Last_Name)  LIKE '%' + @search + '%' 				OR (patient.Patient_Last_Name + ' ' + patient.Patient_First_Name) LIKE '%' + @search + '%' 				OR MP.PracticeName LIKE '%' + @search + '%' 				OR patient.Patient_MRN LIKE '%' + @search + '%' 				OR patient.Mobile LIKE '%'+@search+'%' 				OR MPS.StatusName LIKE '%'+@search+'%') 				 	 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY  			case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize); END  -- EXEC USP_GetReferralDateMissingReport 22,'01Oct2022','19Oct2022' -- EXEC sp_recompile N'dbo.USP_GetReferralDateMissingReport';    select * from Mst_Patient "
dbo,SP_GetPriscriberDetailByPatientId," CREATE procedure SP_GetPriscriberDetailByPatientId ( 	@PatientId int ) AS BEGIN 	Select  		PMD.Prescriber_ID, 		MP.PrescriberFirstName +' '+ MP.PrescriberLastName AS PriscriberFullName 		From Trn_Patient_Med_Dosage PMD  	INNER JOIN Mst_Prescriber MP ON MP.Id = PMD.Prescriber_ID 	WHERE PMD.Patient_ID = @PatientId 	GROUP BY PMD.Prescriber_ID,MP.PrescriberFirstName,MP.PrescriberLastName 	ORDER BY PMD.Prescriber_ID ASC  END"
dbo,USP_GetReferralLogDetail," Create procedure [dbo].[USP_GetReferralLogDetail] ( 	@ReferralID int ) AS BEGIN 	SET NOCOUNT ON; 	SELECT RPL.Referral_ID, 				RPL.Patient_ID, 				RPL.ReferralType, 				enum.Discription AS IncomingType, 				RPL.ReferralDate,  				RPL.ReferralTime, 				PRAC.PracticeName, 				RPL.AssignTo, 				usr.User_First_Name + ' ' + usr.User_Last_Name AS AssignUserName, 				RPL.ReferralStatus, 				enums.Discription AS ReferralStatusName, 				RPL.PrimaryContactNumber, 				RPL.FaxNumber, 				RPL.PrimaryContactEmail, 				--From Here added extra columns 				RPL.Salutation, 				RPL.PatientFirstName, 				RPL.PatientMiddleName, 				RPL.PatientLastName, 				RPL.DOB, 				RPL.Gender, 				RPL.PatientPractice, 				RPL.PrimaryPhysician, 				phy.PhysicianName, -- 				RPL.ReasonForReferralId, 				dia.ICD10Code + ' - ' + dia.Diagnosis_Name AS ReasonForReferralName, 				RPL.ReferringProviderId, 				MRP.PracticeName as ReferringProviderName, 				RPL.PrimaryContactRelationID, 				RPL.PrimaryContactName, 				RPL.PrimaryContactAdd1, 				RPL.PrimaryContactAdd2, 				RPL.PrimaryContactCity, 				RPL.PrimaryContactState, 				RPL.PrimaryContactZip, 				RPL.PrimaryContactIsMobilePreference, 				RPL.PrimaryContactIsEmailPreference, 				RPL.PrimaryContactIsSMSPreference, 				RPL.SecondaryContactRelationID, 				RPL.SecondaryContactName, 				RPL.SecondaryContactNumber, 				RPL.SecondaryContactEmail, 				RPL.SecondaryContactAdd1, 				RPL.SecondaryContactAdd2, 				RPL.SecondaryContactCity, 				RPL.SecondaryContactState, 				RPL.SecondaryContactZip, 				RPL.SecondaryContactIsMobilePreference, 				RPL.SecondaryContactIsEmailPreference, 				RPL.SecondaryContactIsSMSPreference, 				RPL.PrimaryInsurance, 				insuP.Insurance AS PrimaryInsuranceName, 				RPL.SecondaryInsurance, 				insuS.Insurance AS SecondaryInsuranceName, 				RPL.TertiaryInsurance, 				insuT.Insurance AS TertiaryInsuranceName, 				RPL.GroupAssessmentComments, 				RPL.PrimaryInsuranceIDNumber, 				RPL.PrimaryInsuranceGroupNumber, 				RPL.PrimaryInsuranceStartDate, 				RPL.PrimaryInsuranceEndDate, 				RPL.SecondaryInsuranceIDNumber, 				RPL.SecondaryInsuranceGroupNumber, 				RPL.SecondaryInsuranceStartDate, 				RPL.SecondaryInsuranceEndDate, 				RPL.TertiaryInsuranceIDNumber, 				RPL.TertiaryInsuranceGroupNumber, 				RPL.TertiaryInsuranceStartDate, 				RPL.TertiaryInsuranceEndDate, 				RPL.Note, 				RPL.IsPatientRegistered, 				RPL.IsSUD, 				RPL.IsFlagThisPatient, 				RPL.AreYouEligible, 				RPL.NotEligibleReason, 				RPL.NotEligibleReasonNote, 				insuP.StateID as PrimaryStateId, 				insuS.StateID as SecondaryStateId, 				insuT.StateID as TertiaryStateId 		FROM ReferralPatientLog RPL 		LEFT JOIN Mst_Enum enum ON RPL.ReferralType = enum.EnumValue AND EnumType = 'ReferralIncomingType' 		LEFT JOIN Mst_Practice PRAC ON RPL.PatientPractice = PRAC.ID 		LEFT JOIN Mst_User usr ON RPL.AssignTo = usr.User_ID 		LEFT JOIN Mst_Enum enums ON RPL.ReferralStatus = enums.EnumValue AND enums.EnumType = 'ReferralStatus' 		LEFT JOIN Mst_Physician phy ON RPL.PrimaryPhysician = phy.ID 		LEFT JOIN Mst_Practice MRP ON RPL.ReferringProviderId = MRP.ID 		LEFT JOIN Mst_Diagnosis dia ON RPL.ReasonForReferralId = dia.Diagnosis_ID 		LEFT JOIN Mst_Insurance insuP ON RPL.PrimaryInsurance = insuP.ID 		LEFT JOIN Mst_Insurance insuS ON RPL.SecondaryInsurance = insuS.ID 		LEFT JOIN Mst_Insurance insuT ON RPL.TertiaryInsurance = insuT.ID 		WHERE RPL.Referral_ID = @ReferralID END  /*exec USP_GetReferralLogDetail 6*/"
dbo,SP_GetRAFormByPatientIdAndPriscriberId," CREATE procedure SP_GetRAFormByPatientIdAndPriscriberId ( 	@PatientId int, 	@PriscriberId int ) AS BEGIN 	SELECT 		PMD.Patient_Dosage_ID, 		PMD.Patient_ID,VP.Patient_First_Name + ' ' + VP.Patient_Last_Name AS PatientFullName,VP.Patient_DOB, 		PMD.Prescriber_ID,PRI.PrescriberFirstName + ' ' + PRI.PrescriberLastName AS PrescriberFullName, 		PRI.PrescriberPhone, 		PRI.PrescriberFax, 		PMD.Med_ID,MED.Med_Name, 		PMD.Med_Strength_ID,MS.Med_Strength, 		PMD.Patient_Dosage_Qty,PMD.Patient_Dosage_Directions, 		PMD.Patient_Dosage_Refills AS Refills, 		VP.Account_ID, 		MA.Account_Name, 		MA.Account_Add1, 		MA.Account_Phone, 		MA.Account_Fax, 		MA.Account_NCPDP 	FROM Trn_Patient_Med_Dosage PMD 	INNER JOIN View_Mst_Patient VP ON VP.Patient_ID = PMD.Patient_ID 	INNER JOIN Mst_Account MA ON MA.Account_ID = VP.Account_ID 	LEFT JOIN Mst_Prescriber PRI ON PRI.Id = PMD.Prescriber_ID 	LEFT JOIN Mst_Medicine MED ON MED.Med_ID = PMD.Med_ID 	LEFT JOIN Mst_Med_Strength MS ON MS.ID = PMD.Med_Strength_ID 	WHERE PMD.Patient_ID = @PatientId 	AND PMD.Prescriber_ID = @PriscriberId 	AND PMD.RANeeded = 1 END  "
dbo,USP_GetReferralReportDetail," Create procedure [DBO].USP_GetReferralReportDetail ( 	@AccountId INT, 	@FromDate Datetime, 	@ToDate Datetime, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'PatientName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN    -- getting previous patient stauts from log table 	;WITH MyCte AS      (         SELECT PatientID,PatientStatusId,PatientStatusDate,          ROW_NUMBER() OVER (PARTITION BY PatientID Order by ID DESC) AS RowNum         FROM TrnPatientStatusLog     )     SELECT PatientID, PatientStatusId,PatientStatusDate 	into #temp1        FROM    MyCte     WHERE   RowNum = 2  	SET @ToDate = DATEADD(Day,1,@ToDate); 	SET NOCOUNT ON; 	 With ReferralResult AS ( 		SELECT 			P.Patient_ID,     			P.Patient_MRN, 			P.Patient_First_Name+' '+P.Patient_Last_Name PatientName, 			P.ReferralDate, 			PHY.PhysicianName ReferringProvider, 			PR.PracticeName, 			DATEADD(HOUR,-5,P.Patient_CreatedAt) PatientCreatedOn, 			PS.StatusName PatientCurrentStatus, 			DATEADD(HOUR,-5,P.PatientStatusDate) PatientCurrentDate 			,TPS.StatusName PatientStatus 			,DATEADD(HOUR,-5,TS.PatientStatusDate) PatientStatusDate 		FROM Mst_Patient P 		LEFT JOIN Mst_Practice PR ON P.PatientPracticeId = PR.ID     		LEFT JOIN MstPatientStatuses PS ON P.PatientStatusId = PS.StatusID 		LEFT JOIN Mst_Physician PHY ON P.ReferringProviderId = PHY.ID 		LEFT JOIN #temp1 TS ON P.Patient_ID = TS.PatientID 		LEFT JOIN MstPatientStatuses TPS ON TS.PatientStatusId = TPS.StatusID 		WHERE  		Account_ID = @AccountId  		AND P.Patient_Status = 1 		AND P.Patient_CreatedAt >=  @FromDate 		AND P.Patient_CreatedAt <  @ToDate 		AND P.ReferralDate IS NOT NULL 		GROUP BY P.Patient_ID,TS.PatientStatusDate,Patient_MRN, 		Patient_First_Name,Patient_Last_Name,ReferralDate,PR.PracticeName,PHY.PhysicianName,PS.StatusName, 		P.PatientStatusDate,TPS.StatusName,P.Patient_CreatedAt 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientName' and @orderDir = 'asc' then PatientName end, 								case when @orderBy = 'PatientName' and @orderDir = 'desc' then PatientName end desc, 								case when @orderBy = 'ReferralDate' and @orderDir = 'asc' then ReferralDate end, 								case when @orderBy = 'ReferralDate' and @orderDir = 'desc' then ReferralDate end desc, 								case when @orderBy = 'ReferringProvider' and @orderDir = 'asc' then ReferringProvider end, 								case when @orderBy = 'ReferringProvider' and @orderDir = 'desc' then ReferringProvider end desc, 								case when @orderBy = 'PracticeName' and @orderDir = 'asc' then PracticeName end, 								case when @orderBy = 'PracticeName' and @orderDir = 'desc' then PracticeName end desc, 								case when @orderBy = 'PatientCurrentStatus' and @orderDir = 'asc' then PatientCurrentStatus end, 								case when @orderBy = 'PatientCurrentStatus' and @orderDir = 'desc' then PatientCurrentStatus end desc, 								case when @orderBy = 'PatientCurrentDate' and @orderDir = 'asc' then PatientCurrentDate end, 								case when @orderBy = 'PatientCurrentDate' and @orderDir = 'desc' then PatientCurrentDate end desc 								 			) AS RowNumber FROM ReferralResult  	) 	 	SELECT *, (Select Count(Patient_ID) FROM ReferralResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 		 	Drop table #temp1 END  --EXEC USP_GetReferralReportDetail 31,'01/01/2023','07/26/2023','' --exec [dbo].[USP_GetReferralReportDetail] @AccountId=22,@FromDate='2023-01-01 00:00:00',@ToDate='2023-07-14 00:00:00',@search=N'',@orderBy=N'Patient_MRN',@orderDir='asc',@StartFrom=0,@PageSize=10"
dbo,SP_GetSelectListItems," Create procedure [dbo].[SP_GetSelectListItems] ( 	@type varchar(150), 	@text varchar(150), 	@AccountType INT = 0, 	@AccountId INT = 0 ) AS BEGIN 	IF(@type = 'Language') 	BEGIN 		SELECT Language_ID AS ID,Language_Description AS statusName FROM Mst_Language WHERE Language_Status = 1 	END 	IF(@type = 'MasterAccounts') 	BEGIN 		SELECT Account_ID AS ID,Account_Name AS statusName FROM Mst_Account WHERE Account_Status = 1 AND (@AccountType = 0 OR AccountType = @AccountType) 	END 	IF(@type = 'ActivityType') 	BEGIN 		SELECT Activity_Type_ID AS ID,Activity_Type_Name AS statusName FROM Mst_Activity_Type WHERE Activity_Type_Status = 1 	END 	IF(@type = 'MasterUsers') 	BEGIN 		SELECT User_ID AS ID,User_First_Name + ' ' + User_Last_Name AS statusName  		FROM Mst_User U INNER JOIN Trn_User_Account UA ON U.User_ID = UA.UserId WHERE (@AccountId = 0 OR UA.AccountId = @AccountId) AND U.User_Status = 1 	END 	IF(@type = 'MasterRoles') 	BEGIN 		SELECT R.RoleId AS ID, RoleDescription AS statusName  		FROM Mst_Roles R  		INNER JOIN MstAccountTypeRoles AR ON R.RoleId = AR.RoleId 		INNER JOIN Mst_Account MA ON MA.AccountType = AR.AccountTypeID AND MA.Account_ID = @AccountId 		WHERE Status = 1  	END 	IF(@type = 'MasterCustomer') 	BEGIN 		SELECT Cust_ID AS ID,Cust_Name AS statusName FROM Mst_Customer WHERE Cust_Status = 1 	END 	IF(@type = 'MasterRace') 	BEGIN 		SELECT Race_ID AS ID,Race_Name AS statusName FROM Mst_Race WHERE Race_Status = 1 	END 	IF(@type = 'MasterActivity') 	BEGIN 		SELECT Activity_ID AS ID,Activity_Name AS statusName FROM Mst_Activity WHERE Activity_Status = 1 	END 	IF(@type = 'PatientMedicine') 	BEGIN 		SELECT TPMD.Med_ID AS ID,med.Med_Name AS statusName FROM Trn_Patient_Med_Dosage TPMD 		INNER JOIN Mst_Medicine med ON TPMD.Med_ID = med.Med_ID 		WHERE TPMD.Patient_Dosage_Status = 1 	END 	IF(@type = 'Mst_Medicine') 	BEGIN 		SELECT Med_ID AS ID,Med_Name AS statusName FROM Mst_Medicine  		WHERE Med_Status = 1 	END 	IF(@type = 'Mst_Medicine_Time') 	BEGIN 		SELECT Med_Time_ID AS ID,Med_Time_Description AS statusName FROM Mst_Medicine_Time 	END 	IF(@type = 'MasterAllergies') 	BEGIN 		SELECT Allergy_ID AS ID,Allerg_Name AS statusName FROM Mst_Allergies 	END 	IF(@type = 'MasterPCP') 	BEGIN 		SELECT Id AS ID,PCP_First_Name + ' ' + PCP_Last_Name AS statusName FROM Mst_PCP 	END 	IF(@type = 'MasterPriscriber') 	BEGIN 		SELECT Id AS ID,PrescriberFirstName + ' ' + PrescriberLastName AS statusName FROM Mst_Prescriber 	END 	IF(@type = 'MasterPharmacy') 	BEGIN 		SELECT Id AS ID,PharmacyName AS statusName FROM Mst_Pharmacy 	END 	IF(@type = 'Mst_PatientAppointmentType') 	BEGIN 		SELECT ID AS ID,AppointmentType AS statusName FROM Mst_PatientAppointmentType 	END 	IF(@type = 'InterventionTypes') 	BEGIN 		SELECT ID AS ID,InterventionTypeName AS statusName FROM Mst_InterventionType 	END 	IF(@type = 'InterventionValueTypes') 	BEGIN 		SELECT ID AS ID,InterventionTypeName AS statusName FROM Mst_InterventionType 	END 	IF(@type = 'AttemptStatus') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'AttemptStatus' 	END 	IF(@type = 'EnrollmentStatus') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType = 'EnrollmentStatus' 	END 	IF(@type = 'CallOutcome') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'CallOutcome' 	END 	IF(@type = 'AllergySeverityStatus') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'AllergySeverityStatus' 	END 	IF(@type = 'RxHomeDelivery') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType = 'RxHomeDeliveryStatus' 	END 	IF(@type = 'ActivityStatus') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'ActivityStatus' 	END 	IF(@type = 'DosagePrescribedStatus') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'DosagePrescribedStatus' 	END 	IF(@type = 'DDLMRRActivityReport') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'DDLMRRActivityReport' 	END 	IF(@type = 'ConsultActivityReport') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'ConsultActivityReport' 	END 	IF(@type = 'ActivityReasonStatus') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'ActivityReasonStatus' 	END 	IF(@type = 'Gender') 	BEGIN 		SELECT EnumValue AS ID,EnumName AS statusName FROM Mst_Enum WHERE EnumType = 'Gender' 	END 	IF(@type = 'AccountType') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType = 'AccountType' 	END 	IF(@type = 'Relations') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType = 'RelationType' 	END 	IF(@type = 'MasterAccountByAccountType') 	BEGIN 		SELECT Account_ID AS ID,Account_Name AS statusName FROM Mst_Account WHERE Account_Status = 1 AND AccountType = @text  	END 	IF(@type = 'DischargeLocation') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType = 'DischargeLocation' 	END 	IF(@type = 'MasterRecommendations') 	BEGIN 		SELECT ID AS ID,Recommendation AS statusName FROM Mst_Recommendations 	END 	IF(@type = 'TrnReferringProviderName') 	BEGIN 		SELECT MP.ID AS ID,MP.PhysicianName AS statusName FROM Trn_PracticePhysicians TPP 		INNER JOIN Mst_Physician MP ON TPP.PhysicianId = MP.ID AND TPP.IsDeleted = 0 AND MP.IsDeleted = 0 		WHERE TPP.PracticeId = @text  	END 	IF(@type = 'HospitalReasonsToChangeHomeVisitType') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType LIKE '%HospitalReasonsToChangeHomeVisitType%' 	END 	IF(@type = 'HospitalConsultCompletedOutcome') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType LIKE '%HospitalConsultCompletedOutcome%' 	END 	IF(@type = 'OutreachUsersList') 	BEGIN 		SELECT User_ID AS ID,User_First_Name + ' ' + User_Last_Name AS statusName FROM Mst_User U  		INNER JOIN Mst_Roles rol ON U.User_Role = rol.RoleId  		INNER JOIN Trn_User_Account UA ON U.User_ID = UA.UserId  		WHERE rol.RoleName in ('OutreachUser', 'Admin')  		AND (@AccountId = 0 OR UA.AccountId=@AccountId) 		AND U.User_Status = 1 	END 	IF(@type = 'BCMUsersList') 	BEGIN 		SELECT User_ID AS ID,User_First_Name + ' ' + User_Last_Name AS statusName FROM Mst_User U  		INNER JOIN Mst_Roles rol ON U.User_Role = rol.RoleId  		INNER JOIN Trn_User_Account UA ON U.User_ID = UA.UserId  		WHERE rol.RoleName  = 'BehavioralCareManager'--'BehavouralCareManager' 		AND (@AccountId = 0 OR UA.AccountId=@AccountId) 		AND U.User_Status = 1 	END 	IF(@type = 'OutreachLogTypes') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType = 'OutreachLogType' 	END 	IF(@type = 'ProgramCompletion') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType LIKE '%ProgramCompletion%' 	END 	IF(@type = 'CurrentLocations') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType LIKE '%CurrentLocations%' 	END 	IF(@type = 'InsuranceType') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType LIKE '%InsuranceType%' 	END 	IF(@type = 'DRGType') 	BEGIN 		SELECT EnumValue AS ID,Discription AS statusName FROM Mst_Enum WHERE EnumType LIKE '%DRGType%' 	END 	IF(@type = 'AllBCMUsersList') 	BEGIN 		SELECT User_ID AS ID,User_First_Name + ' ' + User_Last_Name AS statusName FROM Mst_User U  		INNER JOIN Mst_Roles rol ON U.User_Role = rol.RoleId  		INNER JOIN Trn_User_Account UA ON U.User_ID = UA.UserId  		WHERE rol.RoleName  = 'BehavioralCareManager'--'BehavouralCareManager' 		AND (@AccountId = 0 OR UA.AccountId=@AccountId) 	END 	IF(@type = 'AdminBCMSuperUsersList') 	BEGIN 		SELECT User_ID AS ID,User_First_Name + ' ' + User_Last_Name AS statusName FROM Mst_User U  		INNER JOIN Mst_Roles rol ON U.User_Role = rol.RoleId  		INNER JOIN Trn_User_Account UA ON U.User_ID = UA.UserId  		WHERE rol.RoleName  IN ('Admin','SuperUser','BehavioralCareManager') 		AND (@AccountId = 0 OR UA.AccountId=@AccountId) 	END END  --Exec SP_GetSelectListItems 'RepeateType','',0,22"
dbo,USP_GetReferringProviderSelectionList," create procedure [dbo].[USP_GetReferringProviderSelectionList] ( 	@PracticeID INT, 	@PatientID INT = 0 ) AS BEGIN 	 	SELECT PH.ID, PhysicianName FROM Mst_Physician PH 	INNER JOIN Trn_PracticePhysicians PP ON PH.ID = PP.PhysicianId AND PP.IsDeleted = 0 AND PH.IsDeleted = 0  	WHERE PP.PracticeID = @PracticeID  	UNION 	SELECT PH.ID, PhysicianName FROM Mst_Physician PH  	INNER JOIN Mst_Patient P ON P.ReferringProviderId = PH.ID AND P.Patient_ID = @PatientID END  -- EXEC USP_GetReferringProviderSelectionList 1,19275"
dbo,SP_HomeVisitReportCount," CREATE PROCEDURE SP_HomeVisitReportCount @AccountID INT, @ActivityID int AS BEGIN 	 	WITH ActivityStatus AS( 		SELECT ME.EnumValue AS Activity_Start_Status, 		(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 			 AND ( ActivityOutcome = 10 OR ActivityOutcome = 11) -- it should be map with ActivityOutCome enum of name = PatientDishargedFacility or UserContactToPatient 		THEN  'Consult Needed' ELSE CASE WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 AND ( ActivityOutcome = 9 ) -- it should be map with ActivityOutCome enum of name = MrrReviewedAndNoIrregularities 		THEN 'Consult Not Needed' ELSE  ME.Discription END END) AS ActivityStartStatus, 		PA.Patient_Activity_ID 		FROM Mst_Enum ME INNER JOIN Trn_Patient_Activity PA ON  			Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue AND PA.Activity_ID = @ActivityID 			INNER JOIN Mst_Patient P ON P.Patient_ID = PA.Patient_ID AND P.Account_ID=@AccountID 			 		WHERE ME.EnumType = 'ActivityStatus'  		 	)  	SELECT Activity_Start_Status, ActivityStartStatus, COUNT(Patient_Activity_ID) AS TotalCount 	FROM ActivityStatus GROUP BY Activity_Start_Status,ActivityStartStatus ORDER BY Activity_Start_Status  END -- EXEC SP_HomeVisitReportCount 5,3 "
dbo,USP_GetSignatureAttestationDetails," CREATE procedure USP_GetSignatureAttestationDetails  ( 	@PatientActivityID INT ) AS BEGIN 	SELECT	P.Patient_First_Name +' '+ P.Patient_Last_Name AS PatientFullName, 			P.Patient_DOB, 			TPA.Patient_Activity_ID, 			TPA.Patient_ID, 			TPA.Activity_ID, 			TPA.Activity_Start_Status,			 			TPA.AssociatedPatientActivityIDForUser as selectedAssociatedActivitiesList 		From Trn_Patient_Activity TPA 		INNER JOIN Mst_Patient P ON TPA.Patient_ID = P.Patient_ID 		WHERE TPA.Patient_Activity_ID = @PatientActivityId 	 END  --exec USP_GetPatientCommunicationDetails 5476"
dbo,USP_GetSubstanceInvolvementScore," Create PROCEDURE [dbo].[USP_GetSubstanceInvolvementScore] 	@PatientID INT, 	@AssessmentID INT, 	@PatientActivityID int = 0 AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		WITH TempSIScore AS ( 			SELECT 				MQ.SequenceNumber, 				MQ.QuestionText, 				MQ.ClassInfo, 				SUM(Cast(PQA.AnswerText as int)) As TotalSIScore 			FROM Mst_Questions MQ 			INNER JOIN Trn_PatientQuestionAnswers PQA ON PQA.QuestionID = MQ.QuestionID AND PQA.IsDeleted = 0 				AND MQ.QuestionFor = 5 				AND QuestonSubType >=7 AND QuestonSubType<=12 -- From Section 3 to Section 8 				AND PQA.AssessmentID=@AssessmentID and PatientID=@PatientID 			GROUP BY Mq.SequenceNumber, MQ.QuestionText, MQ.ClassInfo 		) 		SELECT SequenceNumber, QuestionText, ClassInfo, TotalSIScore,  		(CASE WHEN TotalSIScore <=3 THEN 'Low Risk'  		      WHEN TotalSIScore >=4 AND TotalSIScore <=26 then 'Moderate Risk' 			  WHEN TotalSIScore >=27 then 'High Risk'end )as RiskDetails 		FROM TempSIScore 		ORDER BY SequenceNumber 	END 	ELSE 	BEGIN 		WITH TempSIScore AS ( 			SELECT 				MQ.SequenceNumber, 				MQ.QuestionText, 				MQ.ClassInfo, 				SUM(Cast(PQA.AnswerText as int)) As TotalSIScore 			FROM Mst_Questions MQ 			LEFT JOIN Trn_PatientQuestionAnswersLog PQA ON PQA.QuestionID = MQ.QuestionID AND PQA.IsDeleted = 0 				AND PQA.AssessmentID=@AssessmentID and PatientID=@PatientID 				AND PQA.PatientActivityID = @PatientActivityID 			WHERE MQ.QuestionFor = 5 AND QuestonSubType >=7 AND QuestonSubType<=12 -- From Section 3 to Section 8 			GROUP BY Mq.SequenceNumber, MQ.QuestionText, MQ.ClassInfo 		) 		SELECT SequenceNumber, QuestionText, ClassInfo, TotalSIScore,  		(CASE WHEN TotalSIScore <=3 THEN 'Low Risk'  		      WHEN TotalSIScore >=4 AND TotalSIScore <=26 then 'Moderate Risk' 			  WHEN TotalSIScore >=27 then 'High Risk'end )as RiskDetails 		FROM TempSIScore 		ORDER BY SequenceNumber 	END END --EXEC USP_GetSubstanceInvolvementScore 25801, 1020, 4314"
dbo,SP_Insert_Mst_MedNDC," CREATE PROCEDURE SP_Insert_Mst_MedNDC 	@NDC VARCHAR(50), 	@PRODUCTNDC VARCHAR(50), 	@ProductName NVARCHAR(MAX), 	@DOSAGEFORMNAME NVARCHAR(MAX), 	@ROUTENAME NVARCHAR(MAX), 	@SUBSTANCENAME NVARCHAR(MAX), 	@ACTIVE_NUMERATOR_STRENGTH NVARCHAR(MAX), 	@ACTIVE_INGRED_UNIT NVARCHAR(MAX),     @StrengthName NVARCHAR(MAX) AS BEGIN     SET NOCOUNT ON  	--Checking Master medicine name existing or not  	--If not exist then creating new master medicine entry 	DECLARE @Med_ID INT = (SELECT TOP 1 Med_ID FROM Mst_Medicine WHERE Med_Name = @ProductName) 	IF @Med_ID IS NULL  	BEGIN  		INSERT INTO Mst_Medicine (Med_Name, Med_Description, Med_CreatedAt, Med_Status) 		VALUES (@ProductName, @ProductName, GETDATE(), 1); 		SELECT @Med_ID = SCOPE_IDENTITY() 	END  	DECLARE @Strength_ID INT = (SELECT TOP 1 ID FROM Mst_Med_Strength WHERE Med_Strength = @StrengthName) 	IF @Strength_ID IS NULL AND @StrengthName != '' 	BEGIN  		INSERT INTO Mst_Med_Strength (Med_Strength, IsDeleted) VALUES (@StrengthName, 0) 		SELECT @Strength_ID = SCOPE_IDENTITY() 	END  	DECLARE @TrnMedStrengthId INT = (SELECT TOP 1 ID FROM Trn_Med_Strength WHERE Strengh_ID = @Strength_ID AND Med_ID = @Med_ID) 	IF @TrnMedStrengthId IS NULL AND @StrengthName != '' 	BEGIN  		INSERT INTO Trn_Med_Strength (Med_ID,Strengh_ID, IsDeleted) VALUES(@Med_ID, @Strength_ID, 0) 	END 	 	DECLARE @MstNDCId VARCHAR(50) = (SELECT TOP 1 NDC FROM Mst_MedNDC WHERE NDC = @NDC) 	IF @MstNDCId IS NULL  	BEGIN  		INSERT INTO Mst_MedNDC (NDC, ProductName,CreatedOn,Med_ID,Strength_ID,PRODUCTNDC,DOSAGEFORMNAME,SUBSTANCENAME,ACTIVE_NUMERATOR_STRENGTH,ACTIVE_INGRED_UNIT,ROUTENAME) 		VALUES (@NDC, @ProductName,GETDATE(),@Med_ID,@Strength_ID,@PRODUCTNDC,@DOSAGEFORMNAME,@SUBSTANCENAME,@ACTIVE_NUMERATOR_STRENGTH,@ACTIVE_INGRED_UNIT,@ROUTENAME) 	END 	--SELECT Coalesce(@StrengthID, 0) AS StrengthID, @MedID Med_ID, @NDC AS NDC 	SELECT @NDC AS NDC     RETURN END  --exec SP_Insert_Mst_MedNDC '000020800','0002-0800','diluent','INJECTION, SOLUTION','SUBCUTANEOUS','WATER','1','mL/mL','1mL/mL' "
dbo,USP_GetSubstanceUseHistoryDetails," create procedure [dbo].[USP_GetSubstanceUseHistoryDetails] ( 	@AssessmentID int, 	@ClassInfo varchar(250)='', 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		with distinctQuestion as ( 		select distinct QuestionText,ClassInfo, SequenceNumber 		from [dbo].[Mst_Questions] 		where QuestionLinkID>=601 AND QuestionLinkID<=674 and ClassInfo is not null and (@ClassInfo='' or ClassInfo=@ClassInfo)    )     	select  QuestionText 			,Q.ClassInfo  			,[ID] 			,[AssessmentID] 			,[StartedAgeUsing] 			,[HasStoppedUsing] 			,[StoppedUsingAge] 			,[IsCurrentlyUsing] 			,[Frequency] 			,[Quantity] 			,[Route] 			,[IsReceivedTreatmentForUse] 			,[IsDetox] 			,[DetoxComment] 			,[IsRehab] 			,[RehabComment] 			,[IsInpatient] 			,[InpatientComment] 			,[IsOutpatient] 			,[OutpatientComment] 			,[IsStepProgram] 			,[StepProgramComment] 			,[IsOther] 			,[OtherComment] 	FROM distinctQuestion Q  	LEFT JOIN TrnSubstanceUseHistory T On T.ClassInfo=Q.ClassInfo and T.AssessmentID=@AssessmentID and T.IsDeleted=0 	ORDER BY SequenceNumber 	END 	ELSE 	BEGIN 		with distinctQuestion as ( 		select distinct QuestionText,ClassInfo,SequenceNumber 		from [dbo].[Mst_Questions] 		where QuestionLinkID>=601 AND QuestionLinkID<=674 and ClassInfo is not null and (@ClassInfo='' or ClassInfo=@ClassInfo)    )     	select  QuestionText 			,Q.ClassInfo  			,[ID] 			,[AssessmentID] 			,[StartedAgeUsing] 			,[HasStoppedUsing] 			,[StoppedUsingAge] 			,[IsCurrentlyUsing] 			,[Frequency] 			,[Quantity] 			,[Route] 			,[IsReceivedTreatmentForUse] 			,[IsDetox] 			,[DetoxComment] 			,[IsRehab] 			,[RehabComment] 			,[IsInpatient] 			,[InpatientComment] 			,[IsOutpatient] 			,[OutpatientComment] 			,[IsStepProgram] 			,[StepProgramComment] 			,[IsOther] 			,[OtherComment] 	from distinctQuestion Q  	left join TrnSubstanceUseHistoryLog T On T.ClassInfo=Q.ClassInfo and T.AssessmentID=@AssessmentID and T.IsDeleted=0 AND T.PatientActivityID = @PatientActivityID 	ORDER BY SequenceNumber 	END END  --- exec USP_GetSubstanceUseHistoryDetails 1025,'',3088 "
dbo,SP_Mst_Diagnosis_Search," Create Procedure [dbo].[SP_Mst_Diagnosis_Search] (@SearchText nvarchar(max)) AS BEGIN 	Select Diagnosis_ID, ICD10Code, Diagnosis_Name  FROM Mst_Diagnosis  	WHERE [ICD10Code] like @SearchText +'%' OR Diagnosis_Name LIKE '%' + @SearchText + '%' END  --EXEC SP_Mst_Diagnosis_Search 'acu'"
dbo,USP_GetTrnFamilyHistory," create procedure [dbo].[USP_GetTrnFamilyHistory] ( 	@AssessmentID int, 	@PatientActivityID int = 0  ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT [ID] 			,[AssessmentID] 			,[HasFamilyPsychiatricHistory] 			,[FamilyPsychiatricHistoryDetails] 			,[HasFamilyMedialHistory] 			,[FamilyMedialHistoryDetails] 			,[MotherFamilyPsychiatricHistoryDetails] 			,[FatherFamilyPsychiatricHistoryDetails] 			,[SiblingsFamilyPsychiatricHistoryDetails] 			,[GrandmothersFamilyPsychiatricHistoryDetails] 			,[GrandfathersFamilyPsychiatricHistoryDetails] 			,[ChildrenFamilyPsychiatricHistoryDetails] 			,[MotherFamilyMedialHistoryDetails] 			,[MotherFamilyMedialHistoryMyocardialAgeEvent] 			,[MotherFamilyMedialHistoryCerebrovascularAgeEvent] 			,[FatherFamilyMedialHistoryDetails] 			,[FatherFamilyMedialHistoryMyocardialAgeEvent] 			,[FatherFamilyMedialHistoryCerebrovascularAgeEvent] 			,[SiblingsFamilyMedialHistoryDetails] 			,[SiblingsFamilyMedialHistoryMyocardialAgeEvent] 			,[SiblingsFamilyMedialHistoryCerebrovascularAgeEvent] 			,[GrandmothersFamilyMedialHistoryDetails] 			,[GrandmothersFamilyMedialHistoryMyocardialAgeEvent] 			,[GrandmothersFamilyMedialHistoryCerebrovascularAgeEvent] 			,[GrandfathersFamilyMedialHistoryDetails] 			,[GrandfathersFamilyMedialHistoryMyocardialAgeEvent] 			,[GrandfathersFamilyMedialHistoryCerebrovascularAgeEvent] 			,[ChildrenFamilyMedialHistoryDetails] 			,[ChildrenFamilyMedialHistoryMyocardialAgeEvent] 			,[ChildrenFamilyMedialHistoryCerebrovascularAgeEvent] 			,[MotherFamilyMedialHistoryOtherText]   			,[FatherFamilyMedialHistoryOtherText]  			,[SiblingsFamilyMedialHistoryOtherText]  			,[GrandmothersFamilyMedialHistoryOtherText] 			,[GrandfathersFamilyMedialHistoryOtherText] 			,[ChildrenFamilyMedialHistoryOtherText]   		FROM [dbo].[TrnFamilyHistory] FH 		WHERE FH.AssessmentID = @AssessmentID 	END 	ELSE 	BEGIN 		SELECT [ID] 			,[AssessmentID] 			,[HasFamilyPsychiatricHistory] 			,[FamilyPsychiatricHistoryDetails] 			,[HasFamilyMedialHistory] 			,[FamilyMedialHistoryDetails] 			,[MotherFamilyPsychiatricHistoryDetails] 			,[FatherFamilyPsychiatricHistoryDetails] 			,[SiblingsFamilyPsychiatricHistoryDetails] 			,[GrandmothersFamilyPsychiatricHistoryDetails] 			,[GrandfathersFamilyPsychiatricHistoryDetails] 			,[ChildrenFamilyPsychiatricHistoryDetails] 			,[MotherFamilyMedialHistoryDetails] 			,[MotherFamilyMedialHistoryMyocardialAgeEvent] 			,[MotherFamilyMedialHistoryCerebrovascularAgeEvent] 			,[FatherFamilyMedialHistoryDetails] 			,[FatherFamilyMedialHistoryMyocardialAgeEvent] 			,[FatherFamilyMedialHistoryCerebrovascularAgeEvent] 			,[SiblingsFamilyMedialHistoryDetails] 			,[SiblingsFamilyMedialHistoryMyocardialAgeEvent] 			,[SiblingsFamilyMedialHistoryCerebrovascularAgeEvent] 			,[GrandmothersFamilyMedialHistoryDetails] 			,[GrandmothersFamilyMedialHistoryMyocardialAgeEvent] 			,[GrandmothersFamilyMedialHistoryCerebrovascularAgeEvent] 			,[GrandfathersFamilyMedialHistoryDetails] 			,[GrandfathersFamilyMedialHistoryMyocardialAgeEvent] 			,[GrandfathersFamilyMedialHistoryCerebrovascularAgeEvent] 			,[ChildrenFamilyMedialHistoryDetails] 			,[ChildrenFamilyMedialHistoryMyocardialAgeEvent] 			,[ChildrenFamilyMedialHistoryCerebrovascularAgeEvent] 			,[MotherFamilyMedialHistoryOtherText]   			,[FatherFamilyMedialHistoryOtherText]  			,[SiblingsFamilyMedialHistoryOtherText]  			,[GrandmothersFamilyMedialHistoryOtherText] 			,[GrandfathersFamilyMedialHistoryOtherText] 			,[ChildrenFamilyMedialHistoryOtherText]   		FROM [dbo].[TrnFamilyHistoryLog] FH 		WHERE FH.AssessmentID = @AssessmentID AND FH.PatientActivityID = @PatientActivityID 	END END"
dbo,SP_Mst_Medicine_Search," Create procedure SP_Mst_Medicine_Search (@SearchText nvarchar(max)) AS BEGIN 	Select Med_ID, Med_Name FROM Mst_Medicine WHERE Med_Name like  @SearchText +'%' END  -- Exec SP_Mst_Medicine_Search 'Flu'"
dbo,USP_GetTrnMentalStatusExam," create procedure [dbo].[USP_GetTrnMentalStatusExam] ( 	@AssessmentID int, 	@PatientActivityID int = 0 ) AS BEGIN 	IF @PatientActivityID = 0  	BEGIN 		SELECT [ID]       ,[Appearance]       ,[AppearanceComment]       ,[BuildStature]       ,[BuildStatureComment]       ,[Posture]       ,[PostureComment]       ,[EyeContact]       ,[EyeContactComment]       ,[Activity]       ,[ActivityComment]       ,[AttitudeTowardExaminer]       ,[AttitudeTowardExaminerComment]       ,[AttitudeTowardParentGuardian]       ,[AttitudeTowardParentGuardianComment]       ,[SeparationChildrenAdolescentONLY]       ,[SeparationChildrenAdolescentONLYComment]       ,[Mood]       ,[MoodComment]       ,[Affect]       ,[AffectComment]       ,[Speech]       ,[SpeechComment]       ,[ThoughtProcess]       ,[ThoughtProcessComment]       ,[Perception]       ,[PerceptionComment]       ,[Hallucinations]       ,[HallucinationsComment]       ,[ThoughtContent]       ,[ThoughtContentComment]       ,[Delusions]       ,[DelusionsComment]       ,[Cognition]       ,[CognitionComment]       ,[IntelligenceEstimate]       ,[IntelligenceEstimateComment]       ,[Insight]       ,[InsightComment]       ,[Judgement]       ,[JudgementComment] 	  ,[ElaborationonPositiveMentalStatusFindings]   FROM [dbo].[TrnMentalStatusExam] MSE 	WHERE MSE.AssessmentID = @AssessmentID 	END 	ELSE 	BEGIN 		SELECT [ID]       ,[Appearance]       ,[AppearanceComment]       ,[BuildStature]       ,[BuildStatureComment]       ,[Posture]       ,[PostureComment]       ,[EyeContact]       ,[EyeContactComment]       ,[Activity]       ,[ActivityComment]       ,[AttitudeTowardExaminer]       ,[AttitudeTowardExaminerComment]       ,[AttitudeTowardParentGuardian]       ,[AttitudeTowardParentGuardianComment]       ,[SeparationChildrenAdolescentONLY]       ,[SeparationChildrenAdolescentONLYComment]       ,[Mood]       ,[MoodComment]       ,[Affect]       ,[AffectComment]       ,[Speech]       ,[SpeechComment]       ,[ThoughtProcess]       ,[ThoughtProcessComment]       ,[Perception]       ,[PerceptionComment]       ,[Hallucinations]       ,[HallucinationsComment]       ,[ThoughtContent]       ,[ThoughtContentComment]       ,[Delusions]       ,[DelusionsComment]       ,[Cognition]       ,[CognitionComment]       ,[IntelligenceEstimate]       ,[IntelligenceEstimateComment]       ,[Insight]       ,[InsightComment]       ,[Judgement]       ,[JudgementComment] 	  ,[ElaborationonPositiveMentalStatusFindings]   FROM [dbo].[TrnMentalStatusExamLog] MSE 	WHERE MSE.AssessmentID = @AssessmentID AND MSE.PatientActivityID = @PatientActivityID 	END END"
dbo,SP_Mst_MedNDC," Create procedure SP_Mst_MedNDC AS BEGIN 	Select NDC, Med_ID, Strength_ID From Mst_MedNDC END"
dbo,USP_GetUploadSummaryDetails," Create procedure USP_GetUploadSummaryDetails ( 	@AccountId INT, 	@orderBy nvarchar(50) = 'UploadDate',  	@orderDir varchar(4) = 'desc',  	@StartFrom int = 0,  	@PageSize int = 999999 )AS BEGIN 	With UploadSummaryResult AS ( 		SELECT UPL.ID, 			UploadType, 			UploadDate, 			UPL.UploadedBy, 			U.User_First_Name + ' ' + U.User_Last_Name AS UploadedByName, 			UploadStatus, 			MemberCount, 			ClaimCount, 			PDCActivityCount, 			ErrorText, 			UpdatedRecordCount, 			NewEnrollmentQueuecount 		FROM UploadSummary UPL LEFT JOIN Mst_User U ON UPL.UploadedBy=U.User_ID 		WHERE UPL.ID>0 AND UPL.AccountID = @AccountId 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY UploadDate DESC, case when @orderBy = 'UploadType' and @orderDir = 'asc' then UploadType end, 								case when @orderBy = 'UploadType' and @orderDir = 'desc' then UploadType end desc, 								case when @orderBy = 'UploadedBy' and @orderDir = 'asc' then UploadedBy end, 								case when @orderBy = 'UploadedBy' and @orderDir = 'desc' then UploadedBy end desc, 								case when @orderBy = 'UploadStatus' and @orderDir = 'asc' then UploadStatus end, 								case when @orderBy = 'UploadStatus' and @orderDir = 'desc' then UploadStatus end desc, 								case when @orderBy = 'MemberCount' and @orderDir = 'asc' then MemberCount end, 								case when @orderBy = 'MemberCount' and @orderDir = 'desc' then MemberCount end desc,  								case when @orderBy = 'ClaimCount' and @orderDir = 'asc' then ClaimCount end, 								case when @orderBy = 'ClaimCount' and @orderDir = 'desc' then ClaimCount end desc, 								case when @orderBy = 'PDCActivityCount' and @orderDir = 'asc' then PDCActivityCount end, 								case when @orderBy = 'PDCActivityCount' and @orderDir = 'desc' then PDCActivityCount end desc, 								case when @orderBy = 'ErrorText' and @orderDir = 'asc' then ErrorText end, 								case when @orderBy = 'ErrorText' and @orderDir = 'desc' then ErrorText end desc 								 			) AS RowNumber FROM UploadSummaryResult  	)   	SELECT *, (Select Count(ID) FROM UploadSummaryResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END -- EXEC USP_GetUploadSummaryDetails "
dbo,USP_GetUserAccountList," Create procedure USP_GetUserAccountList (@UserId int) AS BEGIN 	Select ID, AccountId, UserId, Account_Name FROM  Trn_User_Account UA 	INNER JOIN Mst_Account MA  ON UA.AccountId = MA.Account_ID and UA.UserId = @UserId;  END"
dbo,SP_Mst_PCP_Search," Create Procedure [dbo].[SP_Mst_PCP_Search] (@SearchText nvarchar(max)) AS BEGIN 	Select Id, PCP_First_Name + ' ' + PCP_Last_Name AS PCPFullName FROM Mst_PCP WHERE PCP_First_Name like  @SearchText +'%' END  -- Exec SP_Mst_PCP_Search'Ma'"
dbo,USP_GetUserListByAccountRole," Create Procedure [dbo].[USP_GetUserListByAccountRole] ( 	@AccountId INT ) AS BEGIN 	SELECT User_ID, Cust_ID,User_First_Name,User_Last_Name,User_Role,User_email,User_Phone,User_Status,User_Timezone,User_CreatedAt,User_CreatedBy,User_UpdatedAt,User_UpdatedBy  	FROM Mst_User U 	INNER JOIN MstAccountTypeRoles R ON U.User_Role = R.RoleId 	--INNER JOIN Trn_User_Account UA ON UA.UserId = U.User_Role 	INNER JOIN Mst_Account MA ON MA.AccountType = R.AccountTypeId AND MA.Account_ID = @AccountId END  --EXEC USP_GetUserListByAccountRole 22"
dbo,SP_Mst_Pharmacy_Search," Create procedure [dbo].[SP_Mst_Pharmacy_Search] (@SearchText nvarchar(max)) AS BEGIN 	Select Id, PharmacyName FROM Mst_Pharmacy WHERE PharmacyName like  @SearchText +'%' END  -- Exec SP_Mst_Prescriber_Search 'p'"
dbo,USP_GetUserListByRole," Create Procedure [dbo].[USP_GetUserListByRole] ( 	@AccountId INT,  	@UserRole INT, 	@PracticeID INT = 0 ) AS BEGIN 	SELECT  		DISTINCT [User_ID], Cust_ID, User_First_Name, User_Last_Name, 		User_First_Name +' '+ User_Last_Name AS UserFullName, 		User_Role, 		User_email, 		User_Timezone 	FROM Mst_User U 	INNER JOIN Trn_User_Account UA ON U.User_ID = UA.UserId AND UA.AccountId = @AccountId AND U.User_Role = @UserRole 	LEFT JOIN TrnUserPractices UP ON U.User_ID=UP.UserID  	WHERE U.User_Status = 1 AND (@PracticeID = 0 OR UP.PracticeID= @PracticeID ) END  --EXEC USP_GetUserListByRole 22, 1, 3"
dbo,SP_Mst_Prescriber_Search," Create Procedure [dbo].[SP_Mst_Prescriber_Search] (@SearchText nvarchar(max)) AS BEGIN 	Select Id, PrescriberFirstName + ' ' + PrescriberLastName AS PriscriberFullName  	FROM Mst_Prescriber WHERE PrescriberFirstName + ' ' + PrescriberLastName like  @SearchText +'%' END  -- Exec SP_Mst_Prescriber_Search 'Ma'"
dbo,USP_GetUserPracticeList," Create procedure USP_GetUserPracticeList (@UserId int) AS BEGIN 	Select MP.ID, MP.PracticeName, UP.UserID FROM  TrnUserPractices UP 	INNER JOIN Mst_Practice  MP ON UP.PracticeID = MP.ID and MP.PracticeStatus = 1 AND UP.UserID = @UserId; END"
dbo,SP_PatientActivity," Create procedure [dbo].SP_PatientActivity ( 	@userId INT,  	@AccountId INT, 	@ActivitySort varchar(50) = '', 	@filterBy varchar(100) = '',  	@filterByActivityType varchar(max) = '', 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'Activity_Start_Date',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	SET NOCOUNT ON; 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId); 	 	DECLARE @TodayDate Date = (Select Convert(Date, GetDate())); 	 	CREATE TABLE #ActivityTypeBy (ActivityBY varchar(max)); 	INSERT INTO #ActivityTypeBy (ActivityBY) SELECT * FROM dbo.func_Split(@filterByActivityType, ',');  	CREATE TABLE #ActivityFilterBy (ActivityFilterBy varchar(100)); 	INSERT INTO #ActivityFilterBy (ActivityFilterBy) SELECT * FROM dbo.func_Split(@filterBy, ',');  	WITH Result AS ( 	Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		TPA.Activity_Start_Date, 		Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time) AS LastActivityDate, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		TPA.Activity_Actual_End_Time, 		TPA.Activity_Assigned_To, 		MU.User_First_Name + ' ' + MU.User_Last_Name AS Activity_Assigned_To_Name, 		TPA.Activity_Note, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		TPA.Activity_Delay_Note, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.PatientFullName, 		P.Account_Name, 		p.ZipCode, 		PAA.AttemptNumber AS AttemptNumber, 		TPA.LastCallOutcomeName, 		ActivityOutcomeName 	From dbo.Trn_Patient_Activity TPA with (nolock)  	INNER JOIN dbo.Mst_Activity MA with (nolock)  ON MA.Activity_ID = TPA.Activity_ID 	INNER JOIN dbo.View_Mst_Patient P with (nolock)  ON P.Patient_ID = TPA.Patient_ID AND P.Account_ID = @AccountId AND P.PatientEnrollmentId = TPA.Patient_Enroll_ID 	INNER JOIN dbo.Mst_Activity_Type MAT with (nolock)  ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN dbo.View_PatientActivityAttempt PAA with (nolock)  ON PAA.Patient_Activity_ID = TPA.Patient_Activity_ID 	LEFT JOIN dbo.Trn_Activity_Attempt TAA  with (nolock) ON  TPA.Patient_Activity_ID = TAA.Patient_Activity_ID AND TAA.AttemptNumber = PAA.AttemptNumber 	LEFT JOIN dbo.Mst_User MU with (nolock) ON MU.User_ID = TPA.Activity_Assigned_To 	WHERE P.Patient_Status = 1 AND TPA.Activity_Status = 1 AND 		(@isAdmin = 1 OR TPA.Activity_Assigned_To = @userId)  		AND TPA.Activity_Assigned_To IS NOT NULL 		AND (@ActivitySort = ''  				OR (@ActivitySort = 'Today' AND TPA.Activity_Start_Date = @TodayDate ) 				OR (@ActivitySort = 'Future' AND TPA.Activity_Start_Date > @TodayDate ) 				OR (@ActivitySort = 'Delayed' AND TPA.Activity_Start_Date < @TodayDate) 			) 			AND (@filterBy = '' OR (ISNULL(TPA.Activity_Start_Status, 1) in (SELECT * FROM #ActivityFilterBy))) 			AND (@filterByActivityType = '' OR (MA.ActivityType COLLATE SQL_Latin1_General_CP1_CI_AS in (SELECT ActivityBY FROM #ActivityTypeBy)) ) 			AND (@search = '' OR (P.PatientFullName  LIKE '%' + @search + '%' OR P.Patient_MRN LIKE '%' + @search + '%' OR P.Patient_Contact_Phone LIKE '%' + @search + '%')) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Name' and @orderDir = 'asc' then Activity_Name end, 								case when @orderBy = 'Activity_Name' and @orderDir = 'desc' then Activity_Name end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'asc' then Activity_Assigned_To_Name end, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'desc' then Activity_Assigned_To_Name end desc, 								case when @orderBy = 'Activity_Start_Status' and @orderDir = 'asc' then Activity_Start_Status end, 								case when @orderBy = 'Activity_Start_Status' and @orderDir = 'desc' then Activity_Start_Status end desc, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc, 								case when @orderBy = 'Activity_Start_Time' and @orderDir = 'asc' then Activity_Start_Time end, 								case when @orderBy = 'Activity_Start_Time' and @orderDir = 'desc' then Activity_Start_Time end desc, 								case when @orderBy = 'LastCallOutcomeName' and @orderDir = 'asc' then LastCallOutcomeName end, 								case when @orderBy = 'LastCallOutcomeName' and @orderDir = 'desc' then LastCallOutcomeName end desc, 								case when @orderBy = 'ActivityOutcomeName' and @orderDir = 'asc' then ActivityOutcomeName end, 								case when @orderBy = 'ActivityOutcomeName' and @orderDir = 'desc' then ActivityOutcomeName end desc, 								case when @orderBy = 'LastActivityDate' and @orderDir = 'asc' then LastActivityDate end, 								case when @orderBy = 'LastActivityDate' and @orderDir = 'desc' then LastActivityDate end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Activity_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize);  	DROP TABLE #ActivityTypeBy; 	DROP TABLE #ActivityFilterBy; END  -- EXEC SP_PatientActivity 3,5,'Delayed','1,2','','','Activity_Start_Date','asc',0,10 -- EXEC sp_recompile N'dbo.SP_PatientActivity';  "
dbo,USP_HWPatientSummaryReport," CREATE procedure USP_HWPatientSummaryReport ( 	@AccountID INT, 	@FromDate DATETIME, 	@ToDate DATETIME , 	@EnrollmentStatusID INT = 99, 	@Search NVARCHAR(MAX) = '', 	@OrderBy nvarchar(50) = 'PatientFullName',  	@OrderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	--SELECT @ToDate = DATEADD(day,1,@ToDate); 	With PatientSummary AS	( 		SELECT   			P.Patient_ID, 			P.Patient_MRN, 			P.Patient_First_Name +' ' + P.Patient_Last_Name AS PatientFullName, 			P.Patient_DOB, 			P.ZipCode, 			I.InPatientLogId, 			I.EpisodeId, 			I.EnrollmentStatus, 			E.Discription AS EnrollmentStatusName, 			I.EnrollmentDate, 			I.AdmissionDate, 			I.DischargeDate, 			I.UnitNumber, 			I.FinNumber, 			I.DRG, 			D.DRGTitle, 			FHV.Activity_Start_Date AS HomeVisitDate, 			PH.Activity_Start_Date AS PharmacistDate 		FROM Mst_Patient P 		INNER JOIN Trn_InPatientLog I ON I.Patient_ID = P.Patient_ID 		INNER JOIN Mst_Enum E ON E.EnumValue = I.EnrollmentStatus AND E.EnumType='EnrollmentStatus' 		LEFT JOIN View_HWF_PatientFirstHomeVisitStatus FHV ON FHV.Patient_ID = P.Patient_ID AND FHV.InPatientLogId=I.InPatientLogId AND FHV.Activity_Start_Status = 3 		LEFT JOIN View_HWF_PharmacyConsultActivityStatus PH ON PH.Patient_ID = P.Patient_ID AND PH.InPatientLogId=I.InPatientLogId AND PH.Activity_Start_Status = 3 		LEFT JOIN Mst_DRG D ON D.ID = I.DRG 		WHERE P.Patient_Status = 1 AND P.Account_ID = @AccountID  			AND I.DischargeDate >= @fromDate AND I.DischargeDate <= @toDate  			AND (@EnrollmentStatusID=99 OR I.EnrollmentStatus = @EnrollmentStatusID) -- All Enrollment Status or Specific enrollment status 			AND (@Search = ''  					OR P.Patient_MRN like '%'+ @Search + '%'  					OR P.Patient_First_Name like '%'+ @Search + '%'  					OR P.Patient_Last_Name like '%'+ @Search + '%'  					OR (P.Patient_First_Name + ' '+ P.Patient_Last_Name) like '%'+ @Search + '%' 					OR (P.Patient_Last_Name+ ' '+ P.Patient_First_Name ) like '%'+ @Search + '%' 				)   	), 	OrderByResult AS (SELECT *, ROW_NUMBER() over (order BY  							case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 							case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc 		) AS RowNumber FROM PatientSummary  	)  	SELECT *, (Select Count(Patient_ID) FROM PatientSummary) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  END  --EXEC USP_HWPatientSummaryReport 21,'23NOV2022','23Nov2022',99,''  "
dbo,SP_PatientActivityByPatientId," Create procedure SP_PatientActivityByPatientId (@userId INT, @patientId INT) AS BEGIN 	 	Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time, TPA.Activity_Start_Date ) AS Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		TPA.Activity_Actual_End_Time, 		TPA.Activity_Assigned_To, 		MU.User_First_Name + ' ' + MU.User_Last_Name AS Activity_Assigned_To_Name, 		TPA.Activity_Note, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		TPA.Activity_Delay_Note, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Account_Name, 		P.ZipCode, 		PAA.AttemptNumber AS AttemptNumber, 		TPA.LastCallOutcomeName, 		ActivityOutcomeName, 		TPA.HasFlagForReview,-- For mind healthy flow 		TPA.ReviewNote,-- For mind healthy flow to check whether review has been done or not 		TPA.SpentTimeInMinutes, --duration in min spent on activity. 		TPA.IsSubmited 	From Trn_Patient_Activity TPA  	INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID 	INNER JOIN View_Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND ISNULL(P.PatientEnrollmentId, 0) = ISNULL(TPA.Patient_Enroll_ID, 0) 	INNER JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN View_PatientActivityAttempt PAA ON PAA.Patient_Activity_ID = TPA.Patient_Activity_ID 	LEFT JOIN Trn_Activity_Attempt TAA ON TPA.Patient_Activity_ID = TAA.Patient_Activity_ID AND TAA.AttemptNumber = PAA.AttemptNumber 	LEFT JOIN Mst_User MU ON MU.User_ID = TPA.Activity_Assigned_To 	WHERE P.Patient_Status = 1 AND TPA.Patient_ID = @patientId AND TPA.Activity_Status = 1 	order by Activity_Start_Date desc END  -- EXEC SP_PatientActivityByPatientId 22, 30223"
dbo,USP_ImportMember," Create procedure USP_ImportMember ( @importTable MemberImportTableType readonly ) AS BEGIN 	--truncate table Salutem_Temp.dbo.Member_Import; 	INSERT INTO Salutem_Temp.dbo.Member_Import select * from @importTable 	SELECT @@ROWCOUNT END"
dbo,SP_PatientActivityQueue," Create procedure [dbo].SP_PatientActivityQueue ( 	@AccountId INT, 	@ActivityType VARCHAR(150), 	@PdcCallfromDate Datetime =null, 	@PdcCalltoDate Datetime=null, 	@PdcRefillfromDate Datetime=null, 	@PdcRefilltoDate Datetime=null, 	@PatientActivityId int = 0, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'Activity_Start_Date',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999, 	@filterByTimezone varchar(100) = '', 	@filterByRegion varchar(100) = '' ) AS BEGIN 	SET NOCOUNT ON; 	WITH Result AS ( 	Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		TPA.Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Assigned_To, 		MU.User_First_Name + ' ' + MU.User_Last_Name AS Activity_Assigned_To_Name, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		TPA.Activity_Status, 		TPA.Patient_Enroll_ID, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.PatientFullName, 		P.Account_Name, 		P.Patient_MRN, 		P.ReFillDueDate,  		P.MACScore AS MAC, 		P.MADScore AS MAD, 		P.MAHScore AS MAH, 		P.SUPDScore AS SUPD, 		P.Patient_Contact_State, 		P.ZipCode, 		HVC.HomeVisitDate, 		HVC.IsImmediateActionRequired, 		P.TimeZoneName, 		R.Region 	From dbo.Trn_Patient_Activity TPA  	INNER JOIN dbo.Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID 	INNER JOIN dbo.View_Mst_Patient P ON P.Patient_ID = TPA.Patient_ID AND P.Account_ID = @AccountId AND ISNULL(TPA.Patient_Enroll_ID, 0) = P.PatientEnrollmentId 	INNER JOIN dbo.View_FirstHomeVisitComplete HVC ON HVC.Patient_ID = P.Patient_ID 	INNER JOIN dbo.Trn_Patient_UHCDetails UD with (nolock) ON P.Patient_ID = UD.PatientId 	LEFT JOIN dbo.Mst_User MU ON MU.User_ID = TPA.Activity_Assigned_To 	LEFT JOIN Mst_RegionToCMSContact R ON UD.CMS_Contract_Number = R.CMSContactNumber AND P.Patient_Contact_State= R.State 	WHERE P.Patient_Status = 1 AND TPA.Activity_Assigned_To IS NULL  		AND ((@PatientActivityId = 0 AND MA.ActivityType = @ActivityType) 				OR TPA.Patient_Activity_ID = @PatientActivityId ) 		AND ((Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 				OR P.Patient_MRN LIKE '%' + @search + '%' 				OR P.Patient_Contact_Phone LIKE '%' + @search + '%' 			) 			-- Changes for PDC filter 		AND(               (@PdcCallfromDate IS NULL  OR TPA.Activity_Start_Date  >= @PdcCallfromDate)                   AND (@PdcCalltoDate IS NULL OR TPA.Activity_Start_Date <= @PdcCalltoDate)               ) 		AND(                (@PdcRefillfromDate IS NULL  OR P.ReFillDueDate  >= @PdcRefillfromDate)                  AND (@PdcRefilltoDate IS NULL  OR P.ReFillDueDate <= @PdcRefilltoDate)               ) 		AND (@filterByRegion = ''  					OR (ISNULL(R.Region, '') in (SELECT * FROM dbo.func_Split(@filterByRegion, ','))) 			) 		AND (@filterByTimezone = ''  				OR (ISNULL(P.TimeZoneName, '') in (SELECT * FROM dbo.func_Split(@filterByTimezone, ','))) 		) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY IsImmediateActionRequired desc, case when @orderBy = 'Account_Name' and @orderDir = 'asc' then Account_Name end, 								case when @orderBy = 'Account_Name' and @orderDir = 'desc' then Account_Name end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'Activity_Start_Status' and @orderDir = 'asc' then Activity_Start_Status end, 								case when @orderBy = 'Activity_Start_Status' and @orderDir = 'desc' then Activity_Start_Status end desc, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'asc' then Activity_Assigned_To_Name end, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'desc' then Activity_Assigned_To_Name end desc, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc, 								case when @orderBy = 'Activity_Start_Time' and @orderDir = 'asc' then Activity_Start_Time end, 								case when @orderBy = 'Activity_Start_Time' and @orderDir = 'desc' then Activity_Start_Time end desc,  								case when @orderBy = 'ReFillDueDate' and @orderDir = 'asc' then ReFillDueDate end, 								case when @orderBy = 'ReFillDueDate' and @orderDir = 'desc' then ReFillDueDate end desc, 								case when @orderBy = 'HomeVisitDate' and @orderDir = 'asc' then HomeVisitDate end, 								case when @orderBy = 'HomeVisitDate' and @orderDir = 'desc' then HomeVisitDate end desc, 								 								case when @orderBy = 'MAC' and @orderDir = 'asc' then MAC end, 								case when @orderBy = 'MAC' and @orderDir = 'desc' then MAC end desc, 								case when @orderBy = 'MAD' and @orderDir = 'asc' then MAD end, 								case when @orderBy = 'MAD' and @orderDir = 'desc' then MAD end desc, 								case when @orderBy = 'MAH' and @orderDir = 'asc' then MAH end, 								case when @orderBy = 'MAH' and @orderDir = 'desc' then MAH end desc, 								case when @orderBy = 'SUPD' and @orderDir = 'asc' then SUPD end, 								case when @orderBy = 'SUPD' and @orderDir = 'desc' then SUPD end desc  								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END  -- exec SP_PatientActivityQueue 5,'MRR',null,null,null, null,0,'','HomeVisitDate','asc'"
dbo,USP_ImportMemberMRN," Create procedure USP_ImportMemberMRN ( @importTable MemberMRNTableType readonly ) AS BEGIN 	--truncate table Salutem_Temp.dbo.Member_Import; 	INSERT INTO Salutem_Temp.dbo.MemberMRN (MRN,PatientName,FIN) select MRN, PatientName, RTRIM(LTRIM(FIN)) from @importTable 	SELECT @@ROWCOUNT END"
dbo,SP_PatientActivityQueueByPatientId," Create procedure SP_PatientActivityQueueByPatientId ( 	@ActivityType VARCHAR(150), 	@PatientId int, 	@UserId int, 	@DaysSupply int, 	@activitScheduleDate datetime ) AS BEGIN 	 	--getting current year enrollment id 	Declare @EnrollmentID INT = (SELECT DBO.func_GetPatientEnrollID(@PatientId));  	Select Patient_Activity_ID, Patient_ID, TPA.Activity_ID, Activity_Start_Date, @DaysSupply DaysSupply 	FROM Trn_Patient_Activity TPA  	INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID AND MA.ActivityType = @ActivityType 	WHERE TPA.Patient_ID = @PatientId AND TPA.Patient_Enroll_ID = @EnrollmentID 		AND (TPA.Activity_Assigned_To IS NULL OR (TPA.Activity_Assigned_To = @UserId AND TPA.Activity_Start_Status < 3 )) 		AND TPA.Activity_Start_Date >= @activitScheduleDate END"
dbo,USP_InPatientActivity," Create procedure [dbo].USP_InPatientActivity ( 	@userId INT,  	@AccountId INT, 	@ActivitySort varchar(50) = '', 	@filterBy varchar(100) = '',  	@filterByActivityType varchar(max) = '', 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'Activity_Start_Date',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	SET NOCOUNT ON; 	Declare @isAdmin BIT; 	SET @isAdmin = (SELECT dbo.func_IsUserAdmin(@userId)); 	DECLARE @AccountType int = 0; 	SELECT @AccountType=AccountType FROM Mst_Account WHERE Account_ID = @AccountId; 	if @AccountType != 3 	BEGIN 		SET @isAdmin = 1; 	END 	DECLARE @TodayDate Date = (Select Convert(Date, GetDate())); 	 	CREATE TABLE #FilterByStatus (item INT); 	CREATE TABLE #FilterByActivityType (item VARCHAR(MAX)); 	INSERT INTO #FilterByStatus SELECT * FROM dbo.func_Split(@filterBy, ','); 	INSERT INTO #FilterByActivityType SELECT * FROM dbo.func_Split(@filterByActivityType, ',');  	WITH Result AS ( 	Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		TPA.Activity_Start_Date, 		Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time) AS LastActivityDate, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		TPA.Activity_Actual_End_Time, 		TPA.Activity_Assigned_To, 		MU.User_First_Name + ' ' + MU.User_Last_Name AS Activity_Assigned_To_Name, 		TPA.Activity_Note, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		TPA.Activity_Delay_Note, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Patient_First_Name + ' '+ P.Patient_Last_Name AS PatientFullName, 		P.Account_Name, 		p.ZipCode, 		TPA.AttemptNumber, 		TPA.LastCallOutcomeName, 		ActivityOutcomeName, 		TPA.InPatientLogId 	From dbo.Trn_Patient_Activity TPA with (nolock)  	INNER JOIN dbo.View_Mst_Patient P with (nolock)  ON P.Patient_ID = TPA.Patient_ID AND P.Account_ID = @AccountId 	INNER JOIN dbo.Mst_Activity MA with (nolock)  ON MA.Activity_ID = TPA.Activity_ID 	INNER JOIN dbo.Mst_Activity_Type MAT with (nolock)  ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN dbo.Mst_User MU with (nolock) ON MU.User_ID = TPA.Activity_Assigned_To AND TPA.Activity_Assigned_To > 0 	WHERE P.Patient_Status = 1 AND TPA.Activity_Status = 1  		AND (@isAdmin = 1 OR TPA.Activity_Assigned_To = @userId)  		AND TPA.Activity_Assigned_To IS NOT NULL 		AND (@ActivitySort = ''  				OR (@ActivitySort = 'Today' AND TPA.Activity_Start_Date = @TodayDate ) 				OR (@ActivitySort = 'Future' AND TPA.Activity_Start_Date > @TodayDate ) 				OR (@ActivitySort = 'Delayed' AND TPA.Activity_Start_Date < @TodayDate) 			) 			AND (	@filterBy = '' OR (ISNULL(TPA.Activity_Start_Status, 1) in (SELECT * FROM #FilterByStatus))	) 			AND (	@filterByActivityType = '' OR (ISNULL(MA.ActivityType COLLATE SQL_Latin1_General_CP1_CI_AS, '') in (SELECT * FROM #FilterByActivityType))	) 			AND ( 					@search = '' OR ( 						(Patient_First_Name + ' ' + Patient_Last_Name)  LIKE '%' + @search + '%' 						OR P.Patient_MRN LIKE '%' + @search + '%' 						OR P.Patient_Contact_Phone LIKE '%' + @search + '%' 					) 				) 	),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Name' and @orderDir = 'asc' then Activity_Name end, 								case when @orderBy = 'Activity_Name' and @orderDir = 'desc' then Activity_Name end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'asc' then Activity_Assigned_To_Name end, 								case when @orderBy = 'Activity_Assigned_To_Name' and @orderDir = 'desc' then Activity_Assigned_To_Name end desc, 								case when @orderBy = 'LastCallOutcomeName' and @orderDir = 'asc' then LastCallOutcomeName end, 								case when @orderBy = 'LastCallOutcomeName' and @orderDir = 'desc' then LastCallOutcomeName end desc, 								case when @orderBy = 'ActivityOutcomeName' and @orderDir = 'asc' then ActivityOutcomeName end, 								case when @orderBy = 'ActivityOutcomeName' and @orderDir = 'desc' then ActivityOutcomeName end desc, 								case when @orderBy = 'LastActivityDate' and @orderDir = 'asc' then LastActivityDate end, 								case when @orderBy = 'LastActivityDate' and @orderDir = 'desc' then LastActivityDate end desc, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'asc' then Activity_Start_Date end, 								case when @orderBy = 'Activity_Start_Date' and @orderDir = 'desc' then Activity_Start_Date end desc 								 			) AS RowNumber FROM Result  	)   	SELECT *, (Select Count(Activity_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END -- EXEC USP_InPatientActivity 3,21,'Delayed','1,2','','','Activity_Start_Date','asc',0,10 -- SP_Recompile USP_InPatientActivity"
dbo,SP_PatientAppointments," Create procedure SP_PatientAppointments ( 	@Patient_ID int, 	@AppointmentId int ) AS BEGIN 	Select  		TPA.ID, 		PatientAppointmentTypeID, 		MAT.AppointmentType, 		Patient_ID, 		Prescriber_ID, 		MP.PrescriberFirstName, 		MP.PrescriberLastName, 		AppointmentDate, 		AppointmentTime, 		Notes, 		DidPatientVisit, 		ServiceType, 		StartDate, 		EndDate, 		StartTime, 		EndTime, 		AppointmentTypeID  	From Trn_Patient_Appointment TPA  	INNER JOIN Mst_PatientAppointmentType MAT ON TPA.PatientAppointmentTypeID = MAT.ID 	INNER JOIN Mst_Prescriber MP ON TPA.Prescriber_ID = MP.Id 	WHERE (@AppointmentId = 0 OR TPA.ID = @AppointmentId)  		AND (@Patient_ID = 0 OR TPA.Patient_ID = @Patient_ID)  		AND TPA.IsDeleted = 0  END"
dbo,USP_InsertInto_Mst_Prescriber," Create procedure USP_InsertInto_Mst_Prescriber ( 	@PrescriberNPI NVARCHAR(50), 	@PrescriberFirstName NVARCHAR(250), 	@PrescriberLastName NVARCHAR(250), 	@PrescriberAddress NVARCHAR(500), 	@PrescriberCity NVARCHAR(250), 	@PrescriberState NVARCHAR(250), 	@PrescriberZip NVARCHAR(50), 	@PrescriberPhone NVARCHAR(50), 	@UserId INT, 	@PatientId INT ) AS BEGIN 	Declare @PrescriberId INT = 0;  	SELECT @PrescriberId = ID FROM Mst_Prescriber WHERE PrescriberNPI = @PrescriberNPI  		OR (PrescriberFirstName = @PrescriberFirstName AND PrescriberLastName = @PrescriberLastName 			AND PrescriberPhone = @PrescriberPhone)  	IF @PrescriberId = 0   	BEGIN  		INSERT INTO Mst_Prescriber (PrescriberNPI, 		PrescriberFirstName,PrescriberLastName,PrescriberAddress,PrescriberCity, 		PrescriberState,PrescriberZip,PrescriberPhone,CreatedOn,CreatedBy)  		VALUES (@PrescriberNPI,@PrescriberFirstName,@PrescriberLastName, 		@PrescriberAddress,@PrescriberCity,@PrescriberState,@PrescriberZip,@PrescriberPhone,GETDATE(),@UserId)  		SELECT @PrescriberId = SCOPE_IDENTITY()  		--INSERT INTO Trn_Patient_Prescriber (Patient_Id, CreatedOn,CreatedBy,IsActive,IsDeleted,PrescriberId)  		--VALUES(@PatientId,GetDate(),@UserId,1,0,@PrescriberId) 	END  	SELECT @PrescriberId PrescriberId END  --Exec USP_InsertInto_Mst_Prescriber '0071003017468','RYAN7','SMITH','1330 INTERSTATE PKWY','AUGUSTA','GA','30909','(706) 651-2020',3,3 "
dbo,SP_ReportCallsDetails," CREATE procedure [dbo].[SP_ReportCallsDetails] ( 	@AccountId INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@ActivityStatusID INT, 	@CallStatusID INT, 	@ReportType varchar(50), 	@PCC INT, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN SET NOCOUNT ON; DECLARE @ActivityId int SET @ActivityId = (SELECT Top(1) Activity_ID FROM Mst_Activity WHERE ActivityType='PDCReview')  	DECLARE @toDateUpEndOfTheDay DATETIME 	SELECT @toDateUpEndOfTheDay = DATEADD(DAY, 1, @toDate)  	IF @ReportType = 'Enrollment' 	BEGIN 	 	With EnrollmentDetailsResult AS	(SELECT  			patient.Patient_MRN, 			patient.Patient_ID, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			patient.Patient_Contact_State, 			patient.CMS_Contract_Number, 			PE.Patient_Enroll_ID AS ActivityID, 			PE.EnrollmentDate AS ActivityDate, 			PE.CreatedOn AS DateImported, 			PE.Patient_Enrollment_Status AS ActivityStatusID, 			PE.Discription AS ActivityStatus, 			PE.AttemptDate AS AttemptDate, 			ECR.CallOutcome, 			PE.AttemptNumber, 			patient.MADScore, 			patient.MACScore, 			patient.MAHScore, 			patient.SUPDScore, 			U.User_First_Name+ ' '+U.User_Last_Name AssignedToName 		FROM View_EnrollmentAttempt PE 		INNER JOIN dbo.View_EnrollmentCallOutComeResult ECR ON PE.Patient_Enroll_ID = ECR.EnrollmentId AND ECR.AttemptNumber = PE.AttemptNumber 		INNER JOIN dbo.View_Mst_Patient patient ON PE.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountId  		INNER JOIN dbo.Mst_User U ON PE.AssignedUserId = U.User_ID 		WHERE PE.AttemptDate >= @fromDate AND PE.AttemptDate <= @toDateUpEndOfTheDay 			AND (@CallStatusID = 0 OR ECR.CallOutComeID = @CallStatusID)   			AND (@ActivityStatusID = 99 OR PE.EnumValue = @ActivityStatusID)   			AND (@PCC = 0 OR PE.AssignedUserId = @PCC)			 		),  		 OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'asc' then Patient_Contact_State end, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'desc' then Patient_Contact_State end desc, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc, 								 								case when @orderBy = 'DateImported' and @orderDir = 'asc' then DateImported end, 								case when @orderBy = 'DateImported' and @orderDir = 'desc' then DateImported end desc,  								case when @orderBy = 'ActivityStatus' and @orderDir = 'asc' then ActivityStatus end, 								case when @orderBy = 'ActivityStatus' and @orderDir = 'desc' then ActivityStatus end desc, 								case when @orderBy = 'ActivityDate' and @orderDir = 'asc' then ActivityDate end, 								case when @orderBy = 'ActivityDate' and @orderDir = 'desc' then ActivityDate end desc, 								case when @orderBy = 'CallOutCome' and @orderDir = 'asc' then CallOutcome end, 								case when @orderBy = 'CallOutCome' and @orderDir = 'desc' then CallOutcome end desc, 								case when @orderBy = 'AttemptDate' and @orderDir = 'asc' then AttemptDate end, 								case when @orderBy = 'AttemptDate' and @orderDir = 'desc' then AttemptDate end desc, 								case when @orderBy = 'MADScore' and @orderDir = 'asc' then MADScore end, 								case when @orderBy = 'MADScore' and @orderDir = 'desc' then MADScore end desc, 								case when @orderBy = 'MACScore' and @orderDir = 'asc' then MACScore end, 								case when @orderBy = 'MACScore' and @orderDir = 'desc' then MACScore end desc, 								case when @orderBy = 'MAHScore' and @orderDir = 'asc' then MAHScore end, 								case when @orderBy = 'MAHScore' and @orderDir = 'desc' then MAHScore end desc, 								case when @orderBy = 'SUPDScore' and @orderDir = 'asc' then SUPDScore end, 								case when @orderBy = 'SUPDScore' and @orderDir = 'desc' then SUPDScore end desc 																					 			) AS RowNumber FROM EnrollmentDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM EnrollmentDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 		 	END 	ELSE 	BEGIN  	With CallDetailsResult AS(SELECT  			patient.Patient_MRN, 			patient.Patient_ID, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			patient.Patient_Contact_State, 			patient.CMS_Contract_Number, 			PA.Patient_Activity_ID AS ActivityID, 			PA.Activity_Start_Date AS ActivityDate, 			Activity_CretaedAt AS DateImported, 			Coalesce(PA.Activity_Start_Status, 1) AS ActivityStatusID, 			ISNULL(PA.Discription,'Yet To Start') AS ActivityStatus, 			PA.AttemptDate AS AttemptDate, 			CR.CallOutcome, 			PA.AttemptNumber, 			patient.MADScore, 			patient.MACScore, 			patient.MAHScore, 			patient.SUPDScore, 			U.User_First_Name+ ' '+U.User_Last_Name AssignedToName 		FROM DBO.View_ActivityAttempt PA 		INNER JOIN dbo.View_ActivityCallOutComeResult CR ON PA.Patient_Activity_ID = CR.Patient_Activity_ID AND CR.AttemptNumber = PA.AttemptNumber  		INNER JOIN dbo.View_Mst_Patient patient ON PA.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountId 		INNER JOIN dbo.Mst_User U ON PA.AssignedUserId = U.User_ID 		WHERE PA.AttemptDate >= @fromDate AND PA.AttemptDate <= @toDateUpEndOfTheDay 			AND PA.Activity_ID = @ActivityId 			AND (@CallStatusID = 0 OR CR.CallOutComeID = @CallStatusID)  			AND (@ActivityStatusID = 99 OR ISNULL(PA.Activity_Start_Status, 1) = @ActivityStatusID) 			AND (@PCC = 0 OR PA.Activity_Assigned_To = @PCC)             ), OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY  case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'asc' then Patient_Contact_State end, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'desc' then Patient_Contact_State end desc, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc,								 								case when @orderBy = 'DateImported' and @orderDir = 'asc' then DateImported end, 								case when @orderBy = 'DateImported' and @orderDir = 'desc' then DateImported end desc, 								case when @orderBy = 'ActivityStatus' and @orderDir = 'asc' then ActivityStatus end, 								case when @orderBy = 'ActivityStatus' and @orderDir = 'desc' then ActivityStatus end desc, 								case when @orderBy = 'ActivityDate' and @orderDir = 'asc' then ActivityDate end, 								case when @orderBy = 'ActivityDate' and @orderDir = 'desc' then ActivityDate end desc, 								case when @orderBy = 'CallOutCome' and @orderDir = 'asc' then CallOutcome end, 								case when @orderBy = 'CallOutCome' and @orderDir = 'desc' then CallOutcome end desc, 								case when @orderBy = 'AttemptDate' and @orderDir = 'asc' then AttemptDate end, 								case when @orderBy = 'AttemptDate' and @orderDir = 'desc' then AttemptDate end desc, 								case when @orderBy = 'MADScore' and @orderDir = 'asc' then MADScore end, 								case when @orderBy = 'MADScore' and @orderDir = 'desc' then MADScore end desc, 								case when @orderBy = 'MACScore' and @orderDir = 'asc' then MACScore end, 								case when @orderBy = 'MACScore' and @orderDir = 'desc' then MACScore end desc, 								case when @orderBy = 'MAHScore' and @orderDir = 'asc' then MAHScore end, 								case when @orderBy = 'MAHScore' and @orderDir = 'desc' then MAHScore end desc, 								case when @orderBy = 'SUPDScore' and @orderDir = 'asc' then SUPDScore end, 								case when @orderBy = 'SUPDScore' and @orderDir = 'desc' then SUPDScore end desc 								 								 			) AS RowNumber FROM CallDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM CallDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  	END END  -- Exec SP_ReportCallsDetails 5, '24Jan2020','24Aug2021',0,0,'Enrollment',3,'PatientFullName','desc',0,10  "
dbo,USP_InsertInto_MstPatient," Create procedure USP_InsertInto_MstPatient ( 	@USER_ID INT, 	@Account_ID int, 	@MEMBER_MBI VARCHAR(50), 	@MEMBER_LAST_NAME VARCHAR(100), 	@MEMBER_FIRST_NAME VARCHAR(50), 	@MEMBER_GENDER VARCHAR(10), 	@MEMBER_DATE_OF_BIRTH DATETIME, 	@MEMBER_MIDDLE_INITIAL VARCHAR(20), 	@MEMBER_ADDRESS1 NVARCHAR(100), 	@MEMBER_ADDRESS2 NVARCHAR(100), 	@MEMBER_CITY NVARCHAR(150), 	@MEMBER_STATE NVARCHAR(150), 	@MEMBER_ZIP_CODE VARCHAR(20), 	@MEMBER_PHONE_NUMBER VARCHAR(20), 	@MEMBER_SECONDARY_PHONE_NUMBER VARCHAR(20), 	@MEMBER_PRIMARY_LANGUAGE VARCHAR(50), 	@LIS_INDICATOR VARCHAR(10), 	@DISABLED_FLAG VARCHAR(10), 	@PLAN_EFFECTIVE_DATE DATETIME, 	@TERM_DATE_FROM_PLAN DATETIME, 	@CMR_FLAG VARCHAR(10), 	@CMS_CONTRACT_NUMBER VARCHAR(20), 	@CMS_PBP_NUMBER VARCHAR(50), 	@LTC_INDICATOR VARCHAR(10), 	@REASON_FOR_TERMINATION VARCHAR(500), 	@PCP_FIRST_NAME VARCHAR(250), 	@PCP_LAST_NAME VARCHAR(250), 	@PCP_PHONE VARCHAR(20), 	@MAD_PDC VARCHAR(50), 	@MAH_PDC VARCHAR(50), 	@MAC_PDC VARCHAR(50), 	@MEMBER_TIMEZONE_NAME VARCHAR(250), 	@CLIENT_DEF_3 VARCHAR(250) )AS BEGIN 	BEGIN TRANSACTION 	BEGIN TRY 		DECLARE @Patient_MRN VARCHAR(50) = (SELECT Patient_MRN FROM Mst_Patient WHERE Patient_MRN = @MEMBER_MBI) 		DECLARE @Patient_ID INT = 0; 		DECLARE @NewEnrollmentCount INT = 0; 		DECLARE @YEAR INT = YEAR(GetDATE()); 		--We have to make sure Patient MRN number already not exist. 		IF @Patient_MRN IS NULL 		BEGIN  			DECLARE @LanguageID INT = (SELECT Language_ID FROM Mst_Language WHERE Language_Description = @MEMBER_PRIMARY_LANGUAGE) 			 			IF @LanguageID IS NULL AND LEN(ISNULL(@MEMBER_PRIMARY_LANGUAGE,'')) > 0 			BEGIN  				INSERT Mst_Language (Language_Description,Language_Status,Language_CreatedAt,Language_CreatedBy)  				VALUES (@MEMBER_PRIMARY_LANGUAGE, 1,GETDATE(),@USER_ID) 				SET @LanguageID = SCOPE_IDENTITY(); 			END 			DECLARE @CLIENT_DEF_3_Text varchar(250) = ''; 			IF @CLIENT_DEF_3 IS NULL 			BEGIN 				SET @CLIENT_DEF_3 = 0; 				SET @CLIENT_DEF_3_Text = (SELECT Discription FROM Mst_Enum WHERE EnumType='Client_Def_3' AND EnumValue=0) 			END 			ELSE 			BEGIN 				SET @CLIENT_DEF_3_Text = (SELECT Discription FROM Mst_Enum WHERE EnumType='Client_Def_3' AND EnumValue=@CLIENT_DEF_3) 			END 			--ELSE  			--BEGIN 			--	SET @LanguageID = 0; 			--END  			INSERT INTO Mst_Patient (Account_ID,Patient_First_Name,Patient_Middle_Name,Patient_Last_Name,Patient_MRN,Patient_DOB,Patient_Gender,Patient_LanguageID, 			Patient_Low_Income,Patient_Status,Patient_CreatedAt,Patient_CreatedBy,DisableFlag,CMRCompleted,CMROutcome,MACScore,MADScore,MAHScore,CLIENT_DEF_3,CLIENT_DEF_3_Text,Mobile) 			VALUES (@Account_ID,@MEMBER_FIRST_NAME,@MEMBER_MIDDLE_INITIAL,@MEMBER_LAST_NAME,@MEMBER_MBI,@MEMBER_DATE_OF_BIRTH,@MEMBER_GENDER,@LanguageID, 			@LIS_INDICATOR,1,GETDATE(),@USER_ID,@DISABLED_FLAG,@CMR_FLAG,0,@MAC_PDC,@MAD_PDC,@MAH_PDC,@CLIENT_DEF_3,@CLIENT_DEF_3_Text,@MEMBER_PHONE_NUMBER)  			SET @Patient_ID = SCOPE_IDENTITY();  			-- Newly added patient id should be greter than 0 			IF @Patient_ID > 0 			BEGIN  				--Generating first PDC score history log 				INSERT INTO TrnPatientPDCHistoryLog (PatientId,MACScore,MADScore,MAHScore,CreatedOn)VALUES (@Patient_ID,@MAC_PDC,@MAD_PDC,@MAH_PDC,GETDATE());  				--Creating primary contact details 				IF LEN(ISNULL(@MEMBER_PHONE_NUMBER, '')) > 0  				BEGIN  					INSERT INTO Trn_Patient_Contact (Patient_ID,Patient_Relation_ID,Patient_Contact_Phone,Patient_Contact_Add1,Patient_Contact_Add2,Patient_Contact_City,Patient_Contact_State,Patient_Contact_CreatedAt,Patient_Contact_CreatedBy,IsPrimary,ZipCode,TimeZoneName)  					VALUES (@Patient_ID,1,@MEMBER_PHONE_NUMBER,@MEMBER_ADDRESS1,@MEMBER_ADDRESS2,@MEMBER_CITY,@MEMBER_STATE,GETDATE(),@USER_ID,1,@MEMBER_ZIP_CODE,@MEMBER_TIMEZONE_NAME) 				END  				--Creating secondary contact details 				IF LEN(ISNULL(@MEMBER_SECONDARY_PHONE_NUMBER, '')) > 0  				BEGIN  					INSERT INTO Trn_Patient_Contact (Patient_ID,Patient_Relation_ID,Patient_Contact_Phone,Patient_Contact_Add1,Patient_Contact_Add2,Patient_Contact_City,Patient_Contact_State,Patient_Contact_CreatedAt,Patient_Contact_CreatedBy,IsPrimary,ZipCode,TimeZoneName)  					VALUES (@Patient_ID,1,@MEMBER_SECONDARY_PHONE_NUMBER,@MEMBER_ADDRESS1,@MEMBER_ADDRESS2,@MEMBER_CITY,@MEMBER_STATE,GETDATE(),@USER_ID,0,@MEMBER_ZIP_CODE,@MEMBER_TIMEZONE_NAME) 				END 				 				--Creating Trn_Patient_UHCDetails transaction entry for the patient. 				INSERT INTO Trn_Patient_UHCDetails (PatientId,Plan_Effective_Date,Term_Date_From_Plan,CMS_Contract_Number,CMS_PBP_Number,LTC_Indicator,Reason_For_Termination) 				VALUES (@Patient_ID,@PLAN_EFFECTIVE_DATE,@TERM_DATE_FROM_PLAN,@CMS_CONTRACT_NUMBER,@CMS_PBP_NUMBER,@LTC_INDICATOR,@REASON_FOR_TERMINATION)  				--Patient PCP Details if any of below fields not empty then only we are processing for PCP 				IF LEN(ISNULL(@PCP_FIRST_NAME,'')) > 0 OR LEN(ISNULL(@PCP_LAST_NAME,'')) > 0 OR LEN(ISNULL(@PCP_PHONE,'')) > 0 				BEGIN  					--Checking if Master PCP exists for for the details  					--IF not exist then creating Master PCP details first. 					DECLARE @PCP_ID INT = (SELECT ID FROM Mst_PCP WHERE PCP_First_Name = @PCP_FIRST_NAME AND PCP_Last_Name = @PCP_LAST_NAME AND PCP_Phone = @PCP_PHONE) 					IF @PCP_ID IS NULL  					BEGIN  						INSERT INTO Mst_PCP (PCP_First_Name,PCP_Last_Name,PCP_Phone,CreatedBy,CreatedAt) 						VALUES (@PCP_FIRST_NAME,@PCP_LAST_NAME,@PCP_PHONE,@USER_ID,GETDATE()) 						SET @PCP_ID = SCOPE_IDENTITY(); 					END  					--Checking if the PCP id is greater than 0 then only creating Trn PCP entry for the patient. 					IF @PCP_ID > 0 					BEGIN  						INSERT INTO Trn_Patient_PCP (PatientId,PcpId) VALUES (@Patient_ID,@PCP_ID);  					END 				END 				--End PCP details block  				--Creating Enrollment queue entry for the current year. 				 				INSERT INTO Trn_Patient_Enrollment (Patient_ID,Patient_Enrollment_Status,CreatedOn,CreatedBy,UploadedYear) 				VALUES (@Patient_ID, 0, GETDATE(), @USER_ID, @YEAR) 				SET @NewEnrollmentCount = @@ROWCOUNT 			END 		END 		ELSE 		BEGIN 			DECLARE @ULanguageID INT = (SELECT Language_ID FROM Mst_Language WHERE Language_Description = @MEMBER_PRIMARY_LANGUAGE) 			 			IF @ULanguageID IS NULL AND LEN(ISNULL(@MEMBER_PRIMARY_LANGUAGE,'')) > 0 			BEGIN  				INSERT Mst_Language (Language_Description,Language_Status,Language_CreatedAt,Language_CreatedBy)  				VALUES (@MEMBER_PRIMARY_LANGUAGE, 1,GETDATE(),@USER_ID) 				SET @ULanguageID = SCOPE_IDENTITY(); 			END 			--DECLARE @UCLIENT_DEF_3_Text varchar(250) = ''; 			--IF @CLIENT_DEF_3 IS NULL 			--BEGIN 			--	SET @CLIENT_DEF_3 = 0; 			--	SET @UCLIENT_DEF_3_Text = (SELECT Discription FROM Mst_Enum WHERE EnumType='Client_Def_3' AND EnumValue=0) 			--END 			--ELSE 			--BEGIN 			--	SET @UCLIENT_DEF_3_Text = (SELECT Discription FROM Mst_Enum WHERE EnumType='Client_Def_3' AND EnumValue=@CLIENT_DEF_3) 			--END 			SET @Patient_ID = (SELECT Patient_ID FROM Mst_Patient WHERE Patient_MRN = @Patient_MRN) 			IF @Patient_ID > 0 			BEGIN 				UPDATE Mst_Patient SET 					Patient_First_Name = @MEMBER_FIRST_NAME 					,Patient_Middle_Name = @MEMBER_MIDDLE_INITIAL 					,Patient_Last_Name = @MEMBER_LAST_NAME 					,Patient_DOB = @MEMBER_DATE_OF_BIRTH 					,Patient_Gender = @MEMBER_GENDER 					,Patient_LanguageID = @ULanguageID 					,Mobile = @MEMBER_PHONE_NUMBER 					--,CLIENT_DEF_3 = @CLIENT_DEF_3 					--,CLIENT_DEF_3_Text = @UCLIENT_DEF_3_Text 				WHERE Patient_ID = @Patient_ID  				--UPDATING Trn_Patient_UHCDetails transaction entry for the patient. 				DECLARE @ExistingUHCPatient_ID INT = (SELECT PatientId FROM Trn_Patient_UHCDetails WHERE PatientId = @Patient_ID); 				IF @ExistingUHCPatient_ID > 0 				BEGIN 					INSERT INTO Trn_Patient_UHCDetailsHistoryLog (PatientId,Plan_Effective_Date,Term_Date_From_Plan,MTM_Effective_Date,MTM_Term_Date 						,CMS_Contract_Number,CMS_PBP_Number,LTC_Indicator,Reason_For_Termination, CreatedOn) 					SELECT  						PatientId,Plan_Effective_Date,Term_Date_From_Plan,MTM_Effective_Date,MTM_Term_Date 						,CMS_Contract_Number,CMS_PBP_Number,LTC_Indicator,Reason_For_Termination, GETDATE() 					FROM Trn_Patient_UHCDetails WHERE PatientId = @Patient_ID  					UPDATE Trn_Patient_UHCDetails SET  						Plan_Effective_Date = @PLAN_EFFECTIVE_DATE 						,Term_Date_From_Plan = @TERM_DATE_FROM_PLAN 						,CMS_Contract_Number = @CMS_CONTRACT_NUMBER 						,CMS_PBP_Number = @CMS_PBP_NUMBER 					WHERE PatientId = @Patient_ID 				END 				ELSE 				BEGIN 					--Creating Trn_Patient_UHCDetails transaction entry for the patient. 					INSERT INTO Trn_Patient_UHCDetails (PatientId,Plan_Effective_Date,Term_Date_From_Plan,CMS_Contract_Number,CMS_PBP_Number,LTC_Indicator,Reason_For_Termination) 					VALUES (@Patient_ID,@PLAN_EFFECTIVE_DATE,@TERM_DATE_FROM_PLAN,@CMS_CONTRACT_NUMBER,@CMS_PBP_NUMBER,@LTC_INDICATOR,@REASON_FOR_TERMINATION) 				END  				-- UPDATING Contact detail 				--UPDATING primary contact details 				IF LEN(ISNULL(@MEMBER_PHONE_NUMBER, '')) > 0  				BEGIN  					UPDATE Trn_Patient_Contact  					SET Patient_Contact_State = @MEMBER_STATE, 						Patient_Contact_Phone = @MEMBER_PHONE_NUMBER 					WHERE Patient_ID = @Patient_ID AND IsPrimary = 1 				END  				--UPDATING secondary contact details 				IF LEN(ISNULL(@MEMBER_SECONDARY_PHONE_NUMBER, '')) > 0  				BEGIN  					UPDATE Trn_Patient_Contact SET Patient_Contact_State = @MEMBER_STATE 					WHERE Patient_ID = @Patient_ID AND IsPrimary = 0 				END  				---UPDATE UPLOADED YEAR For patient which is still Not enrolled or Not attempted 				DECLARE @UploadedYear INT 				select @UploadedYear = UploadedYear from Trn_Patient_Enrollment where Patient_ID= @Patient_ID and Patient_Enrollment_Status = 0 				IF @UploadedYear < @YEAR 				  BEGIN 					UPDATE Trn_Patient_Enrollment 					SET UploadedYear = @YEAR, 					    UpdatedOn =  GETDATE(), 						UpdatedBy = @USER_ID	 					WHERE Patient_ID= @Patient_ID 					AND Patient_Enrollment_Status = 0 				  END 			END 		END  		COMMIT TRANSACTION 		SELECT @Patient_ID as Patient_ID,@NewEnrollmentCount as NewEnrollmentCount  	END TRY 	BEGIN CATCH 		ROLLBACK TRAN 	END CATCH END  --EXEC USP_InsertInto_MstPatient 3,5,'4GD7K38GG46','MOBLEY','ALICE','Female','1955-01-08 00:00:00.000','R','253 TRECER RD',NULL,'COPE','SC','29038','8035341866','9860628787','ENGLISH', --'1','0','2021-01-01 00:00:00.000',NULL,NULL,'R2604','001',NULL,NULL,'F','MARION DWIGHT MD PA (RHC)','(803) 245-5168',2,3,4  --SELECT * FROM Mst_Patient WHERE Patient_MRN='4GD7K38GG46' --SELECT * FROM Trn_Patient_Contact WHERE Patient_ID=8411 --SELECT * FROM Trn_Patient_PCP WHERE PatientId=8411 --SELECT * FROM Trn_Patient_UHCDetails WHERE PatientId=8411 --SELECT * FROM Trn_Patient_Enrollment WHERE Patient_ID =8411  --DELETE FROM Trn_Patient_Contact WHERE Patient_ID=8411 --DELETE FROM Trn_Patient_PCP WHERE PatientId=8411 --DELETE FROM Trn_Patient_UHCDetails WHERE PatientId=8411 --DELETE FROM Trn_Patient_Enrollment WHERE Patient_ID =8411 --DELETE FROM Mst_Patient WHERE Patient_MRN='4GD7K38GG46'"
dbo,SP_ReportCallStatusCount," CREATE PROCEDURE SP_ReportCallStatusCount @AccountId INT, @ReportType varchar(50) AS BEGIN 	DECLARE @ActivityId int 	SET @ActivityId = (SELECT Top(1) Activity_ID FROM Mst_Activity WHERE ActivityType='PDCReview')  	IF @ReportType = 'Enrollment'  	BEGIN 		With AttemptStatus AS( 			--Select 1 SRNO, PE.Patient_Enroll_ID, EA.AttemptNumber Activity_Start_Status,  			--	(Case WHEN EQ.AttemptNumber = 1 THEN 'Attempt 1'  			--		ELSE CASE WHEN EQ.AttemptNumber = 2 THEN 'Attempt 2'  			--		ELSE CASE WHEN EQ.AttemptNumber = 3 THEN 'Attempt 3' END END END) ActivityStartStatus 			--	FROM Trn_Patient_Enrollment PE  			--	INNER JOIN Mst_Patient P ON P.Patient_ID = PE.Patient_ID AND P.Account_ID = @AccountId 			--	INNER JOIN View_EnrollAttemptQueue EQ ON EQ.Patient_Enroll_ID = PE.Patient_Enroll_ID  			--	INNER JOIN Trn_Enrollment_Attempt EA ON PE.Patient_Enroll_ID = EA.EnrollmentId  			--		AND EQ.AttemptNumber=EA.AttemptNumber 			--	WHERE EQ.AttemptNumber IS NOT NULL 			--UNION ALL  				Select 3 SRNO ,PE.Patient_Enroll_ID, Coalesce(Attempt.AttemptStatus, 0) Activity_Start_Status, 					Coalesce(ME.Discription, 'Yet To Start') AS ActivityStartStatus 				FROM Trn_Patient_Enrollment PE with (nolock) 				INNER JOIN Mst_Patient P with (nolock) ON P.Patient_ID = PE.Patient_ID AND P.Account_ID = @AccountId 				LEFT JOIN Trn_Enrollment_Attempt Attempt with (nolock) ON PE.Patient_Enroll_ID = Attempt.EnrollmentId 				LEFT JOIN Mst_Enum ME with (nolock) ON ME.EnumValue =  Attempt.AttemptStatus AND ME.EnumType = 'AttemptStatus' 		)  		SELECT SRNO, Activity_Start_Status, ActivityStartStatus,	COUNT(Patient_Enroll_ID) AS TotalCount 		FROM AttemptStatus  		GROUP BY SRNO, Activity_Start_Status, ActivityStartStatus 		ORDER BY SRNO, ActivityStartStatus, Activity_Start_Status 	END 	ELSE BEGIN 		With AttemptStatus AS( 			--Select 1 SRNO, PA.Patient_Activity_ID, AA.AttemptNumber Activity_Start_Status,  			--	(Case WHEN AQ.AttemptNumber = 1 THEN 'Attempt 1'  			--		ELSE CASE WHEN AQ.AttemptNumber = 2 THEN 'Attempt 2'  			--		ELSE CASE WHEN AQ.AttemptNumber = 3 THEN 'Attempt 3' END END END) ActivityStartStatus 			--	FROM Trn_Patient_Activity PA  			--	INNER JOIN Mst_Patient P ON P.Patient_ID = PA.Patient_ID AND P.Account_ID=@AccountID 			--	INNER JOIN View_PatientActivityAttempt AQ ON AQ.Patient_Activity_ID = PA.Patient_Activity_ID  			--	INNER JOIN Trn_Activity_Attempt AA ON PA.Patient_Activity_ID = AA.Patient_Activity_ID  			--		AND AQ.AttemptNumber=AA.AttemptNumber 			--	WHERE AQ.AttemptNumber IS NOT NULL  			--		AND PA.Activity_ID = @ActivityId 			--UNION ALL  				Select 3 SRNO ,PA.Patient_Activity_ID, Coalesce(ME.EnumValue, 1) Activity_Start_Status, 					Coalesce(ME.Discription, 'Yet To Start') AS ActivityStartStatus 				FROM Trn_Patient_Activity PA with (nolock) 				INNER JOIN Mst_Patient P with (nolock) ON P.Patient_ID = PA.Patient_ID AND P.Account_ID=@AccountID 				INNER JOIN Mst_Enum ME with (nolock) ON ME.EnumValue = Coalesce(PA.Activity_Start_Status, 1) 					AND ME.EnumType = 'ActivityStatus' 				WHERE PA.Activity_ID = @ActivityId 		)  		SELECT SRNO, Activity_Start_Status, ActivityStartStatus, COUNT(Patient_Activity_ID) AS TotalCount 		FROM AttemptStatus  		GROUP BY SRNO, Activity_Start_Status, ActivityStartStatus 		ORDER BY SRNO, ActivityStartStatus, Activity_Start_Status 	END   END  -- Exec SP_ReportCallStatusCount 7,'Enrollment' --Select * FROM Trn_Activity_Attempt W  "
dbo,USP_InsertInto_Trn_BookAppointment,"  Create procedure USP_InsertInto_Trn_BookAppointment (     @Patient_Id    INT,    @ResourceID    INT ,    @ServiceType   INT,    @StartDate    DATE,    @EndDate    DATE ,    @StartTime    TIME,    @EndTime    TIME ,    @SelectedTimeZoneID  INT ,    @UtcStartDateTime  DATETIME,    @UtcEndDateTime   DATETIME,    @LocationID    INT,    @RepeatTypeID   INT ,    @RepeatEvery   INT,    @RepeatOn    NVARCHAR(50) ,    @RepeatEnd    NVARCHAR(50) ,    @RepeatEndUntil   DATE,    @RepeatEndCount   INT ,    @USER_ID    INT   )   AS   BEGIN       Declare @AppointmentId INT = 0     INSERT INTO Trn_BookAppointment(         Patient_Id,            ResourceID,            ServiceType,            StartDate,             EndDate,             StartTime,             EndTime,             SelectedTimeZoneID,          UtcStartDateTime,           UtcEndDateTime,           LocationID,            RepeatTypeID,            RepeatEvery,            RepeatOn,             RepeatEnd,             RepeatEndUntil,           RepeatEndCount,           CreatedBy,             CreatedOn,             UpdatedBy,             UpdatedOn        )VALUES (         @Patient_Id,            @ResourceID,            @ServiceType,            @StartDate,             @EndDate,             @StartTime,             @EndTime,             @SelectedTimeZoneID,          @UtcStartDateTime,           @UtcEndDateTime,           @LocationID,            @RepeatTypeID,            @RepeatEvery,            @RepeatOn,             @RepeatEnd,             @RepeatEndUntil,           @RepeatEndCount,           @USER_ID,             GETDATE(),             @USER_ID,             GETDATE()         )        SELECT @AppointmentId = SCOPE_IDENTITY()       SELECT @AppointmentId AppointmentId   END"
dbo,SP_ReportConsultDetails," CREATE procedure SP_ReportConsultDetails ( 	@AccountID INT, 	@ActivityID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@pccId INT, 	@status INT, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN With ConsultDetailsResult AS	(SELECT  			patient.Patient_MRN, 			patient.Patient_ID, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			patient.Patient_Contact_State, 			patient.CMS_Contract_Number, 			PA.Patient_Activity_ID, 			ME.EnumValue AS Activity_Start_Status, 			Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date) AS Activity_Date, 			PA.Activity_Assigned_To, 			U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName, 			(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 				THEN (Select Mst_Enum.Discription FROM Mst_Enum WHERE Mst_Enum.EnumType = 'PharmacistConsult'  				AND Mst_Enum.EnumValue = PA.ActivityOutcome) ELSE  MENUM.Discription END) AS ActivityName 			FROM Trn_Patient_Activity PA 		INNER JOIN View_Mst_Patient patient ON patient.Patient_ID = PA.Patient_ID AND patient.Account_ID = @AccountID 		INNER JOIN Mst_Enum ME ON Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue  		        AND	ME.EnumType='PharmacistConsult' 		LEFT JOIN Mst_User U ON U.User_ID = PA.Activity_Assigned_To                 AND ME.EnumType = 'ActivityStatus' 		INNER JOIN Mst_Enum MENUM ON Coalesce(PA.Activity_Start_Status, 1) = MENUM.EnumValue  		        AND	MENUM.EnumType='ActivityStatus' 		WHERE Convert(Date,  					Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, 					PA.Activity_Start_Date) 					) >= @fromDate  			AND Convert(Date,  					Coalesce(PA.Activity_Actual_End_Time,PA.Activity_Actual_Start_Time, 					PA.Activity_Start_Date) 					) <= @toDate 			AND (@pccId = 0 OR PA.Activity_Assigned_To = @pccId) 			AND (@status = 0 OR Coalesce(PA.ActivityOutcome, 0) = @status) 			AND PA.Activity_ID = @ActivityID 	), 	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Date' and @orderDir = 'asc' then Activity_Date end, 								case when @orderBy = 'Activity_Date' and @orderDir = 'desc' then Activity_Date end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'asc' then Patient_Contact_State end, 								case when @orderBy = 'Patient_Contact_State' and @orderDir = 'desc' then Patient_Contact_State end desc, 								 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc,  								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc, 								case when @orderBy = 'ActivityName' and @orderDir = 'asc' then ActivityName end, 								case when @orderBy = 'ActivityName' and @orderDir = 'desc' then ActivityName end desc 								 								 			) AS RowNumber FROM ConsultDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ConsultDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END   -- Exec SP_ReportConsultDetails 4, '27Apr2021','27Apr2021',0,0,'PatientFullName','asc',0,10  "
dbo,USP_InsertInto_Trn_Patient_Med_Dosage," Create procedure USP_InsertInto_Trn_Patient_Med_Dosage ( 	@Prescriber_ID INT, 	@Patient_ID INT, 	@Med_ID INT, 	@Med_Strength_ID INT, 	@DaysSupply INT, 	@ServiceDate DateTime, 	@Patient_Dosage_Qty Decimal(18,2), 	@Refill_Next_Date DateTime, 	@RxNumber VARCHAR(50), 	@DawCode NVARCHAR(100), 	@PartDDrugIndicator NVARCHAR(100), 	@MemberCopayment NVARCHAR(100), 	@ClientCost NVARCHAR(100), 	@RxClaimNumber NVARCHAR(100), 	@SequenceNumber NVARCHAR(100), 	@PharmacyNPI VARCHAR(50), 	@UserId INT ) AS BEGIN 	Declare @Patient_Dosage_ID INT = 0; 	Declare @Today DateTime = GetDate(); 	SET NOCOUNT ON  	INSERT INTO Trn_Patient_Med_Dosage (Prescriber_ID,Patient_Dosage_PrescribedOn,Patient_Dosage_Prescribed_Status,Patient_Dosage_Qty, 	Patient_Dosage_Status,Patient_Dosage_CreatedOn,Patient_Dosage_CreatedBy,Patient_ID,Med_ID,Med_Strength_ID,Refill_Prev_Date,Refill_Next_Date,RxNumber,ServiceDate,DawCode,PartDDrugIndicator, 	DaysSupply,MemberCopayment,ClientCost,RxClaimNumber,SequenceNumber,PharmacyNPI)  	VALUES (@Prescriber_ID,@ServiceDate,1,@Patient_Dosage_Qty,1,@Today,@UserId,@Patient_ID,@Med_ID,@Med_Strength_ID,@ServiceDate,@Refill_Next_Date,@RxNumber, 	@ServiceDate,@DawCode,@PartDDrugIndicator,@DaysSupply,@MemberCopayment,@ClientCost,@RxClaimNumber,@SequenceNumber,@PharmacyNPI)  	SET @Patient_Dosage_ID = SCOPE_IDENTITY()  	--Updating Medicine status as completed for past medicines whose status is active and Refill next date is past 	UPDATE Trn_Patient_Med_Dosage SET Patient_Dosage_Prescribed_Status = 3, --This needs to be map with Enum DosagePrescribedStatus of value Completed 		Patient_Dosage_UpdatedBy = @UserId, 		Patient_Dosage_UpdatedOn = @Today 	WHERE Patient_ID = @Patient_ID  		AND (Patient_Dosage_Prescribed_Status = 1 OR Patient_Dosage_Prescribed_Status IS NULL) 		AND Med_ID = @Med_ID AND ISNULL(Med_Strength_ID, 0 ) = @Med_Strength_ID AND ServiceDate < @ServiceDate AND Refill_Next_Date < @Today;  	--Updating Patient's Refill Next Date in Mst_Patient table. 	--It should be next minimum date from active medicine and whose Next Refill date in future. 	--Update Mst_Patient SET ReFillDueDate = (Select Min(Refill_Next_Date) Refill_Next_Date  	--	From Trn_Patient_Med_Dosage WHERE Patient_ID = @Patient_ID AND Refill_Next_Date > GETDATE() 	-- ) FROM Mst_Patient WHERE Patient_ID= @Patient_ID  	 SELECT @Patient_Dosage_ID END"
dbo,SP_ReportConsultStatusCount," CREATE PROCEDURE SP_ReportConsultStatusCount 	@AccountId INT, 	@ActivityID int AS BEGIN 	 	WITH ActivityStatus AS( 		SELECT ME.EnumValue AS Activity_Start_Status, 		(Case WHEN Coalesce(PA.Activity_Start_Status, 1) = 3 -- Completed (make sure these needs to be map with Enum value) 			  		THEN (Select Mst_Enum.Discription FROM Mst_Enum WHERE Mst_Enum.EnumType = 'PharmacistConsult'  				AND Mst_Enum.EnumValue = PA.ActivityOutcome ) ELSE  ME.Discription END) AS ActivityStartStatus, 		PA.Patient_Activity_ID 		FROM Mst_Enum ME  		INNER JOIN Trn_Patient_Activity PA ON Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue 			AND PA.Activity_ID = @ActivityID 		INNER JOIN Mst_Patient P ON P.Patient_ID = PA.Patient_ID AND P.Account_ID = @AccountID 		WHERe ME.EnumType = 'ActivityStatus' 	)  	SELECT Activity_Start_Status, Coalesce(ActivityStartStatus, 'Other') ActivityStartStatus, COUNT(Patient_Activity_ID) AS TotalCount 	FROM ActivityStatus GROUP BY Activity_Start_Status,ActivityStartStatus ORDER BY Activity_Start_Status, ActivityStartStatus  END  -- EXEC SP_ReportConsultStatusCount 4   "
dbo,USP_InsertIntoDRGListFromTempTable," CREATE PROCEDURE USP_InsertIntoDRGListFromTempTable ( 	@CanUpdateTitle BIT = 0 ) AS BEGIN 	IF (@CanUpdateTitle = 1)  	BEGIN  		UPDATE Mst_DRG SET DRGTitle=T.DRGTitle,MDC=T.MDC,TYPE=T.TYPE,Weights=T.Weights,GeometricMeanLOS=T.GeometricMeanLOS, 		ArithmeticMeanLOS=T.ArithmeticMeanLOS, UpdatedOn = GETDATE() 		FROM DRGTempTable T  		LEFT JOIN Mst_DRG M ON M.DRGNumber=T.DRGCode 		WHERE M.ID IS NOT NULL 	END  	INSERT INTO Mst_DRG (DRGNumber, DRGTitle, Status,MDC,TYPE,Weights,GeometricMeanLOS,ArithmeticMeanLOS,CreatedOn)  	SELECT T.DRGCode, T.DRGTitle,1,T.MDC,T.TYPE,T.Weights,T.GeometricMeanLOS,T.ArithmeticMeanLOS, GETDATE() 	FROM DRGTempTable T  	LEFT JOIN Mst_DRG M ON M.DRGNumber=T.DRGCode 	WHERE M.ID IS NULL 	SELECT @@ROWCOUNT RCount END  --EXEC USP_InsertIntoDRGListFromTempTable"
dbo,SP_ReportEnrollmentDetails," CREATE procedure [dbo].[SP_ReportEnrollmentDetails] ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@pccId int, 	@status int, 	@ReportType varchar(50), 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	IF @ReportType = 'Enrollment' 	BEGIN 	 	CREATE TABLE #TemEnrollment ( 		Patient_Enroll_ID INT, 		EnrollmentDate DATETIME, 		AttemptNumber INT NULL 	);  	INSERT INTO #TemEnrollment (Patient_Enroll_ID,EnrollmentDate, AttemptNumber) SELECT PE.Patient_Enroll_ID, COALESCE(PE.EnrollmentDate,EA.AttemptDate,PE.CreatedOn) EnrollmentDate, MAX(EA.AttemptNumber) AttemptNumber 	FROM Trn_Patient_Enrollment PE  	LEFT JOIN Trn_Enrollment_Attempt EA ON PE.Patient_Enroll_ID = EA.EnrollmentId 	GROUP BY PE.Patient_Enroll_ID, COALESCE(PE.EnrollmentDate,EA.AttemptDate,PE.CreatedOn);  	With EnrollmentDetailsResult AS	(SELECT  			patient.Patient_MRN, 			patient.Patient_ID, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			patient.Patient_Contact_State, 			patient.CMS_Contract_Number, 			PE.Patient_Enroll_ID, 			EQ.EnrollmentDate, 			EA.AssignedUserId, 			U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName, 			PE.Patient_Enrollment_Status AS [Status], 			ME.Discription AS ActivityName, 			PE.RefusalRetractionReason		   			FROM Trn_Patient_Enrollment PE 		INNER JOIN View_Mst_Patient patient ON PE.Patient_ID = patient.Patient_ID AND patient.Account_ID = @AccountID 		INNER JOIN Mst_Enum ME ON PE.Patient_Enrollment_Status = ME.EnumValue AND ME.EnumType = 'EnrollmentStatus' 		INNER JOIN #TemEnrollment EQ ON EQ.Patient_Enroll_ID = PE.Patient_Enroll_ID  		LEFT JOIN Trn_Enrollment_Attempt EA ON PE.Patient_Enroll_ID = EA.EnrollmentId AND EQ.AttemptNumber=EA.AttemptNumber 		LEFT JOIN Mst_User U ON U.User_ID = EA.AssignedUserId 		WHERE Convert(Date, EQ.EnrollmentDate) >= @fromDate AND Convert(Date, EQ.EnrollmentDate) <= @toDate 			AND (@pccId = 0 OR EA.AssignedUserId = @pccId) 			AND (@status = 99 OR PE.Patient_Enrollment_Status = @status) 			AND PE.Patient_Enrollment_Status IS NOT NULL 			AND ME.EnumType = 'EnrollmentStatus' 	  ), 	  OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'EnrollmentDate' and @orderDir = 'asc' then EnrollmentDate end, 								case when @orderBy = 'EnrollmentDate' and @orderDir = 'desc' then EnrollmentDate end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc, 								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc, 								case when @orderBy = 'Status' and @orderDir = 'asc' then ActivityName end, 								case when @orderBy = 'Status' and @orderDir = 'desc' then ActivityName end desc 			) AS RowNumber FROM EnrollmentDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM EnrollmentDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 	 	DROP TABLE #TemEnrollment  	END 	ELSE  	BEGIN  		 	With RxHomeDeliveryResult AS (SELECT  			patient.Patient_MRN, 			patient.Patient_ID, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			patient.Patient_Contact_State, 			patient.CMS_Contract_Number, 			patient.PatientEnrollmentId AS Patient_Enroll_ID, 			TPC.RxEnrollmentDate AS EnrollmentDate, 			Coalesce(TPC.UpdatedBy, TPC.CreatedBy) AS AssignedUserId, 			U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName, 			TPC.RxHomeDelivery AS [Status], 			ME.Discription AS ActivityName, 			TPC.RefusalRetractionReason 			FROM View_Mst_Patient patient  		INNER JOIN Trn_Patient_Conversion TPC ON TPC.PatientId = patient.Patient_ID AND patient.Account_ID = @AccountID 		INNER JOIN Mst_Enum ME ON Coalesce(TPC.RxHomeDelivery, 0) = ME.EnumValue  			AND ME.EnumType = 'RxHomeDeliveryStatus' 		LEFT JOIN Mst_User U ON U.User_ID = Coalesce( TPC.UpdatedBy, TPC.CreatedBy)  		 		WHERE Convert(Date,  TPC.RxEnrollmentDate) >= @fromDate AND Convert(Date,  TPC.RxEnrollmentDate) <= @toDate 			AND (@pccId = 0 OR Coalesce( TPC.UpdatedBy, TPC.CreatedBy) = @pccId) 			AND (@status = 99 OR Coalesce(TPC.RxHomeDelivery, 0) = @status) 			AND TPC.RxHomeDelivery IS NOT NULL 			AND ME.EnumType = 'RxHomeDeliveryStatus' 	), 	 OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 		order BY case when @orderBy = 'EnrollmentDate' and @orderDir = 'asc' then EnrollmentDate end, 								case when @orderBy = 'EnrollmentDate' and @orderDir = 'desc' then EnrollmentDate end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'asc' then CMS_Contract_Number end, 								case when @orderBy = 'CMS_Contract_Number' and @orderDir = 'desc' then CMS_Contract_Number end desc, 								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc, 								case when @orderBy = 'Status' and @orderDir = 'asc' then ActivityName end, 								case when @orderBy = 'Status' and @orderDir = 'desc' then ActivityName end desc 			) AS RowNumber FROM RxHomeDeliveryResult  	)   	SELECT *, (Select Count(Patient_ID) FROM RxHomeDeliveryResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 	END END  --Exec SP_ReportEnrollmentDetails 5, '01Jan2021','18Jul2022',0,0,'Enrollment','PatientFullName','asc',0,10"
dbo,USP_InsertOrUpdateUploadSummary," Create procedure USP_InsertOrUpdateUploadSummary ( 	@ID INT, 	@AccountId INT, 	@UploadType INT, 	@UploadDate DATETIME, 	@UploadedBy INT, 	@UploadStatus VARCHAR(50), 	@MemberCount INT, 	@ClaimCount INT, 	@PDCActivityCount INT, 	@ErrorText TEXT, 	@UploadPath NVARCHAR(MAX), 	@UpdatedRecordCount INT, 	@NewEnrollmentQueuecount INT )AS BEGIN 	DECLARE @UploadID INT; 	IF @ID = 0  	BEGIN  		INSERT INTO UploadSummary (UploadType,UploadDate,UploadedBy,UploadStatus,MemberCount,ClaimCount,PDCActivityCount,ErrorText,UploadPath, AccountID,UpdatedRecordCount,NewEnrollmentQueuecount) 		VALUES (@UploadType, @UploadDate,@UploadedBy,@UploadStatus,@MemberCount,@ClaimCount,@PDCActivityCount,@ErrorText,@UploadPath, @AccountId,@UpdatedRecordCount,@NewEnrollmentQueuecount); 		SET @UploadID = SCOPE_IDENTITY(); 	END  	ELSE  	BEGIN  		SET @UploadID = @ID; 		UPDATE UploadSummary SET UploadDate = @UploadDate,UploadedBy = @UploadedBy, 		UploadStatus = @UploadStatus, 		MemberCount = @MemberCount, 		ClaimCount = @ClaimCount, 		PDCActivityCount = @PDCActivityCount, 		ErrorText = @ErrorText, 		UploadPath = @UploadPath, 		UpdatedRecordCount = @UpdatedRecordCount, 		NewEnrollmentQueuecount = @NewEnrollmentQueuecount 		WHERE ID = @ID 	END 	SELECT @UploadID END"
dbo,SP_ReportEnrollmentStatusWiseCount," CREATE PROCEDURE SP_ReportEnrollmentStatusWiseCount 	@AccountID INT, 	@ReportType varchar(50) AS BEGIN 	if @ReportType = 'Enrollment' 	BEGIN 		SELECT  			ME.EnumValue AS Activity_Start_Status, 			ME.Discription AS ActivityStartStatus, 			Count(Patient_Enroll_ID) AS TotalCount 		FROM Mst_Enum ME with (nolock) 		INNER JOIN Trn_Patient_Enrollment PE with (nolock) ON  ME.EnumValue = PE.Patient_Enrollment_Status 		INNER JOIN Mst_Patient P with (nolock) ON P.Patient_ID = PE.Patient_ID AND P.Account_ID = @AccountID 		WHERE ME.EnumType='EnrollmentStatus' 		GROUP BY ME.EnumValue, 		ME.Discription 		ORDER BY Activity_Start_Status 	END 	ELSE BEGIN 		SELECT  			ME.EnumValue AS Activity_Start_Status, 			ME.Discription AS ActivityStartStatus, 			Count(PE.ID) AS TotalCount 		FROM Mst_Enum ME with (nolock)  		INNER JOIN Trn_Patient_Conversion PE with (nolock) ON  ME.EnumValue = Coalesce(RxHomeDelivery,0) 		INNER JOIN Mst_Patient P with (nolock) ON P.Patient_ID = PE.PatientId AND P.Account_ID = @AccountID 		WHERE ME.EnumType='RxHomeDeliveryStatus' 		GROUP BY ME.EnumValue, 		ME.Discription 		ORDER BY Activity_Start_Status 	END END --Exec SP_ReportEnrollmentStatusWiseCount 'Enrollment'"
dbo,USP_Member_Import," Create procedure USP_Member_Import ( @FilePath NVarchar(MAX) ) AS BEGIN  	TRUNCATE TABLE Salutem_Temp.DBO.Member_Import; 	 	DECLARE @SQL NVARCHAR(MAX) = ''     SET @SQL = N'     BULK INSERT Salutem_Temp.DBO.Member_Import       FROM ''' + @filePath + '''       WITH ( 		FIRSTROW = 2,         FIELDTERMINATOR = '','', 		FORMAT=''CSV'',         ROWTERMINATOR = ''0x0a'', 		TABLOCK       )' 	EXEC sp_executesql @SQL; 	SELECT Count(MEMBER_MBI) RowsCount FROM Salutem_Temp.DBO.Member_Import END  --EXEC USP_Member_Import 'C:\Working\IPEP\Upload\c3_member_20210331.csv'"
dbo,SP_ReportInterventionDetails," CREATE procedure [dbo].[SP_ReportInterventionDetails] ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	--@pccId int, 	@errorTypeId int, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN With InterventionDetailsResult AS (SELECT  			patient.Patient_MRN, 			patient.Patient_ID, 			patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 			Coalesce( CI.UpdatedOn, CI.CreatedOn) AS CreatedDate, 			CI.InterventionType_ID AS ErrorTypeId, 			IT.InterventionTypeName AS ErrorType, 			CI.InterventionActionDetails, 			CI.PharmaConsultActionName, 			CI.PharmaConsultResolutiosName, 			CI.PharmaConsultResolutiosActionName, 			CI.Note, 			patient.ZipCode, 			med.Med_Name,					 	        ms.Med_Strength, 			TIP.FinNumber, 			TIP.UnitNumber, 			DRG.DRGTitle 		FROM Trn_Clinical_Intervention CI 		INNER JOIN Mst_InterventionType IT ON IT.ID = CI.InterventionType_ID 		INNER JOIN Mst_Patient patient ON patient.Patient_ID = CI.Patient_ID AND patient.Account_ID = @AccountID 		INNER JOIN Trn_Patient_Med_Dosage md ON ci.Patient_ID = md.Patient_ID AND ci.Patient_Dosage_ID = md.Patient_Dosage_ID 		INNER JOIN Mst_Medicine med ON md.Med_ID = med.Med_ID 		INNER JOIN Mst_Med_Strength ms ON md.Med_Strength_ID = ms.ID 		LEFT JOIN Trn_InPatientLog TIP ON TIP.InPatientLogId = md.InPatientLogId 		LEFT JOIN Mst_DRG DRG ON DRG.ID = TIP.DRG 		WHERE Convert(Date,CI.CreatedOn) >= @fromDate AND Convert(Date,CI.CreatedOn) <= @toDate 		AND (@errorTypeId = 0 OR CI.InterventionType_ID = @errorTypeId) 		), 		OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'CreatedDate' and @orderDir = 'asc' then CreatedDate end, 								case when @orderBy = 'CreatedDate' and @orderDir = 'desc' then CreatedDate end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'ErrorType' and @orderDir = 'asc' then ErrorType end, 								case when @orderBy = 'ErrorType' and @orderDir = 'desc' then ErrorType end desc, 								case when @orderBy = 'Note' and @orderDir = 'asc' then Note end, 								case when @orderBy = 'Note' and @orderDir = 'desc' then Note end desc 								 								 			) AS RowNumber FROM InterventionDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM InterventionDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  		--AND (@pccId = 0 OR EA.AssignedUserId = @pccId) END   --Exec SP_ReportInterventionDetails 22, '01Jan2020','09Aug2022',0,'PatientFullName','asc',0,10"
dbo,USP_MHAuditReport," CREATE procedure USP_MHAuditReport ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@pageIndex int = 0, 	@PageSize int = 999999999 ) AS BEGIN WITH Result AS ( 	SELECT  			P.Patient_ID, 			P.Patient_First_Name +' ' + P.Patient_Last_Name AS PatientFullName, 			TPAL.EncounterDate, 			TPA.Activity_Actual_End_Time AS DateOfCompletion, 			TPA.Patient_Activity_ID, 			A.Activity_Description ActivityName, 			TPA.SpentTimeInMinutes, 			U.User_First_Name+ ' ' + U.User_Last_Name AS ActivityAssignedToName, 			MP.PracticeName, 			TPA.IsBillable, 			ME.Discription ActivityStartStatus, 			EN.Discription AS NoteTypeName, 			TPA.TypeOfCommunicationName, 			--TPA.ActivityOutcomeName, 			CASE WHEN A.ActivityType='InitialAssessment' OR A.ActivityType='ProgressNote'OR A.ActivityType='GroupNote'OR A.ActivityType='ClinicalCareScreening' THEN MAE.Discription ELSE TPA.ActivityOutcomeName END AS ActivityOutcomeName 		FROM Trn_Patient_Activity TPA 		INNER JOIN Mst_Patient P ON TPA.Patient_ID = P.Patient_ID AND P.Account_ID = @AccountID AND TPA.Activity_Actual_End_Time IS NOT NULL 		INNER JOIN Mst_Activity A ON TPA.Activity_ID = A.Activity_ID 		INNER JOIN Mst_User U ON TPA.Activity_Assigned_To = U.User_ID 		LEFT JOIN Mst_Practice MP ON P.PatientPracticeId = MP.ID 		LEFT JOIN TrnPatientAssessmentLog TPAL ON TPA.Patient_Activity_ID = TPAL.PatientActivityID 		LEFT JOIN Mst_Enum ME ON TPA.Activity_Start_Status = ME.EnumValue AND ME.EnumType = 'ActivityStatus' 		LEFT JOIN Mst_Enum EN ON TPAL.NoteType = EN.ID AND EN.EnumType='GenericNoteType'  		LEFT JOIN MstAssessmentEnum MAE ON TPAL.Attendance = MAE.EnumValue AND MAE.EnumType = 'Attendance' 		WHERE TPA.Activity_Start_Status = 3 		AND CONVERT(Date,TPA.Activity_Actual_End_Time) >= @fromDate and CONVERT(Date,TPA.Activity_Actual_End_Time) <= @toDate 		AND ((P.Patient_First_Name + ' ' + P.Patient_Last_Name)  LIKE '%' + @search + '%' 				OR (P.Patient_Last_Name + ' ' + P.Patient_First_Name) LIKE '%' + @search + '%' 				OR MP.PracticeName LIKE '%' + @search + '%' 				OR TPA.Patient_Activity_ID LIKE '%' + @search + '%' 			) ), OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 					case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 					case when @orderBy = 'PracticeName' and @orderDir = 'asc' then PracticeName end, 					case when @orderBy = 'PracticeName' and @orderDir = 'desc' then PracticeName end desc 			) AS RowNumber FROM Result  	) 	SELECT *, (Select Count(Patient_ID) FROM Result) TotalRows   	FROM OrderByResult  	WHERE 		OrderByResult.RowNumber BETWEEN (@pageIndex + 1) AND (@pageIndex  + @pageSize) END"
dbo,SP_ReportInterventionStatusCount," CREATE PROCEDURE SP_ReportInterventionStatusCount (@AccountId INT) AS BEGIN 	SELECT IT.ID AS Activity_Start_Status,IT.InterventionTypeName AS ActivityStartStatus, COUNT(CI.ID) AS TotalCount  	FROM Mst_InterventionType IT 	INNER JOIN Trn_Clinical_Intervention CI ON IT.ID = CI.InterventionType_ID 	INNER JOIN Mst_Patient P ON P.Patient_ID = CI.Patient_ID AND P.Account_ID = @AccountId 	GROUP BY IT.ID,IT.InterventionTypeName ORDER BY IT.ID,IT.InterventionTypeName END  -- Exec SP_ReportInterventionStatusCount 7  "
dbo,USP_MHAuditReportServices," CREATE procedure USP_MHAuditReportServices ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME ) AS BEGIN 		SELECT  			P.Patient_ID, 			P.Patient_First_Name +' ' + P.Patient_Last_Name AS PatientFullName, 			TPAL.EncounterDate, 			TPA.Activity_Actual_End_Time AS DateOfCompletion, 			TPA.Patient_Activity_ID, 			A.Activity_Description ActivityName, 			TPA.SpentTimeInMinutes, 			U.User_First_Name+ ' ' + U.User_Last_Name AS ActivityAssignedToName, 			MP.PracticeName 		FROM Trn_Patient_Activity TPA 		INNER JOIN Mst_Patient P ON TPA.Patient_ID = P.Patient_ID AND P.Account_ID = @AccountID  		AND TPA.Activity_Actual_End_Time IS NOT NULL 		INNER JOIN Mst_Activity A ON TPA.Activity_ID = A.Activity_ID 		INNER JOIN Mst_User U ON TPA.Activity_Assigned_To = U.User_ID 		LEFT JOIN Mst_Practice MP ON P.PatientPracticeId = MP.ID 		LEFT JOIN TrnPatientAssessmentLog TPAL ON TPA.Patient_Activity_ID = TPAL.PatientActivityID 		WHERE TPA.Activity_Start_Status = 3 		AND CONVERT(Date,TPA.Activity_Actual_End_Time) >= @fromDate and CONVERT(Date,TPA.Activity_Actual_End_Time) <= @toDate END"
dbo,SP_Trn_ActivityAssessmentResponse," Create procedure SP_Trn_ActivityAssessmentResponse (@PatientActivityId INT)AS BEGIN 	Select ID, 		PatientActivityId, 		PatientId, 		ActivityTypeId, 		QuestionId, 		ActivityAssessmentTypeId, 		ActionResponse, 		ActionResponseId, 		ActionResponseText 	From Trn_ActivityAssessmentResponse 	WHERE PatientActivityId = @PatientActivityId END"
dbo,USP_MHDashboardSummary," Create procedure USP_MHDashboardSummary (@userId INT, @AccountId INT, @patientId INT = 0) AS BEGIN 	Declare @isAdmin BIT 	SET @isAdmin = (SELECT dbo.func_IsUserAdmin(@userId));	  	DECLARE @TodayDate Date = (Select Convert(Date, GetDate())); 	DECLARE @TodaysActivityDetailCount INT; 	DECLARE @TodaysActivityDetail_CompletedCount INT; 	DECLARE @TodaysActivityDetail_InProgressCount INT; 	DECLARE @TodaysActivityDetail_YetToStartCount INT; 	DECLARE @DelayedActivityCount INT; 	DECLARE @Escalated INT = 0;  	SET @TodaysActivityDetailCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA 										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID  										WHERE P.Patient_Status = 1  											AND ((@isAdmin = 1 AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND TPA.Activity_Start_Date = @TodayDate  											AND P.Account_ID = @AccountId  											AND TPA.Activity_Status = 1 									); 	SET @TodaysActivityDetail_CompletedCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA 										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID  										WHERE P.Patient_Status = 1  											AND ((@isAdmin = 1 AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND P.Account_ID = @AccountId  											AND TPA.Activity_Start_Date = @TodayDate  											AND TPA.Activity_Start_Status = 3 											AND TPA.Activity_Status = 1 									); 	SET @TodaysActivityDetail_InProgressCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA  										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID  										WHERE P.Patient_Status = 1  											AND ((@isAdmin = 1 AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND P.Account_ID = @AccountId  											AND TPA.Activity_Start_Date  = @TodayDate  											AND TPA.Activity_Start_Status = 2 											AND TPA.Activity_Status = 1  									); 	SET @TodaysActivityDetail_YetToStartCount = (Select COUNT(TPA.Patient_Activity_ID) 										From Trn_Patient_Activity TPA  										INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID  										WHERE P.Patient_Status = 1  											AND ((@isAdmin = 1 AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  											AND ISNULL(TPA.Activity_Start_Status, 1) = 1 											AND TPA.Activity_Start_Date = @TodayDate 											AND P.Account_ID = @AccountId 											AND TPA.Activity_Status = 1 									); 	SET @DelayedActivityCount = (Select COUNT(TPA.Patient_Activity_ID) 									From Trn_Patient_Activity TPA  									INNER JOIN Mst_Patient P ON P.Patient_ID = TPA.Patient_ID  									WHERE P.Patient_Status = 1  AND 										((@isAdmin = 1 AND TPA.Activity_Assigned_To > 0) OR TPA.Activity_Assigned_To = @userId)  										AND TPA.Activity_Start_Date < @TodayDate  										AND P.Account_ID = @AccountId 										AND ISNULL(TPA.Activity_Start_Status, 1) in (1,2) 										AND TPA.Activity_Status = 1 								);  	SELECT @TodaysActivityDetailCount AS TodayTotalCount, @TodaysActivityDetail_CompletedCount AS TodaysCompletedCount, @TodaysActivityDetail_InProgressCount AS TodaysInProgressCount, 		@TodaysActivityDetail_YetToStartCount AS TodaysYetToStartCount, @DelayedActivityCount AS DelayedActivityCount, @Escalated AS EscalatedCount END																   -- EXEC USP_MHDashboardSummary 17, 22 --SP_Recompile USP_MHDashboardSummary  "
dbo,SP_Trn_Med_Strength," Create procedure SP_Trn_Med_Strength (@Med_ID int) AS BEGIN 	Select MMS.ID,MMS.Med_Strength,TMS.Med_ID FROM Mst_Med_Strength MMS 	INNER JOIN Trn_Med_Strength TMS  ON MMS.ID = TMS.Strengh_ID AND TMS.Med_ID = @Med_ID order by TMS.Med_ID desc, MMS.Med_Strength END  "
dbo,USP_MHMemberImport," Create procedure USP_MHMemberImport ( 	@importTable MHMemberTableType readonly ) AS BEGIN 	INSERT INTO dbo.MHMemberTable select * from @importTable 	SELECT @@ROWCOUNT END"
dbo,SP_Trn_Patient_Allergy," Create procedure SP_Trn_Patient_Allergy (@patientId INT) AS BEGIN 	SELECT  		Patient_Allergy_ID, 		Patient_ID, 		TPA.Allergy_ID, 		MA.Allerg_Name, 		MA.Allergy_Description, 		Allergy_Severity_ID, 		Patient_Allergy_Status 	From Trn_Patient_Allergies TPA  	INNER JOIN Mst_Allergies MA ON TPA.Allergy_ID=MA.Allergy_ID 	WHERE TPA.Patient_ID = @patientId AND Patient_Allergy_Status = 1 END"
dbo,USP_MHPatientActivityByPatientId," Create procedure USP_MHPatientActivityByPatientId (@userId INT, @patientId INT) AS BEGIN 	 	Select  		MA.Activity_ID,  		MA.Activity_Name, 		MA.ActivityType,  		MA.Activity_Description, 		TPA.Patient_Activity_ID, 		TPA.Patient_ID, 		TPA.Activity_Type_ID, 		MAT.Activity_Type_Name, 		Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time, TPA.Activity_Start_Date ) AS Activity_Start_Date, 		TPA.Activity_Start_Time, 		TPA.Activity_Actual_Start_Time, 		TPA.Activity_Actual_End_Time, 		TPA.Activity_Assigned_To, 		MU.User_First_Name + ' ' + MU.User_Last_Name AS Activity_Assigned_To_Name, 		TPA.Activity_Note, 		Coalesce(TPA.Activity_Start_Status, 1) AS Activity_Start_Status, 		TPA.Activity_Delay_Note, 		TPA.Activity_Status, 		TPA.Activity_CretaedAt, 		TPA.Activity_CreatedBy, 		TPA.Activity_UpdatedAt, 		TPA.Activity_UpdatedBy, 		TPA.Patient_Enroll_ID, 		P.Patient_First_Name, 		P.Patient_Middle_Name, 		P.Patient_Last_Name, 		P.Account_Name, 		P.ZipCode, 		PAA.AttemptNumber AS AttemptNumber, 		TPA.LastCallOutcomeName, 		--CASE WHEN PA.ConsentToProgram=0 AND ActivityOutcomeName='Completed' AND MA.ActivityType='InitialAssessment' THEN 'Completed No Consent' ELSE ActivityOutcomeName END AS ActivityOutcomeName, 		CASE WHEN MA.ActivityType='InitialAssessment' OR MA.ActivityType='ProgressNote'OR MA.ActivityType='GroupNote'OR MA.ActivityType='ClinicalCareScreening' OR MA.ActivityType='InitialPsychosocialEvaluation' THEN MAE.Discription ELSE TPA.ActivityOutcomeName END AS ActivityOutcomeName, 		TPA.HasFlagForReview,-- For mind healthy flow 		TPA.ReviewNote,-- For mind healthy flow to check whether review has been done or not 		TPA.SpentTimeInMinutes, --duration in min spent on activity. 		TPA.IsSubmited, 		TPA.IsBillable, 		E.Discription AS NoteTypeName 		,TPA.DateOfService 		,PA.EncounterDate 		,PA.EncounterStartTime 		,PA.EncounterEndTime 	From Trn_Patient_Activity TPA  	INNER JOIN Mst_Activity MA ON MA.Activity_ID = TPA.Activity_ID 	INNER JOIN View_Mst_Patient P ON P.Patient_ID = TPA.Patient_ID 	INNER JOIN Mst_Activity_Type MAT ON MAT.Activity_Type_ID = TPA.Activity_Type_ID 	INNER JOIN View_PatientActivityAttempt PAA ON PAA.Patient_Activity_ID = TPA.Patient_Activity_ID 	LEFT JOIN Trn_Activity_Attempt TAA ON TPA.Patient_Activity_ID = TAA.Patient_Activity_ID AND TAA.AttemptNumber = PAA.AttemptNumber 	LEFT JOIN Mst_User MU ON MU.User_ID = TPA.Activity_Assigned_To 	LEFT JOIN TrnPatientAssessmentLog PA  ON PA.PatientActivityID = TPA.Patient_Activity_ID AND PA.PatientID = TPA.Patient_ID 	LEFT JOIN Mst_Enum E ON E.ID = PA.NoteType 	LEFT JOIN MstAssessmentEnum MAE ON PA.Attendance = MAE.EnumValue AND MAE.EnumType = 'Attendance' 	WHERE P.Patient_Status = 1 AND TPA.Patient_ID = @patientId AND TPA.Activity_Status = 1 END  -- EXEC USP_MHPatientActivityByPatientId 3, 23423"
dbo,SP_Trn_Patient_Med_Dosage," Create procedure SP_Trn_Patient_Med_Dosage ( 	@PatientId int, 	@Patient_Dosage_ID int, 	@NextActivityAfterDays int ) AS BEGIN 	Select  		PMD.Patient_Dosage_ID, 		PMD.Prescriber_ID, 		PMD.Patient_Dosage_PrescribedOn, 		PMD.Patient_Dosage_Prescribed_Status, 		PMD.Patient_Dosage_Directions, 		Med_Time_ID, 		Patient_Dosage_Qty, 		PMD.Patient_Dosage_DailyUse, 		PMD.Patient_Dosage_Refills, 		PMD.Patient_Dosage_TakingAs, 		PMD.Patient_Dosage_Notes, 		PMD.Patient_Dosage_Status, 		PMD.Med_Strength_ID, 		PMD.Patient_Dosage_CreatedBy, 		PMD.Patient_Dosage_CreatedOn, 		PMD.Patient_Dosage_UpdatedBy, 		PMD.Patient_Dosage_UpdatedOn, 		UC.User_First_Name +' '+ UC.User_Last_Name AS Patient_Dosage_CreatedBy_Name, 		UU.User_First_Name +' '+ UU.User_Last_Name AS Patient_Dosage_UpdatedBy_Name, 		M.Med_ID, 		M.Med_Name, 		M.Med_Description, 		M.Med_Power, 		MMS.Med_Strength, 		MP.PrescriberFirstName, 		MP.PrescriberLastName, 		PMD.Pharmacy_ID, 		PMD.Patient_ID, 		MPharm.PharmacyName, 		--Coalesce(TPMR.ID, 0) AS RefillID, 		PMD.Refill_Prev_Date, 		PMD.Refill_Next_Date, 		PMD.RxNumber, 		PMD.ServiceDate, 		PMD.PharmacyNPI, 		(Case WHEN Patient_Dosage_Prescribed_Status = 1 -- it mean medicine is active (this needs to be same as declare in enum 			AND PMD.Refill_Next_Date IS NOT NULL 			AND PMD.Refill_Next_Date < DateAdd(day, @NextActivityAfterDays, GetDate()) THEN 1 ELSE 0 END) IsInDuePeriod, 		ISNULL(PMD.InPatientLogId,0) as InPatientLogId 	From Trn_Patient_Med_Dosage PMD  	INNER JOIN Mst_Medicine M ON M.Med_ID = PMD.Med_ID 	INNER JOIN Mst_Prescriber MP ON MP.Id = PMD.Prescriber_ID 	LEFT JOIN Mst_Med_Strength MMS ON MMS.ID = PMD.Med_Strength_ID 	LEFT JOIN Mst_Pharmacy MPharm ON MPharm.Id = PMD.Pharmacy_ID 	LEFT join Mst_User UC on uc.User_ID = PMD.Patient_Dosage_CreatedBy 	LEFT join Mst_User UU on UU.User_ID = PMD.Patient_Dosage_UpdatedBy 	WHERE (@Patient_Dosage_ID = 0 OR PMD.Patient_Dosage_ID = @Patient_Dosage_ID) 		AND (@PatientId = 0 OR PMD.Patient_ID = @PatientId) 		 END  --EXEC SP_Trn_Patient_Med_Dosage 28,0,10  --SElect * From Trn_Patient_Med_Dosage WHERE Patient_ID=28 "
dbo,USP_Mst_Allergies_Search," Create procedure USP_Mst_Allergies_Search (@SearchText nvarchar(max)) AS BEGIN 	Select Allergy_ID, Allerg_Name FROM Mst_Allergies WHERE Allerg_Name like  @SearchText +'%' END  -- Exec USP_Mst_Allergies_Search 'Dilantin'"
dbo,USP_BillingServicesDetails," CREATE procedure USP_BillingServicesDetails ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME ) AS BEGIN 	SELECT   		TBP.BillingCPTCode +', '+TBP.AddOnCPTCode AS billing_code, 		TBP.MonthOfService AS dos, 		TBP.PracticeName AS practice_name, 		TBP.ReferringProviderName AS primary_physician, 		U.User_First_Name +' ' + U.User_Last_Name AS bcm, 		P.Patient_First_Name +' ' + P.Patient_Last_Name AS patient_name, 		P.Patient_ID AS patient_id, 		TBP.PrimaryDiagnosis AS primary_dx, 		D.ICD10Code AS reason_for_referral, 		AE.Discription AS patient_type 	FROM TrnBillingProfile TBP 	--INNER JOIN TrnPatientBillingDetail BD ON TBP.PatientID = BD.PatientID AND TBP.MonthOfService = BD.MonthOfService 	INNER JOIN Mst_Patient P ON TBP.PatientID = p.Patient_ID AND P.Account_ID = @AccountID AND P.Patient_Status =1 	LEFT JOIN TrnPatientAssessmentLog PAL ON PAL.PatientActivityID = TBP.PatientActivityID 	LEFT JOIN Mst_User U ON TBP.ActivityAssignedTo = U.User_ID 	LEFT JOIN Mst_Diagnosis D ON P.ReasonForReferral = D.Diagnosis_ID 	LEFT JOIN MstAssessmentEnum AE ON AE.EnumValue = PAL.ProgramType AND AE.EnumType='ProgramTypes' 	WHERE TBP.MonthOfService >= @fromDate and TBP.MonthOfService <= @toDate 	Group By 		TBP.BillingCPTCode +', '+TBP.AddOnCPTCode, 		TBP.MonthOfService, 		TBP.PracticeName, 		TBP.ReferringProviderName, 		U.User_First_Name +' ' + U.User_Last_Name, 		P.Patient_First_Name +' ' + P.Patient_Last_Name, 		P.Patient_ID, 		TBP.PrimaryDiagnosis, 		D.ICD10Code, 		AE.Discription  END  --exec USP_BillingServicesDetails 22,'07/01/2022','07/31/2022'"
dbo,USP_Mst_PatientSearch," create procedure USP_Mst_PatientSearch(@AccountId INT, @SearchText nvarchar(max)) AS BEGIN 	Select Patient_ID, 		Patient_First_Name, 		Patient_Middle_Name, 		Patient_Last_Name, 		Patient_Gender,Mobile, 		Coalesce(Patient_First_Name,'') +' '+ Coalesce(Patient_Middle_Name,'')+' '+Coalesce(Patient_Last_Name,'') AS PatientFullName 	FROM Mst_Patient WHERE Account_ID = @AccountId AND (Mobile like '%' + @SearchText +'%' OR Patient_First_Name like '%' + @SearchText +'%' OR Patient_Last_Name like '%' + @SearchText +'%' 	    OR (Patient_First_Name + ' '+ Patient_Last_Name) like '%' + @SearchText +'%') END  --EXEC USP_Mst_PatientSearch 22, 'Cynthia Tuscano'"
dbo,USP_BillingSummaryReport," CREATE procedure USP_BillingSummaryReport ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME , 	@UserID INT = 0, 	@search nvarchar(50) = '', 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	With MindHealthBillingReportResult AS	( 	SELECT   		P.Patient_ID, 		P.Patient_First_Name +' ' + P.Patient_Last_Name AS PatientFullName, 		P.Patient_DOB, 		TBP.MonthOfService, --AS BillableDate, 		TBP.MonthOfService AS BillableDate, 		TBP.PrimaryPayerName, 		TBP.PrimaryPayerMemberID, 		TBP.PrimaryPayerGroupNumber, 		TBP.SecondaryPayerName, 		TBP.SecondaryPayerMemberID, 		TBP.SecondaryPayerGroupNumber, 		SUM(BD.SpentDuration) TotalDuration, 		TBP.BillingCPTCode, 		TBP.AddOnCPTCode, 		TBP.PrimaryDiagnosis, 		TBP.SecondaryDiagnosis, 		TBP.ReferringProviderName, 		TBP.PracticeName, 		TBP.SecondAddOnCode, 		P.PatientStatusId, 		MP.StatusName PatientStatusName, 		PR.BillingType, 		PR.BillingTime, 		PR.BillingTimeFees, 		TBP.PracticeBillingType, 		TBP.PracticeBillingTime, 		TBP.PracticeBillingFee, 		TBP.TotalCharges 	FROM TrnBillingProfile TBP 	INNER JOIN TrnPatientBillingDetail BD ON TBP.PatientID = BD.PatientID AND TBP.MonthOfService = BD.MonthOfService AND BD.IsDeleted = 0 	INNER JOIN Mst_Patient P ON BD.PatientID = p.Patient_ID AND P.Account_ID = @AccountID  		AND (P.TypeOfReferral <> 1 OR P.TypeOfReferral IS NULL) -- Direct bill referral type patients should not listed in report as per requirement mentioned in ticket #5313 	LEFT JOIN MstPatientStatuses MP ON MP.ID = P.PatientStatusId  	LEFT JOIN Mst_Practice PR ON TBP.PracticeName = PR.PracticeName 	WHERE BD.MonthOfService >= @fromDate and BD.MonthOfService <= @toDate 	AND ((P.Patient_First_Name + ' ' + P.Patient_Last_Name)  LIKE '%' + @search + '%' 				OR (P.Patient_Last_Name + ' ' + P.Patient_First_Name) LIKE '%' + @search + '%') 	Group By 	P.Patient_ID, 		P.Patient_First_Name +' ' + P.Patient_Last_Name , 		P.Patient_DOB, 		TBP.MonthOfService, --AS BillableDate, 		TBP.PrimaryPayerName, 		TBP.PrimaryPayerMemberID, 		TBP.PrimaryPayerGroupNumber, 		TBP.SecondaryPayerName, 		TBP.SecondaryPayerMemberID, 		TBP.SecondaryPayerGroupNumber, 		TBP.BillingCPTCode, 		TBP.AddOnCPTCode, 		TBP.PrimaryDiagnosis, 		TBP.SecondaryDiagnosis, 		TBP.ReferringProviderName, 		TBP.PracticeName, 		TBP.SecondAddOnCode, 		P.PatientStatusId, 		MP.StatusName, 		PR.BillingType, 		PR.BillingTime, 		PR.BillingTimeFees, 		TBP.PracticeBillingType, 		TBP.PracticeBillingTime, 		TBP.PracticeBillingFee, 		TBP.TotalCharges 	), 	OrderByResult AS (SELECT *, ROW_NUMBER() over (order BY  							case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 							case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 							case when @orderBy = 'BillableDate' and @orderDir = 'asc' then BillableDate end, 							case when @orderBy = 'BillableDate' and @orderDir = 'desc' then BillableDate end desc 		) AS RowNumber FROM MindHealthBillingReportResult  	)  	SELECT *, (Select Count(Patient_ID) FROM MindHealthBillingReportResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  END  --exec USP_BillingSummaryReport 22,'30NOV2022','31DEC2022',3"
dbo,USP_Mst_Physician_Search," Create Procedure [dbo].[USP_Mst_Physician_Search] (@SearchText nvarchar(max)) AS BEGIN 	Select ID, PhysicianName, Phone, Email FROM Mst_Physician WHERE (PhysicianName like  @SearchText +'%' OR Phone like @SearchText + '%') END  --Exec USP_Mst_Physician_Search ''"
dbo,USP_BulkDataPullRequest," Create procedure USP_BulkDataPullRequest ( @FilePath NVarchar(MAX) ) AS BEGIN  	TRUNCATE TABLE Salutem_Temp.DBO.MemberMRN; 	 	DECLARE @SQL NVARCHAR(MAX) = ''     SET @SQL = N'      BULK INSERT Salutem_Temp.DBO.MemberMRN       FROM ''' + @filePath + '''       WITH ( 		FIRSTROW = 2, 		FORMAT = ''csv'',         FIELDTERMINATOR = '','',         ROWTERMINATOR = ''0x0a'', 		TABLOCK       )' 	EXEC sp_executesql @SQL; 	SELECT Count(*) RowsCount FROM Salutem_Temp.DBO.MemberMRN END  --EXEC USP_BulkDataPullRequest 'C:\temp\CSV-Members that need to be deleted in Salutem Final (002).csv' --EXEC USP_BulkDataPullRequest 'C:\Working\Salutem\Docs\DataPullReport\CSV-MRN and FIN List for Data Pull Aug 22 (002).csv' --SELECT * FROM Salutem_Temp.DBO.MemberMRN"
dbo,USP_Mst_Region_Search," Create procedure [dbo].[USP_Mst_Region_Search] ( 	@SearchText nvarchar(max) ) AS BEGIN 	Select ID,  		   RegionName, 		   BusinessUnit, 		   Department, 		   LocationCode, 		   Account		    	FROM Mst_Region  	WHERE RegionName like  @SearchText +'%' END"
dbo,USP_CheckIAHasCompleted," CREATE PROCEDURE [dbo].[USP_CheckIAHasCompleted] ( 	@PatientID INT ) AS BEGIN 	DECLARE @ActivityID INT = 0; 	SELECT @ActivityID = Activity_ID  FROM Mst_Activity WHERE ActivityType='InitialAssessment'; 	PRINT @ActivityID  	IF @ActivityID != 0  	BEGIN  		--returning result if the IA is completed for the patient. 		SELECT Patient_Activity_ID,Activity_ID FROM Trn_Patient_Activity WHERE Activity_ID = @ActivityID AND Patient_ID = @PatientID AND Activity_Start_Status = 3 	END 	ELSE  	BEGIN 		--empty result returning 		SELECT Patient_Activity_ID,Activity_ID FROM Trn_Patient_Activity WHERE 1=2 	END END  --EXEC USP_CheckIAHasCompleted 25813"
dbo,USP_MstDRGSearch," Create Procedure [dbo].[USP_MstDRGSearch] (@SearchText nvarchar(max)) AS BEGIN 	Select ID, DRGNumber, DRGTitle  FROM Mst_DRG  	WHERE DRGNumber like @SearchText +'%' OR DRGTitle LIKE '%' + @SearchText + '%' END  --EXEC USP_MstDRGSearch 'acu'"
dbo,USP_CheckPatientActivityAlreadyExist," Create procedure USP_CheckPatientActivityAlreadyExist (@Activity_ID INT, @Patient_ID INT, @Enroll_ID INT, @InPatientLogID INT ) AS  BEGIN 	 	SELECT [Patient_Activity_ID]       ,[Patient_ID]       ,[Activity_ID]       ,[Activity_Type_ID]       ,[Activity_Start_Date]       ,[Activity_Start_Time]       ,[Activity_Actual_Start_Time]       ,[Activity_Actual_End_Time]       ,[Activity_Assigned_To]       ,[Activity_Note]       ,[Activity_Start_Status]       ,[Activity_Delay_Note]       ,[Activity_Status]       ,[Activity_CretaedAt]       ,[Activity_CreatedBy]       ,[Activity_UpdatedAt]       ,[Activity_UpdatedBy]       ,[Patient_Enroll_ID]       ,[LastCallOutcome]       ,[ActivityOutcome]       ,[LastCallOutcomeName]       ,[ActivityOutcomeName]       ,[ActivityReasonDescription]       ,[IsImmediateActionRequired]   FROM [dbo].[Trn_Patient_Activity] PA  	WHERE PA.Activity_ID= @Activity_ID AND PA.Patient_ID=@Patient_ID AND (@Enroll_ID = 0 OR Patient_Enroll_ID = @Enroll_ID)  	AND (@InPatientLogID = 0 OR InPatientLogId = @InPatientLogID) AND PA.Activity_Status = 1  	ORDER BY [Activity_Start_Date], [Patient_Activity_ID] 	 END  -- EXEC USP_CheckPatientActivityAlreadyExist 4,2353,0,81"
dbo,USP_MstInsuranceSearch," Create Procedure [dbo].[USP_MstInsuranceSearch] ( 	@ID INT = 0 ,  	@SearchText nvarchar(max) = '', 	@IsIncludeDeleted INT = 0 ) AS BEGIN 	Select I.ID, I.Insurance +' - '+ ST.StateName AS Insurance,I.Insurance AS InsuranceName, I.InsuranceType, E.EnumName AS InsuranceTypeName, Isnull(ST.ID,0) as StateId,Isnull(ST.StateName,'') as StateName 	FROM Mst_Insurance I LEFT JOIN Mst_Enum E ON ISNULL(I.InsuranceType, 0) = E.EnumValue AND E.EnumType='InsuranceType' 	LEFT JOIN Mst_State ST ON I.StateID = ST.ID 	WHERE (@IsIncludeDeleted = 1 OR IsDeleted = 0) AND (@ID = 0 OR I.ID = @ID) AND Insurance like  @SearchText +'%' END  --EXEC USP_MstInsuranceSearch 0, '', 1"
dbo,USP_CheckRxNumberExist," Create procedure USP_CheckRxNumberExist ( @PatientId INT, @RxNumber VARCHAR(50), @ServiceDate DATETIME, @Med_ID INT ) AS BEGIN 	SELECT  		Patient_Dosage_ID 	From Trn_Patient_Med_Dosage  	WHERE ServiceDate = @ServiceDate AND Med_ID=@Med_ID AND Patient_ID = @PatientId AND RxNumber = @RxNumber   END  --EXEC USP_CheckRxNumberExist 3,'511119','2021-03-10 00:00:00.000',10278"
dbo,USP_NonBillingServicesDetails," CREATE procedure USP_NonBillingServicesDetails ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME ) AS BEGIN 	SELECT  		DISTINCT TPA.Patient_ID, 		'' AS billing_code, 		TPA.DateOfService AS dos, 		--TBP.PatientID, 		TBP.PracticeName AS practice_name, 		TBP.ReferringProviderName AS primary_physician, 		U.User_First_Name +' ' + U.User_Last_Name AS bcm, 		P.Patient_First_Name +' ' + P.Patient_Last_Name AS patient_name, 		TBP.PrimaryDiagnosis AS primary_dx, 		D.ICD10Code AS reason_for_referral, 		AE.Discription AS patient_type 	FROM Trn_Patient_Activity TPA 	INNER JOIN Mst_Patient P ON TPA.Patient_ID = p.Patient_ID  AND P.Patient_Status =1 AND P.Account_ID = @AccountID 	LEFT JOIN TrnBillingProfile TBP ON TBP.PatientID = TPA.Patient_ID AND TBP.MonthOfService = TPA.DateOfService AND TBP.IsDeleted = 0 	LEFT JOIN TrnPatientAssessmentLog PAL ON PAL.PatientActivityID = TBP.PatientActivityID 	LEFT JOIN Mst_User U ON TPA.Activity_Assigned_To = U.User_ID 	LEFT JOIN Mst_Diagnosis D ON P.ReasonForReferral = D.Diagnosis_ID 	LEFT JOIN MstAssessmentEnum AE ON AE.EnumValue = PAL.ProgramType AND AE.EnumType='ProgramTypes' 	WHERE IsSubmited =1 AND TBP.PatientID IS NULL --AND IsBillable =0 	AND TPA.DateOfService >= @fromDate and TPA.DateOfService <= @toDate  END  --exec USP_NonBillingServicesDetails 22,'07/01/2022','07/31/2022'"
dbo,USP_Claim_Import," Create procedure USP_Claim_Import ( @FilePath NVarchar(MAX) ) AS BEGIN  	TRUNCATE TABLE Salutem_Temp.DBO.Claim_Import; 	 	DECLARE @SQL NVARCHAR(MAX) = ''     SET @SQL = N'     BULK INSERT Salutem_Temp.DBO.Claim_Import       FROM ''' + @filePath + '''       WITH ( 		FIRSTROW = 2, 		FORMAT = ''csv'',         FIELDTERMINATOR = '','',         ROWTERMINATOR = ''0x0a'', 		TABLOCK       )' 	EXEC sp_executesql @SQL; 	SELECT Count(*) RowsCount FROM Salutem_Temp.DBO.Claim_Import END  --EXEC USP_Claim_Import 'C:\Working\IPEP\Upload\c3_claims_20210407.csv' --EXEC USP_Claim_Import 'C:\Working\IPEP\Upload\c3_claims_20210405-Sample.csv'  ----Query for getting new claim record  --SELECT CI.* FROM Salutem_Temp.DBO.Claim_Import CI INNER JOIN Mst_Patient P ON CI.MBI=P.Patient_MRN AND P.Patient_Status=1 --LEFT JOIN Trn_Patient_Med_Dosage PMD ON P.Patient_ID = PMD.Patient_ID AND CI.service_date=PMD.ServiceDate AND CI.rx_number=PMD.RxNumber --WHERE PMD.Patient_ID IS NULL AND PMD.ServiceDate IS NULL and PMD.RxNumber IS NULL --ORDER BY MBI,NDC,rx_number,service_date"
dbo,USP_PatientOutreachLogActivity," Create procedure [dbo].USP_PatientOutreachLogActivity ( 	@userId INT,  	@AccountId INT, 	@ActivitySort varchar(50) = '', 	@filterBy varchar(100) = '',  	@filterByActivityType varchar(max) = '', 	@search nvarchar(50) = '',  	@orderBy nvarchar(50) = '',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN 	SET NOCOUNT ON; 	Declare @isAdmin BIT; 	SET @isAdmin = dbo.func_IsUserAdmin(@userId); WITH Result AS ( SELECT  	OT.OutreachLogId, 	OT.Patient_ID, 	OT.TypeID, 	OT.PracticeID, 	OT.BCMUserId, 	OT.OutreachStatusId, 	OT.OutreachDate, 	OT.SUD, 	OT.CallBackDate, 	OT.LastCallDate, 	P.Patient_First_Name,  	P.Patient_Last_Name, 	P.PatientFullName, 	OutType.Discription AS OutLogType, 	PR.PracticeName, 	BCMUSR.User_First_Name + ' ' + BCMUSR.User_Last_Name AS BCMUserName, 	OT.AttemptNumber, 	OT.AssignedTo, 	OT.ActivityOutcome FROM Trn_OutreachLog OT INNER JOIN View_Mst_Patient P ON OT.Patient_ID = p.Patient_ID INNER JOIN Mst_Practice PR ON OT.PracticeID = PR.ID LEFT JOIN Mst_User BCMUSR ON OT.BCMUserId = BCMUSR.User_ID LEFT JOIN Mst_Enum OutType ON OutType.EnumValue = OT.TypeID AND OutType.EnumType = 'OutreachLogType' WHERE P.Patient_Status = 1 AND (@search = '' OR (P.Patient_First_Name + ' ' + P.Patient_Last_Name  LIKE '%' + @search + '%' OR P.Patient_MRN LIKE '%' + @search + '%' OR P.Patient_Contact_Phone LIKE '%' + @search + '%')) ),  	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc								 								 			) AS RowNumber FROM Result  	) 	 	SELECT *, (Select Count(OutreachLogId) FROM Result) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize); END  "
dbo,USP_ClaimDataImport," Create procedure USP_ClaimDataImport ( @importClaimDataTable ClaimImportTableType readonly ) AS BEGIN 	INSERT INTO Salutem_Temp.dbo.Claim_Import select * from @importClaimDataTable 	SELECT @@ROWCOUNT END"
dbo,USP_PatientStatusUpdateCursor," CREATE procedure USP_PatientStatusUpdateCursor (@AccountID INT ) AS BEGIN 	DECLARE @Patient_ID int,@Patient_Activity_ID int, @TypeOfReferral int, @ActivityDate DateTime;  	DECLARE @InactivePatientStatusID int = (SELECT StatusID FROM MstPatientStatuses WHERE EnumStatusName = 'Inactive');  	DECLARE @IA_ActivityID int = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'InitialAssessment'); 	DECLARE @PN_ActivityID int = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'ProgressNote'); 	DECLARE @GN_ActivityID int = (SELECT Activity_ID FROM Mst_Activity WHERE ActivityType = 'GroupNote'); 	--- 	DECLARE @DirectBillReferral INT = (SELECT EnumValue FROM Mst_Enum WHERE EnumType = 'TypeOfReferral' AND EnumName = 'DirectBillReferral'); 	DECLARE @CoCM INT = (SELECT EnumValue FROM Mst_Enum WHERE EnumType = 'TypeOfReferral' AND EnumName = 'DirectCoCMReferral'); 	DECLARE @SelfPay INT = (SELECT EnumValue FROM Mst_Enum WHERE EnumType = 'TypeOfReferral' AND EnumName = 'Self-Pay'); 	DECLARE @MAT INT = (SELECT EnumValue FROM Mst_Enum WHERE EnumType = 'TypeOfReferral' AND EnumName = 'MATReferral'); 	 	DECLARE patientStatusUpdateCursor CURSOR FOR 	SELECT P.Patient_ID,TPA.Patient_Activity_ID,P.TypeOfReferral,--E.Discription, 	Coalesce(TPA.Activity_Actual_End_Time, TPA.Activity_Actual_Start_Time,TPA.Activity_Start_Date) ActivityDate 	FROM Mst_Patient P 	INNER JOIN Trn_Patient_Activity TPA ON P.Patient_ID = TPA.Patient_ID AND TPA.Activity_ID IN (@IA_ActivityID,@PN_ActivityID,@GN_ActivityID) 	INNER JOIN Mst_Enum E ON P.TypeOfReferral = E.EnumValue AND E.EnumType = 'TypeOfReferral' 	WHERE P.PatientStatusId != @InactivePatientStatusID AND Patient_Activity_ID IN ( 	    SELECT MAX(Patient_Activity_ID) 	    FROM Trn_Patient_Activity 		WHERE Activity_ID IN (@IA_ActivityID,@PN_ActivityID,@GN_ActivityID) 	    GROUP BY Patient_ID 	) AND P.Account_ID = @AccountID 	ORDER BY P.Patient_ID 	 	OPEN patientStatusUpdateCursor 	FETCH NEXT FROM patientStatusUpdateCursor 	INTO @Patient_ID,@Patient_Activity_ID,@TypeOfReferral,@ActivityDate 	WHILE @@FETCH_STATUS = 0 	BEGIN 		DECLARE @DateDifference int = (SELECT DATEDIFF(day, @ActivityDate, GETDATE())); 		--If Referral Type = CoCM, Direct Care or Self-Pay from Referral Info tab  		--AND patient has not attended an IA, PN, GN in the last 90 days, then set Patient Status to ""Inactive"" 		IF(@TypeOfReferral IN (@DirectBillReferral,@CoCM,@SelfPay) AND @DateDifference >= 90) 		BEGIN 			DECLARE @TypeReferralName varchar(250) = (SELECT Discription FROM Mst_Enum WHERE EnumType = 'TypeOfReferral' AND EnumValue = @TypeOfReferral); 			UPDATE Mst_Patient SET PatientStatusId = @InactivePatientStatusID,PatientStatusDate = GETDATE() 			WHERE Patient_ID = @Patient_ID 			-- Maintain Log 			--'Auto Inserted. While match condtion Referral type is '+@TypeReferralName+' and Date difference is '+@DateDifference+' .Hence status is set to Inactive' 			--INSERT INTO TrnPatientStatusLog(PatientID,PatientStatusId,PatientStatusDate,PatientStatusOtherText,CreatedBy,CreatedOn) 			--VALUES(@Patient_ID,@InactivePatientStatusID,GETDATE(),'Auto Inserted' ,1,GETDATE()) 		END 		--If Referral Type = MAT  from Referral Info tab  		--AND patient has not attended an IA, PN, GN in the last 45 days, then set Patient Status to ""Inactive"" 		IF(@TypeOfReferral = @MAT AND @DateDifference >= 45) 		BEGIN 			UPDATE Mst_Patient SET PatientStatusId = @InactivePatientStatusID,PatientStatusDate = GETDATE() 			WHERE Patient_ID = @Patient_ID 			-- Maintain Log 			--'Auto Inserted. While match condtion Referral type is MAT and Date difference is '+@DateDifference+' .Hence status is set to Inactive' 			--INSERT INTO TrnPatientStatusLog(PatientID,PatientStatusId,PatientStatusDate,PatientStatusOtherText,CreatedBy,CreatedOn) 			--VALUES(@Patient_ID,@InactivePatientStatusID,GETDATE(),'Auto Inserted' ,1,GETDATE()) 		END 	FETCH NEXT FROM patientStatusUpdateCursor 	INTO @Patient_ID,@Patient_Activity_ID,@TypeOfReferral,@ActivityDate END CLOSE patientStatusUpdateCursor; DEALLOCATE patientStatusUpdateCursor; END --EXEC USP_PatientStatusUpdateCursor 31"
dbo,USP_CreateOrUpdateInitialPatientRegistry," CREATE procedure USP_CreateOrUpdateInitialPatientRegistry ( 	@UserID INT = 3 ) AS BEGIN 	SET NOCOUNT ON;  	DECLARE @IAActivityID INT; 	DECLARE @AccountID INT; 	SELECT @IAActivityID = Activity_ID FROM Mst_Activity WHERE ActivityType='InitialAssessment'; 	SELECT @AccountID  = Account_ID FROM Mst_Account WHERE AccountType = 3; -- for mind healthy account 	 	WITH PatientsFirstIA AS ( 			SELECT P.Patient_ID, Patient_Activity_ID, Coalesce(Activity_Actual_End_Time, Activity_Actual_Start_Time) AS ActivityDate, DateOfService 			FROM Mst_Patient P INNER JOIN Trn_Patient_Activity PA ON P.Patient_ID = PA.Patient_ID AND P.Account_ID = @AccountID AND PA.Activity_ID = @IAActivityID AND PA.Activity_Start_Status = 3 		)-- SELECT * FROM PatientsFirstIA 		SELECT * INTO #TempTable FROM (SELECT P.Patient_ID, Patient_First_Name, Patient_Last_Name, Patient_DOB 			,Ph.PhysicianName AS ReferringProviderName 			,Pr.PracticeName 			,DXT.Dx 			,IA.DateOfService 			,IA.ActivityDate 			,IA.Patient_Activity_ID IAPatientActivityID 			,PHQScore.Score AS FirstPHQScore 			,GADScore.Score AS FirstGADScore 			,PA.HasFlagForReview 			,PA.ReviewNote 			,ALog.CliniciansName 		FROM Mst_Patient P 		LEFT JOIN Mst_Physician Ph ON Ph.ID = P.ReferringProviderId  		LEFT JOIN Mst_Practice Pr on Pr.ID = P.PatientPracticeId 		LEFT JOIN PatientsFirstIA IA ON P.Patient_ID = IA.Patient_ID 		INNER JOIN Trn_Patient_Activity PA ON PA.Patient_Activity_ID = IA.Patient_Activity_ID  		LEFT JOIN TrnPatientAssessmentLog ALog ON ALog.PatientActivityID = IA.Patient_Activity_ID  		CROSS APPLY funcGetDXCodeByPatientId(P.Patient_ID) DXT 		CROSS APPLY funcGetPatientPHQorGADScore(P.Patient_ID, IA.Patient_Activity_ID, 1, 1) PHQScore 		CROSS APPLY funcGetPatientPHQorGADScore(P.Patient_ID, IA.Patient_Activity_ID, 1, 2) GADScore 		WHERE Account_ID = @AccountID AND Patient_Status = 1 	) A 	 	DECLARE @Cursor_PatientID INT 	DECLARE TempRegistry_Cursor CURSOR FOR SELECT Patient_ID FROM #TempTable 	OPEN TempRegistry_Cursor   	    FETCH NEXT FROM TempRegistry_Cursor INTO @Cursor_PatientID 	    WHILE @@FETCH_STATUS = 0   	    BEGIN   	        IF EXISTS (SELECT * FROM TrnPatientRegistry WHERE PatientID = @Cursor_PatientID) 			BEGIN  				UPDATE TrnPatientRegistry  					SET ClinicianName = T.CliniciansName,  					ReferringProviderName=T.ReferringProviderName,  					PracticeName = T.PracticeName, 					Diagnosis = T.Dx, 					PHQ9FirstServiceDate=T.ActivityDate, 					PHQ9FirstScore = T.FirstPHQScore, 					GAD7FirstServiceDate = T.ActivityDate, 					GAD7FirstScore = T.FirstGADScore, 					PatientActivityID = T.IAPatientActivityID, 					IsFlagged= T.HasFlagForReview, 					FlagComment = T.ReviewNote, 					UpdatedBy = @UserID 				FROM TrnPatientRegistry R INNER JOIN #TempTable T ON R.PatientID = T.Patient_ID AND T.Patient_ID = @Cursor_PatientID 				 				--PRINT 'Record Found: '+  Convert(varchar(50), @Cursor_PatientID) 			END 			ELSE BEGIN  				INSERT INTO TrnPatientRegistry (PatientID, ClinicianName,ReferringProviderName,PracticeName,Diagnosis,ServiceStartDate,PHQ9FirstServiceDate,PHQ9FirstScore,GAD7FirstServiceDate,GAD7FirstScore,PatientActivityID,IsFlagged,FlagComment,UpdatedBy, UpdatedOn) 				SELECT T.Patient_ID, T.CliniciansName,ReferringProviderName,PracticeName,T.Dx,T.DateOfService,T.ActivityDate, T.FirstPHQScore,T.ActivityDate,T.FirstGADScore,T.IAPatientActivityID,T.HasFlagForReview,T.ReviewNote,@UserID,GETUTCDATE() 				FROM #TempTable T WHERE T.Patient_ID = @Cursor_PatientID 				--PRINT 'Record not found: '+ Convert(varchar(50), @Cursor_PatientID) 			END 			 			FETCH NEXT FROM TempRegistry_Cursor INTO @Cursor_PatientID   		END   	 	CLOSE TempRegistry_Cursor   	DEALLOCATE TempRegistry_Cursor    	SELECT ID,PatientID,ClinicianName,ReferringProviderName,PracticeName,Diagnosis,ServiceStartDate,PHQ9FirstServiceDate,PHQ9FirstScore, 	PHQ9LastServiceDate,PHQ9LastScore,GAD7LastServiceDate,GAD7LastScore,IsFlagged,FlagComment,IsReviewed,UpdatedBy,UpdatedOn FROM TrnPatientRegistry 	 	DROP TABLE #TempTable END  -- EXEC USP_CreateOrUpdateInitialPatientRegistry 3"
dbo,USP_ReportCallsDetailsForHospital," CREATE procedure [dbo].[USP_ReportCallsDetailsForHospital] ( 	@AccountId INT, 	@activityId int, 	@fromDate DATETIME, 	@toDate DATETIME, 	@CallStatusID INT, 	@PCC INT, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN SET NOCOUNT ON; 	DECLARE @toDateUpEndOfTheDay DATETIME 	SELECT @toDateUpEndOfTheDay = DATEADD(DAY, 1, @toDate) 	 	BEGIN	 		With CallDetailsResult AS	(SELECT  				P.Patient_ID, Patient_MRN 				,Patient_First_Name +' '+ Patient_Last_Name AS PatientFullName 				,P.ZipCode, 				I.FinNumber,  				I.DRG,  				I.UnitNumber 				,I.DischargeDate 				,U.User_First_Name +' '+ U.User_Last_Name AS PCCName 				,CASE WHEN PA.Activity_Type_ID = 1 AND MA.ActivityType = 'HomeVisit' THEN '' ELSE  C.CallOutcome END AS CallStatusName -- When Activity_Type_ID is 1 means it is in-person activity so no need to show calloutcome from master table. 				,A.AttemptDate AS CallDate 				,PA.ActivityReasonDescription 		        ,PA.Activity_ID 				,PA.ActivityOutcomeName 				,PA.SpentTimeInMinutes 				FROM Mst_Patient P INNER JOIN Trn_InPatientLog I ON P.Patient_ID = I.Patient_ID 				INNER JOIN Trn_Patient_Activity PA ON PA.Patient_ID = I.Patient_ID AND I.InPatientLogId = PA.InPatientLogId 				INNER JOIN Mst_User U ON PA.Activity_Assigned_To = U.User_ID 				INNER JOIN  Trn_Activity_Attempt A ON PA.Patient_Activity_ID = A.Patient_Activity_ID 				INNER JOIN Mst_CallOutcome C ON C.Id= A.AttemptStatus 				INNER JOIN Mst_Activity MA ON MA.Activity_ID = PA.Activity_ID 			WHERE A.AttemptDate >= @fromDate AND A.AttemptDate <= @toDateUpEndOfTheDay 				AND (@CallStatusID = 0 OR A.AttemptStatus = @CallStatusID)  				AND PA.Activity_ID = @ActivityId				 				AND (@PCC = 0 OR PA.Activity_Assigned_To = @PCC)			 			),  				OrderByResult AS (SELECT *, 				ROW_NUMBER() over ( 				order BY case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 									case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 									case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 									case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 									case when @orderBy = 'AttemptDate' and @orderDir = 'asc' then CallDate end, 									case when @orderBy = 'AttemptDate' and @orderDir = 'desc' then CallDate end desc  				) AS RowNumber FROM CallDetailsResult  		)   		SELECT *, (Select Count(Patient_ID) FROM CallDetailsResult) TotalRows   		FROM OrderByResult  		WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) 		 	END  END  --Exec USP_ReportCallsDetailsForHospital 21, 3, '01Nov2022','15Nov2022',0,0"
dbo,USP_CreatePDCActivity," Create procedure USP_CreatePDCActivity ( 	@PatientId int, 	@UserId int, 	@Activity_ID INT, 	@Activity_Start_Date DateTime, 	@Activity_Start_Time Time(7), 	@EnrollmentID INT ) AS BEGIN 	Declare @PatientActivityID INT = 0; 	INSERT INTO Trn_Patient_Activity (Patient_ID, Activity_ID,Activity_Type_ID, Activity_Start_Date, Activity_Start_Time, Activity_Start_Status,  		Activity_Status, Activity_CretaedAt, Activity_CreatedBy, Patient_Enroll_ID) 	VALUES (@PatientId, @Activity_ID,1, @Activity_Start_Date, @Activity_Start_Time, 1, 1, GetDate(), @UserId, @EnrollmentID)  	SET @PatientActivityID = SCOPE_IDENTITY() 	SELECT @PatientActivityID  END  -- Exec USP_CreatePDCActivity 3,3,11,'29Mar2021','08:00',4038 "
dbo,USP_ReportConsultDetailsForHospital," CREATE procedure USP_ReportConsultDetailsForHospital ( 	@AccountID INT, 	@ActivityID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@pccId INT, 	@status INT, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN  With ConsultDetailsResult AS	(SELECT  				patient.Patient_MRN, 				patient.Patient_ID, 				patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName,				 				PA.Patient_Activity_ID, 				ME.EnumName AS Activity_Start_Status, 				Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time, PA.Activity_Start_Date) AS Activity_Date, 				PA.Activity_Assigned_To, 				U.User_First_Name + ' ' + U.User_Last_Name AS PCCFullName,				 				patient.ZipCode, 				I.FinNumber,  				I.DRG,  				I.UnitNumber 				,PA.ActivityReasonDescription 				,PA.ActivityOutcomeName 				,PA.SpentTimeInMinutes 				,I.DischargeDate 			FROM Trn_Patient_Activity PA 		INNER JOIN dbo.Mst_Patient patient ON patient.Patient_ID = PA.Patient_ID AND patient.Account_ID = @AccountID 		INNER JOIN Mst_Enum ME ON Coalesce(PA.Activity_Start_Status, 1) = ME.EnumValue  		        AND	ME.EnumType='ActivityStatus' 		LEFT JOIN Mst_User U ON U.User_ID = PA.Activity_Assigned_To                 AND ME.EnumType = 'ActivityStatus' 			INNER JOIN Trn_InPatientLog I ON patient.Patient_ID = I.Patient_ID AND PA.InPatientLogId = I.InPatientLogId 		WHERE Convert(Date,Coalesce(PA.Activity_Actual_End_Time, PA.Activity_Actual_Start_Time,PA.Activity_Start_Date)) >= @fromDate  			AND Convert(Date,Coalesce(PA.Activity_Actual_End_Time,PA.Activity_Actual_Start_Time,PA.Activity_Start_Date)) <= @toDate 			AND (@pccId = 0 OR PA.Activity_Assigned_To = @pccId) 			AND (@status = 0 OR Coalesce(PA.Activity_Start_Status, 1) = @status) 			AND PA.Activity_ID = @ActivityID 	), 	OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'Activity_Date' and @orderDir = 'asc' then Activity_Date end, 								case when @orderBy = 'Activity_Date' and @orderDir = 'desc' then Activity_Date end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc,							 								case when @orderBy = 'PCCFullName' and @orderDir = 'asc' then PCCFullName end, 								case when @orderBy = 'PCCFullName' and @orderDir = 'desc' then PCCFullName end desc 								 								 			) AS RowNumber FROM ConsultDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ConsultDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize) END   -- exec [dbo].[USP_ReportConsultDetailsForHospital] @AccountID=21,@ActivityID=4,@fromDate='2022-10-10 00:00:00',@toDate='2022-11-08 00:00:00',@pccId=0,@status=0,@orderBy=N'Display_Activity_Date',@orderDir='asc',@StartFrom=0,@PageSize=10  "
dbo,USP_DeleteHospitalPatient," Create procedure USP_DeleteHospitalPatient (@PatientMRN VARCHAR(50))  AS BEGIN 	CREATE TABLE #TempPatient ( 	 PatientID INT 	) 	CREATE TABLE #TempActivity ( 	 PatientActivityID INT 	)  	INSERT INTO #TempPatient SELECT P.Patient_ID FROM Mst_Patient P WHERE Patient_MRN = @PatientMRN 	INSERT INTO  #TempActivity SELECT Patient_Activity_ID FROM Trn_Patient_Activity A INNER JOIN #TempPatient T ON A.Patient_ID = T.PatientID 	 	DELETE U FROM Trn_Patient_UHCDetails U INNER JOIN #TempPatient T ON U.PatientID=T.PatientID 	DELETE C FROM Trn_Patient_Contact C INNER JOIN #TempPatient T ON C.Patient_ID = T.PatientID 	 	DELETE AR FROM Trn_ActivityAssessmentResponse AR INNER JOIN #TempActivity TA ON AR.PatientActivityId = TA.PatientActivityID 	DELETE AA FROM Trn_Activity_Assignment AA INNER JOIN #TempActivity TA ON AA.Patient_Activity_ID = TA.PatientActivityID 	DELETE AA FROM Trn_Activity_Attempt AA INNER JOIN #TempActivity TA ON AA.Patient_Activity_ID = TA.PatientActivityID 	DELETE A FROM Trn_Patient_Activity A INNER JOIN #TempActivity TA ON A.Patient_Activity_ID = TA.PatientActivityID 	 	DELETE PA FROM Trn_Patient_Allergies PA INNER JOIN #TempPatient T ON PA.Patient_ID=T.PatientID 	DELETE PA FROM Trn_Patient_Appointment PA INNER JOIN #TempPatient T ON PA.Patient_ID=T.PatientID 	DELETE PA FROM Trn_Patient_Attachment PA INNER JOIN #TempPatient T ON PA.PatientId=T.PatientID 	DELETE PB FROM Trn_Patient_Barrier_Assessment PB INNER JOIN #TempPatient T ON PB.PatientId=T.PatientID 	DELETE PC FROM Trn_Patient_Conversion PC INNER JOIN #TempPatient T ON PC.PatientId=T.PatientID 	DELETE PD FROM Trn_Patient_Discharge PD INNER JOIN #TempPatient T ON PD.Patient_ID=T.PatientID 	 	DELETE CI FROM Trn_Clinical_Intervention CI INNER JOIN #TempPatient T ON CI.Patient_ID=T.PatientID 	DELETE PMD FROM Trn_Patient_Med_Dosage PMD INNER JOIN #TempPatient T ON PMD.Patient_ID=T.PatientID 	 	DELETE PN FROM Trn_Patient_Notes PN INNER JOIN #TempPatient T ON PN.Patient_ID=T.PatientID 	DELETE PC FROM Trn_Patient_PCP PC INNER JOIN #TempPatient T ON PC.PatientId=T.PatientID 	DELETE PP FROM Trn_Patient_Pharmcy PP INNER JOIN #TempPatient T ON PP.Patient_ID=T.PatientID 	DELETE PP FROM Trn_Patient_Prescriber PP INNER JOIN #TempPatient T ON PP.Patient_ID=T.PatientID 	DELETE PQA FROM Trn_PatientQuestionAnswers PQA INNER JOIN #TempPatient T ON PQA.PatientID=T.PatientID 	 	DELETE INP FROM Trn_InPatientLog INP INNER JOIN #TempPatient T ON INP.Patient_ID=T.PatientID 	DELETE P FROM Mst_Patient P INNER JOIN #TempPatient T ON P.Patient_ID=T.PatientID 	--DROP TABLE #TempPatient END"
dbo,USP_ReportEnrollmentDetailsHospital," CREATE procedure [dbo].[USP_ReportEnrollmentDetailsHospital] ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@status int, 	@ReportType varchar(50), 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN  DECLARE @ToDateEnd DATETIME = @ToDate + 1;  --Creating temp table for storing employees enrollment activity outcome. --This is required because sometimes enrollment activity is getting completed in Enrollment as well as Discharge Info activities. --So here it might have multiple enrollment activities for the patient. We have to read the out come from last completed activity i.e. from discharge info activity. --In order to achive this result we are creating 3 temp tables. -- 1. #temp1 will have all the completed activity record for Enrollment and Discharg info activity. -- 2. #temp2 will have last completed activity record details for the each pateint. (max unique record for each pateint) -- 3. #EnrollmentActivityOutcome table will have latest record with Activity outcome name.  SELECT PA.Patient_ID, ILog.InPatientLogId, PA.Activity_ID, PA.ActivityOutcomeName,PA.SpentTimeInMinutes INTO #Temp1 FROM Trn_InPatientLog ILog  INNER JOIN  Trn_Patient_Activity PA ON  ILog.InPatientLogId = PA.InPatientLogId AND ILog.Patient_ID = PA.Patient_ID  INNER JOIN Mst_Activity A ON A.Activity_ID =  PA.Activity_ID AND A.ActivityType IN ('EnrollPatient','DischargeInfo') -- Reading only Enrollpatient and DischargeInfo completed activity WHERE PA.Activity_Start_Status > 2;  --Inserting max activity record in #temp table from #temp1 table. SELECT Patient_ID, InPatientLogId, MAX(Activity_ID) Activity_ID INTO #temp2  from #Temp1 GROUP BY Patient_ID, InPatientLogId ;  --Reading all record from #temp1 table with mapping #temp2. (It will get all the max activity record from table table) SELECT E.* INTO #EnrollmentActivityOutcome FROM #temp2 t INNER JOIN #Temp1 E ON t.Activity_ID=E.Activity_ID AND t.InPatientLogId=e.InPatientLogId AND t.Patient_ID=e.Patient_ID ;  With EnrollmentDetailsResult AS	(SELECT 									IPL.InPatientLogId, 									IPL.Patient_ID, 									IPL.EnrollmentDate, 									IPL.UnitNumber, 									patient.Patient_MRN, 									patient.Patient_First_Name +' '+ patient.Patient_Last_Name AS PatientFullName, 									patient.Patient_DOB, 									IPL.FinNumber, 									ME.Discription AS EnrollmentStatusName, 									E.ActivityOutcomeName AS EnrollmentOutcome, 									E.SpentTimeInMinutes, 									VFHW.Activity_Start_Date, 									VFHW.Discription AS ActvityStartStatusName, 									VFHW.Activity_Type_Name, 									VFHW.ActivityOutcomeName AS HomeVisitActivityOutcome, 									IPL.DischargeDate, 									patient.ZipCode, 									drg.DRGTitle 									FROM Trn_InPatientLog IPL 									INNER JOIN Mst_Enum ME ON IPL.EnrollmentStatus = ME.EnumValue AND ME.EnumType = 'EnrollmentStatus' 									INNER JOIN Mst_Patient patient ON patient.Patient_ID = IPL.Patient_ID AND patient.Account_ID = @AccountID 									LEFT JOIN #EnrollmentActivityOutcome E ON E.InPatientLogId = IPL.InPatientLogId 									LEFT JOIN View_HWF_PatientFirstHomeVisitStatus VFHW ON VFHW.Patient_ID = IPL.Patient_ID AND VFHW.InPatientLogId = IPL.InPatientLogId 									LEFT JOIN Mst_DRG drg  ON drg.ID = IPL.DRG 								WHERE IPL.EnrollmentDate >= @fromDate AND IPL.EnrollmentDate < @ToDateEnd 								AND (@status = 99 OR IPL.EnrollmentStatus = @status) 								AND IPL.EnrollmentDate IS NOT NULL 	  ), 	  OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'EnrollmentDate' and @orderDir = 'asc' then EnrollmentDate end, 								case when @orderBy = 'EnrollmentDate' and @orderDir = 'desc' then EnrollmentDate end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'Patient_DOB' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'Patient_DOB' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'EnrollmentStatusName' and @orderDir = 'asc' then EnrollmentStatusName end, 								case when @orderBy = 'EnrollmentStatusName' and @orderDir = 'desc' then EnrollmentStatusName end desc, 								case when @orderBy = 'ActvityStartStatusName' and @orderDir = 'asc' then ActvityStartStatusName end, 								case when @orderBy = 'ActvityStartStatusName' and @orderDir = 'desc' then ActvityStartStatusName end desc 								 			) AS RowNumber FROM EnrollmentDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM EnrollmentDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  	DROP TABLE #temp2 	DROP TABLE #Temp1 	DROP TABLE #EnrollmentActivityOutcome END  --EXEC USP_ReportEnrollmentDetailsHospital 21,'01Jan2021','30Jun2022',99,'','PatientID'"
dbo,USP_DeletePayerPatient," Create procedure USP_DeletePayerPatient  AS BEGIN 	CREATE TABLE #TempPatient ( 	 PatientID INT 	) 	 	CREATE TABLE #TempActivity ( 	 PatientActivityID INT 	) 	 	INSERT INTO #TempPatient SELECT P.Patient_ID FROM Mst_Patient P INNER JOIN Salutem_Temp.dbo.MemberMRN M ON P.Patient_MRN = M.MRN; 	INSERT INTO  #TempActivity SELECT Patient_Activity_ID FROM Trn_Patient_Activity A INNER JOIN #TempPatient T ON A.Patient_ID = T.PatientID 	 	DELETE U FROM Trn_Patient_UHCDetails U INNER JOIN #TempPatient T ON U.PatientID=T.PatientID 	DELETE C FROM Trn_Patient_Contact C INNER JOIN #TempPatient T ON C.Patient_ID = T.PatientID 	 	DELETE AR FROM Trn_ActivityAssessmentResponse AR INNER JOIN #TempActivity TA ON AR.PatientActivityId = TA.PatientActivityID 	DELETE AA FROM Trn_Activity_Assignment AA INNER JOIN #TempActivity TA ON AA.Patient_Activity_ID = TA.PatientActivityID 	DELETE AA FROM Trn_Activity_Attempt AA INNER JOIN #TempActivity TA ON AA.Patient_Activity_ID = TA.PatientActivityID 	DELETE A FROM Trn_Patient_Activity A INNER JOIN #TempActivity TA ON A.Patient_Activity_ID = TA.PatientActivityID 	 	DELETE PA FROM Trn_Patient_Allergies PA INNER JOIN #TempPatient T ON PA.Patient_ID=T.PatientID 	DELETE PA FROM Trn_Patient_Appointment PA INNER JOIN #TempPatient T ON PA.Patient_ID=T.PatientID 	DELETE PA FROM Trn_Patient_Attachment PA INNER JOIN #TempPatient T ON PA.PatientId=T.PatientID 	DELETE PB FROM Trn_Patient_Barrier_Assessment PB INNER JOIN #TempPatient T ON PB.PatientId=T.PatientID 	DELETE PC FROM Trn_Patient_Conversion PC INNER JOIN #TempPatient T ON PC.PatientId=T.PatientID 	DELETE PD FROM Trn_Patient_Discharge PD INNER JOIN #TempPatient T ON PD.Patient_ID=T.PatientID 	 	DELETE CI FROM Trn_Clinical_Intervention CI INNER JOIN #TempPatient T ON CI.Patient_ID=T.PatientID 	DELETE PMD FROM Trn_Patient_Med_Dosage PMD INNER JOIN #TempPatient T ON PMD.Patient_ID=T.PatientID 	 	DELETE PN FROM Trn_Patient_Notes PN INNER JOIN #TempPatient T ON PN.Patient_ID=T.PatientID 	DELETE PC FROM Trn_Patient_PCP PC INNER JOIN #TempPatient T ON PC.PatientId=T.PatientID 	DELETE PP FROM Trn_Patient_Pharmcy PP INNER JOIN #TempPatient T ON PP.Patient_ID=T.PatientID 	DELETE PP FROM Trn_Patient_Prescriber PP INNER JOIN #TempPatient T ON PP.Patient_ID=T.PatientID 	DELETE PQA FROM Trn_PatientQuestionAnswers PQA INNER JOIN #TempPatient T ON PQA.PatientID=T.PatientID 	 	DELETE EA FROM Trn_Enrollment_Attempt EA INNER JOIN Trn_Patient_Enrollment E ON EA.EnrollmentId = E.Patient_Enroll_ID 	INNER JOIN #TempPatient T ON E.Patient_ID=T.PatientID  	DELETE E FROM Trn_Patient_Enrollment E INNER JOIN #TempPatient T ON E.Patient_ID=T.PatientID 	 	DELETE P FROM Mst_Patient P INNER JOIN #TempPatient T ON P.Patient_ID=T.PatientID 	 	SELECT * FROM #TempPatient 	--DROP TABLE #TempPatient END  -- EXEC USP_BulkDataPullRequest 'C:\Working\Salutem\Docs\7July2022- DataPull-Update\CSV-MRNs to be Deleted from Salutem 06.28.22.csv' --Exec USP_DeletePayerPatient  "
dbo,USP_ReportReadmissionDetailsHospital," CREATE procedure [dbo].[USP_ReportReadmissionDetailsHospital] ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME, 	@ProgramCompletionStatus int, 	@PatientReadmitted int, 	@orderBy nvarchar(50) = 'PatientFullName',  	@orderDir varchar(4) = 'asc',  	@StartFrom int = 0,  	@PageSize int = 999999999 ) AS BEGIN DECLARE @Today DATETIME = GETDATE(); With ReadmissionDetailsResult AS	(SELECT 										patient.Patient_ID, 										patient.Patient_MRN, 										IPL.FinNumber, 										IPL.UnitNumber, 										IPL.DischargeDate, 										patient.Patient_First_Name + ' ' + patient.Patient_Last_Name AS PatientFullName, 										IPL.IsPatientReadmitted, 										IPL.ReadmissionDate, 										IPL.ReadmissionDiagnosis, 										IPL.ProgramCompletion, 										patient.ZipCode, 										drg.DRGTitle 										FROM Trn_InPatientLog IPL 										INNER JOIN Mst_Patient patient ON patient.Patient_ID = IPL.Patient_ID AND patient.Account_ID = @AccountID 										LEFT JOIN Mst_DRG drg  ON drg.ID = IPL.DRG 								WHERE IPL.DischargeDate >= @fromDate  								AND IPL.DischargeDate <= @toDate 								AND (@ProgramCompletionStatus = 0 OR Coalesce(IPL.ProgramCompletion, 0) = @ProgramCompletionStatus) 								AND (@PatientReadmitted = 0 OR Coalesce(IPL.IsPatientReadmitted, 0) = @PatientReadmitted) 								AND DATEDIFF(day, IPL.DischargeDate, @Today) >= 30 								AND IPL.EnrollmentStatus = 1 								AND IPL.DischargeDate IS NOT NULL 	  ), 	  OrderByResult AS (SELECT *, 			ROW_NUMBER() over ( 			order BY case when @orderBy = 'DischargeDate' and @orderDir = 'asc' then DischargeDate end, 								case when @orderBy = 'DischargeDate' and @orderDir = 'desc' then DischargeDate end desc, 								case when @orderBy = 'ReadmissionDate' and @orderDir = 'asc' then ReadmissionDate end, 								case when @orderBy = 'ReadmissionDate' and @orderDir = 'desc' then ReadmissionDate end desc, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'asc' then Patient_MRN end, 								case when @orderBy = 'Patient_MRN' and @orderDir = 'desc' then Patient_MRN end desc, 								case when @orderBy = 'PatientFullName' and @orderDir = 'asc' then PatientFullName end, 								case when @orderBy = 'PatientFullName' and @orderDir = 'desc' then PatientFullName end desc, 								case when @orderBy = 'ProgramCompletion' and @orderDir = 'asc' then ProgramCompletion end, 								case when @orderBy = 'ProgramCompletion' and @orderDir = 'desc' then ProgramCompletion end desc, 								case when @orderBy = 'IsPatientReadmitted' and @orderDir = 'asc' then IsPatientReadmitted end, 								case when @orderBy = 'IsPatientReadmitted' and @orderDir = 'desc' then IsPatientReadmitted end desc 								 			) AS RowNumber FROM ReadmissionDetailsResult  	)   	SELECT *, (Select Count(Patient_ID) FROM ReadmissionDetailsResult) TotalRows   	FROM OrderByResult  	WHERE OrderByResult.RowNumber BETWEEN (@StartFrom + 1) AND (@StartFrom  + @pageSize)  END --EXEC USP_ReportReadmissionDetailsHospital 21,'01/01/2021 12:00:00','12/08/2022 12:00:00',0,0,'Patient_MRN','asc',0,10"
dbo,USP_DRGListImport," Create procedure USP_DRGListImport ( 	@importTable DRGTableTypes readonly ) AS BEGIN 	INSERT INTO dbo.DRGTempTable select DRGCode, DRGTitle, MDC, EN.EnumValue AS TYPE, Weights, GeometricMeanLOS, 	ArithmeticMeanLOS 	from @importTable imt 	LEFT JOIN Mst_Enum EN ON imt.TYPE = EN.Discription AND EN.EnumType = 'DRGType' 	SELECT @@ROWCOUNT END "
dbo,USP_ScoreServicesDetails," CREATE procedure USP_ScoreServicesDetails ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME ) AS BEGIN 	SELECT * INTO #TempTable FROM ( 		SELECT  			PatientID, PatientActivityID,DateOfService,ActivityAssignedTo  		FROM TrnPatientBillingDetail BD 		WHERE BD.ActivityType in ('InitialAssessment', 'ProgressNote') 		AND BD.DateOfService >= @fromDate and BD.DateOfService <= @toDate 	) A;  	SELECT * INTO #TempTable2 FROM ( 		SELECT  			A.PatientID AS patient_id,  			A.PatientActivityID, 			A.DateOfService, 			PR.PHQ9FirstScore AS phq9_score, 			PR.GAD7FirstScore AS gad7_score, 			PR.PracticeName AS practice_name, 			PR.ReferringProviderName AS primary_physician, 			PR.Diagnosis AS dx_Codes, 			P.Patient_First_Name + ' '+ P.Patient_Last_Name AS patient_name, 			D.ICD10Code AS reason_for_referral, 			U.User_First_Name +' ' + U.User_Last_Name AS bcm 			FROM #TempTable A 			INNER JOIN TrnPatientRegistry PR ON PR.PatientID = A.PatientID 			INNER JOIN Mst_Patient P ON A.PatientID = P.Patient_ID AND P.Patient_Status = 1 AND P.Account_ID = @AccountId 			LEFT JOIN Mst_User U ON U.User_ID = A.ActivityAssignedTo 			LEFT JOIN Mst_Diagnosis D ON D.Diagnosis_ID = P.ReasonForReferral 	) B;  	SELECT  		B.DateOfService AS date_recorded, 		B.practice_name, 		B.phq9_score, 		B.gad7_score, 		B.primary_physician, 		B.bcm, 		B.patient_name, 		B.patient_id, 		B.dx_Codes, 		B.reason_for_referral, 		PHQScore.Score AS phq9_initial, 		GADScore.Score AS gad7_initial 	FROM #TempTable2 B 	CROSS APPLY funcGetPatientPHQorGADScore(B.patient_id, B.PatientActivityID, 1, 1) PHQScore 	CROSS APPLY funcGetPatientPHQorGADScore(B.patient_id, B.PatientActivityID, 1, 2) GADScore  	DROP TABLE #TempTable; 	DROP TABLE #TempTable2; END  --exec USP_ScoreServicesDetails 22,'2022-07-01','2022-07-31'"
dbo,USP_GenerateCurrentYearEnrollmentQueueIfNotExists," Create procedure USP_GenerateCurrentYearEnrollmentQueueIfNotExists (@UserId INT) AS BEGIN 	-- this procesdure will create enrollment queue for the previous year registered patient if the enrollment entry not exist for the current year. 	DECLARE @currentYear int = YEAR(GETDATE()); 	 	WITH CurrentYearEnrollment AS ( 		SELECT P.Patient_ID,P.Patient_MRN,PE.Patient_Enroll_ID ,UploadedYear,EnrollmentDate  		From Mst_Patient P INNER JOIN Trn_Patient_Enrollment PE ON P.Patient_ID = PE.Patient_ID  		WHERE PE.UploadedYear = @currentYear OR YEAR(PE.EnrollmentDate) = @currentYear 	) 	 	INSERT INTO Trn_Patient_Enrollment (Patient_ID,Patient_Enrollment_Status,CreatedOn,CreatedBy,UploadedYear) 	SELECT P.Patient_ID,0,GETDATE(),@UserId,@currentYear 	From Salutem_Temp.dbo.Member_Import MP  	INNER JOIN Mst_Patient P ON MP.Member_MBI = P.Patient_MRN 	LEFT JOIN Trn_Patient_Enrollment PE ON P.Patient_ID = PE.Patient_ID  	WHERE (PE.Patient_Enrollment_Status IS NULL OR (PE.UploadedYear != @currentYear AND PE.Patient_Enrollment_Status > 0)) 	AND P.Patient_ID NOT IN (SELECT Patient_ID FROM CurrentYearEnrollment);  	 	SELECT @@ROWCOUNT AS [ROWCOUNT]; END  --EXEC USP_GenerateCurrentYearEnrollmentQueueIfNotExists 3"
dbo,USP_ServiceBillingSummaryReport," CREATE procedure USP_ServiceBillingSummaryReport ( 	@AccountID INT, 	@fromDate DATETIME, 	@toDate DATETIME ) AS BEGIN 	SELECT   		P.Patient_ID, 		P.Patient_First_Name +' ' + P.Patient_Last_Name AS PatientFullName, 		P.Patient_DOB, 		TBP.MonthOfService, --AS BillableDate, 		TBP.MonthOfService AS BillableDate, 		TBP.PrimaryPayerName, 		TBP.PrimaryPayerMemberID, 		TBP.PrimaryPayerGroupNumber, 		TBP.SecondaryPayerName, 		TBP.SecondaryPayerMemberID, 		TBP.SecondaryPayerGroupNumber, 		SUM(BD.SpentDuration) TotalDuration, 		TBP.BillingCPTCode, 		TBP.AddOnCPTCode, 		TBP.PrimaryDiagnosis, 		TBP.SecondaryDiagnosis, 		TBP.ReferringProviderName, 		TBP.PracticeName, 		TBP.SecondAddOnCode 	FROM TrnBillingProfile TBP 	INNER JOIN TrnPatientBillingDetail BD ON TBP.PatientID = BD.PatientID AND TBP.MonthOfService = BD.MonthOfService AND BD.IsDeleted = 0 	INNER JOIN Mst_Patient P ON BD.PatientID = p.Patient_ID AND P.Account_ID = @AccountID 	WHERE BD.MonthOfService >= @fromDate and BD.MonthOfService <= @toDate 	Group By 	P.Patient_ID, 		P.Patient_First_Name +' ' + P.Patient_Last_Name , 		P.Patient_DOB, 		TBP.MonthOfService, --AS BillableDate, 		TBP.PrimaryPayerName, 		TBP.PrimaryPayerMemberID, 		TBP.PrimaryPayerGroupNumber, 		TBP.SecondaryPayerName, 		TBP.SecondaryPayerMemberID, 		TBP.SecondaryPayerGroupNumber, 		TBP.BillingCPTCode, 		TBP.AddOnCPTCode, 		TBP.PrimaryDiagnosis, 		TBP.SecondaryDiagnosis, 		TBP.ReferringProviderName, 		TBP.PracticeName, 		TBP.SecondAddOnCode END"
dbo,USP_Get_All_Trn_BookAppointment," create procedure USP_Get_All_Trn_BookAppointment  AS BEGIN   SELECT TRN.AppointmentId,          TRN.[Description], 		 TRN.StartDate, 		 TRN.EndDate, 		 TRN.StartTime, 		 TRN.EndTime, 		 TRN.ResourceID, 		 TRN.Patient_Id, 		 TRN.AppointmentType, 		 TRN.LocationID, 		 TRN.ServiceType, 		 TRN.RepeatTypeID 		 FROM Trn_BookAppointment TRN END"
dbo,USP_Trn_Patient_Contact," Create procedure USP_Trn_Patient_Contact (@PatientId INT) AS BEGIN 	SELECT  		Patient_Contact_ID, 		Patient_ID, 		Patient_Contact_Type, 		Patient_Contact_name, 		Patient_Relation_ID, 		Patient_Contact_Phone, 		Patient_Contact_email, 		Patient_Contact_Add1, 		Patient_Contact_Add2, 		Patient_Contact_Add3, 		Patient_Contact_City, 		Patient_Contact_County, 		Patient_Contact_State, 		Patient_Contact_Status, 		Patient_Contact_CreatedAt, 		Patient_Contact_CreatedBy, 		Patient_Contact_UpdatedAt, 		Patient_Contact_UpdatedBy, 		IsPrimary, 		ZipCode, 		IsTextAvailable, 		AddressTypeId, 		IsMobilePreference, 		IsEmailPreference, 		IsSMSPreference, 		ConsentToVoicemail, 		ConsentToText 	From Trn_Patient_Contact TPC  	 	WHERE TPC.Patient_ID = @PatientId  END  --Exec USP_Trn_Patient_Contact 16489"
dbo,USP_Get_Trn_BookAppointment," create procedure USP_Get_Trn_BookAppointment ( 	@AppointmentId int = 0 ) AS BEGIN   SELECT TRN.AppointmentId,          TRN.[Description], 		 TRN.StartDate, 		 TRN.StartDate, 		 TRN.EndTime 		 FROM Trn_BookAppointment TRN 		 WHERE AppointmentId = @AppointmentId END"
dbo,USP_Trn_Patient_PCP," Create procedure USP_Trn_Patient_PCP (@PatientId INT) AS BEGIN 	SELECT  		TPCP.ID,TPCP.PatientId,PcpId, 		MPCP.PCP_First_Name, 		MPCP.PCP_Last_Name, 		MPCP.PCP_First_Name + ' '+MPCP.PCP_Last_Name AS PCPFullName, 		PCP_Phone 	From Trn_Patient_PCP TPCP  	INNER JOIN Mst_PCP MPCP ON MPCP.Id = TPCP.PcpId 	WHERE TPCP.PatientId = @PatientId AND ISNULL(TPCP.isDeleted, 0) = 0 END  --EXEC USP_Trn_Patient_PCP 3"
